!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
PA_API_VERSION	/usr/include/pulse/version.h	48;"	d
PA_AUTOLOAD_SINK	/usr/include/pulse/introspect.h	/^    PA_AUTOLOAD_SINK = 0,$/;"	e	enum:pa_autoload_type
PA_AUTOLOAD_SOURCE	/usr/include/pulse/introspect.h	/^    PA_AUTOLOAD_SOURCE = 1$/;"	e	enum:pa_autoload_type
PA_BYTES_SNPRINT_MAX	/usr/include/pulse/sample.h	312;"	d
PA_CHANNELS_MAX	/usr/include/pulse/sample.h	123;"	d
PA_CHANNEL_MAP_AIFF	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_MAP_AIFF,$/;"	e	enum:pa_channel_map_def
PA_CHANNEL_MAP_AIFF	/usr/include/pulse/channelmap.h	252;"	d
PA_CHANNEL_MAP_ALSA	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_MAP_ALSA,$/;"	e	enum:pa_channel_map_def
PA_CHANNEL_MAP_ALSA	/usr/include/pulse/channelmap.h	253;"	d
PA_CHANNEL_MAP_AUX	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_MAP_AUX,$/;"	e	enum:pa_channel_map_def
PA_CHANNEL_MAP_AUX	/usr/include/pulse/channelmap.h	254;"	d
PA_CHANNEL_MAP_DEFAULT	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_MAP_DEFAULT = PA_CHANNEL_MAP_AIFF$/;"	e	enum:pa_channel_map_def
PA_CHANNEL_MAP_DEFAULT	/usr/include/pulse/channelmap.h	258;"	d
PA_CHANNEL_MAP_DEF_MAX	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_MAP_DEF_MAX,$/;"	e	enum:pa_channel_map_def
PA_CHANNEL_MAP_DEF_MAX	/usr/include/pulse/channelmap.h	257;"	d
PA_CHANNEL_MAP_OSS	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_MAP_OSS,$/;"	e	enum:pa_channel_map_def
PA_CHANNEL_MAP_OSS	/usr/include/pulse/channelmap.h	256;"	d
PA_CHANNEL_MAP_SNPRINT_MAX	/usr/include/pulse/channelmap.h	309;"	d
PA_CHANNEL_MAP_WAVEEX	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_MAP_WAVEEX,$/;"	e	enum:pa_channel_map_def
PA_CHANNEL_MAP_WAVEEX	/usr/include/pulse/channelmap.h	255;"	d
PA_CHANNEL_POSITION_AUX0	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX0,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX0	/usr/include/pulse/channelmap.h	169;"	d
PA_CHANNEL_POSITION_AUX1	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX1,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX1	/usr/include/pulse/channelmap.h	170;"	d
PA_CHANNEL_POSITION_AUX10	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX10,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX10	/usr/include/pulse/channelmap.h	179;"	d
PA_CHANNEL_POSITION_AUX11	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX11,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX11	/usr/include/pulse/channelmap.h	180;"	d
PA_CHANNEL_POSITION_AUX12	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX12,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX12	/usr/include/pulse/channelmap.h	181;"	d
PA_CHANNEL_POSITION_AUX13	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX13,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX13	/usr/include/pulse/channelmap.h	182;"	d
PA_CHANNEL_POSITION_AUX14	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX14,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX14	/usr/include/pulse/channelmap.h	183;"	d
PA_CHANNEL_POSITION_AUX15	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX15,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX15	/usr/include/pulse/channelmap.h	184;"	d
PA_CHANNEL_POSITION_AUX16	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX16,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX16	/usr/include/pulse/channelmap.h	185;"	d
PA_CHANNEL_POSITION_AUX17	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX17,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX17	/usr/include/pulse/channelmap.h	186;"	d
PA_CHANNEL_POSITION_AUX18	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX18,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX18	/usr/include/pulse/channelmap.h	187;"	d
PA_CHANNEL_POSITION_AUX19	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX19,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX19	/usr/include/pulse/channelmap.h	188;"	d
PA_CHANNEL_POSITION_AUX2	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX2,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX2	/usr/include/pulse/channelmap.h	171;"	d
PA_CHANNEL_POSITION_AUX20	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX20,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX20	/usr/include/pulse/channelmap.h	189;"	d
PA_CHANNEL_POSITION_AUX21	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX21,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX21	/usr/include/pulse/channelmap.h	190;"	d
PA_CHANNEL_POSITION_AUX22	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX22,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX22	/usr/include/pulse/channelmap.h	191;"	d
PA_CHANNEL_POSITION_AUX23	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX23,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX23	/usr/include/pulse/channelmap.h	192;"	d
PA_CHANNEL_POSITION_AUX24	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX24,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX24	/usr/include/pulse/channelmap.h	193;"	d
PA_CHANNEL_POSITION_AUX25	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX25,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX25	/usr/include/pulse/channelmap.h	194;"	d
PA_CHANNEL_POSITION_AUX26	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX26,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX26	/usr/include/pulse/channelmap.h	195;"	d
PA_CHANNEL_POSITION_AUX27	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX27,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX27	/usr/include/pulse/channelmap.h	196;"	d
PA_CHANNEL_POSITION_AUX28	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX28,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX28	/usr/include/pulse/channelmap.h	197;"	d
PA_CHANNEL_POSITION_AUX29	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX29,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX29	/usr/include/pulse/channelmap.h	198;"	d
PA_CHANNEL_POSITION_AUX3	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX3,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX3	/usr/include/pulse/channelmap.h	172;"	d
PA_CHANNEL_POSITION_AUX30	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX30,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX30	/usr/include/pulse/channelmap.h	199;"	d
PA_CHANNEL_POSITION_AUX31	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX31,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX31	/usr/include/pulse/channelmap.h	200;"	d
PA_CHANNEL_POSITION_AUX4	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX4,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX4	/usr/include/pulse/channelmap.h	173;"	d
PA_CHANNEL_POSITION_AUX5	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX5,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX5	/usr/include/pulse/channelmap.h	174;"	d
PA_CHANNEL_POSITION_AUX6	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX6,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX6	/usr/include/pulse/channelmap.h	175;"	d
PA_CHANNEL_POSITION_AUX7	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX7,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX7	/usr/include/pulse/channelmap.h	176;"	d
PA_CHANNEL_POSITION_AUX8	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX8,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX8	/usr/include/pulse/channelmap.h	177;"	d
PA_CHANNEL_POSITION_AUX9	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_AUX9,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_AUX9	/usr/include/pulse/channelmap.h	178;"	d
PA_CHANNEL_POSITION_CENTER	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_CENTER = PA_CHANNEL_POSITION_FRONT_CENTER,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_CENTER	/usr/include/pulse/channelmap.h	156;"	d
PA_CHANNEL_POSITION_FRONT_CENTER	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_FRONT_CENTER,             \/**< Apple, Dolby call this 'Center' *\/$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_FRONT_CENTER	/usr/include/pulse/channelmap.h	159;"	d
PA_CHANNEL_POSITION_FRONT_LEFT	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_FRONT_LEFT,               \/**< Apple, Dolby call this 'Left' *\/$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_FRONT_LEFT	/usr/include/pulse/channelmap.h	157;"	d
PA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER,     \/**< Apple, Dolby call this 'Left Center' *\/$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER	/usr/include/pulse/channelmap.h	165;"	d
PA_CHANNEL_POSITION_FRONT_RIGHT	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_FRONT_RIGHT,              \/**< Apple, Dolby call this 'Right' *\/$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_FRONT_RIGHT	/usr/include/pulse/channelmap.h	158;"	d
PA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER,    \/**< Apple, Dolby call this 'Right Center *\/$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER	/usr/include/pulse/channelmap.h	166;"	d
PA_CHANNEL_POSITION_INVALID	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_INVALID = -1,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_INVALID	/usr/include/pulse/channelmap.h	152;"	d
PA_CHANNEL_POSITION_LEFT	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_LEFT = PA_CHANNEL_POSITION_FRONT_LEFT,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_LEFT	/usr/include/pulse/channelmap.h	154;"	d
PA_CHANNEL_POSITION_LFE	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_LFE,                      \/**< Microsoft calls this 'Low Frequency', Apple calls this 'LFEScreen' *\/$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_LFE	/usr/include/pulse/channelmap.h	163;"	d
PA_CHANNEL_POSITION_MASK	/usr/include/pulse/channelmap.h	215;"	d
PA_CHANNEL_POSITION_MAX	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_MAX$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_MAX	/usr/include/pulse/channelmap.h	208;"	d
PA_CHANNEL_POSITION_MONO	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_MONO = 0,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_MONO	/usr/include/pulse/channelmap.h	153;"	d
PA_CHANNEL_POSITION_REAR_CENTER	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_REAR_CENTER,              \/**< Microsoft calls this 'Back Center', Apple calls this 'Center Surround', Dolby calls this 'Surround Rear Center' *\/$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_REAR_CENTER	/usr/include/pulse/channelmap.h	160;"	d
PA_CHANNEL_POSITION_REAR_LEFT	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_REAR_LEFT,                \/**< Microsoft calls this 'Back Left', Apple calls this 'Left Surround' (!), Dolby calls this 'Surround Rear Left'  *\/$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_REAR_LEFT	/usr/include/pulse/channelmap.h	161;"	d
PA_CHANNEL_POSITION_REAR_RIGHT	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_REAR_RIGHT,               \/**< Microsoft calls this 'Back Right', Apple calls this 'Right Surround' (!), Dolby calls this 'Surround Rear Right'  *\/$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_REAR_RIGHT	/usr/include/pulse/channelmap.h	162;"	d
PA_CHANNEL_POSITION_RIGHT	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_RIGHT = PA_CHANNEL_POSITION_FRONT_RIGHT,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_RIGHT	/usr/include/pulse/channelmap.h	155;"	d
PA_CHANNEL_POSITION_SIDE_LEFT	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_SIDE_LEFT,                \/**< Apple calls this 'Left Surround Direct', Dolby calls this 'Surround Left' (!) *\/$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_SIDE_LEFT	/usr/include/pulse/channelmap.h	167;"	d
PA_CHANNEL_POSITION_SIDE_RIGHT	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_SIDE_RIGHT,               \/**< Apple calls this 'Right Surround Direct', Dolby calls this 'Surround Right' (!) *\/$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_SIDE_RIGHT	/usr/include/pulse/channelmap.h	168;"	d
PA_CHANNEL_POSITION_SUBWOOFER	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_SUBWOOFER = PA_CHANNEL_POSITION_LFE,$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_SUBWOOFER	/usr/include/pulse/channelmap.h	164;"	d
PA_CHANNEL_POSITION_TOP_CENTER	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_TOP_CENTER,               \/**< Apple calls this 'Top Center Surround' *\/$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_TOP_CENTER	/usr/include/pulse/channelmap.h	201;"	d
PA_CHANNEL_POSITION_TOP_FRONT_CENTER	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_TOP_FRONT_CENTER,         \/**< Apple calls this 'Vertical Height Center' *\/$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_TOP_FRONT_CENTER	/usr/include/pulse/channelmap.h	204;"	d
PA_CHANNEL_POSITION_TOP_FRONT_LEFT	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_TOP_FRONT_LEFT,           \/**< Apple calls this 'Vertical Height Left' *\/$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_TOP_FRONT_LEFT	/usr/include/pulse/channelmap.h	202;"	d
PA_CHANNEL_POSITION_TOP_FRONT_RIGHT	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_TOP_FRONT_RIGHT,          \/**< Apple calls this 'Vertical Height Right' *\/$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_TOP_FRONT_RIGHT	/usr/include/pulse/channelmap.h	203;"	d
PA_CHANNEL_POSITION_TOP_REAR_CENTER	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_TOP_REAR_CENTER,          \/**< Microsoft and Apple call this 'Top Back Center' *\/$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_TOP_REAR_CENTER	/usr/include/pulse/channelmap.h	207;"	d
PA_CHANNEL_POSITION_TOP_REAR_LEFT	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_TOP_REAR_LEFT,            \/**< Microsoft and Apple call this 'Top Back Left' *\/$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_TOP_REAR_LEFT	/usr/include/pulse/channelmap.h	205;"	d
PA_CHANNEL_POSITION_TOP_REAR_RIGHT	/usr/include/pulse/channelmap.h	/^    PA_CHANNEL_POSITION_TOP_REAR_RIGHT,           \/**< Microsoft and Apple call this 'Top Back Right' *\/$/;"	e	enum:pa_channel_position
PA_CHANNEL_POSITION_TOP_REAR_RIGHT	/usr/include/pulse/channelmap.h	206;"	d
PA_CHECK_VERSION	/usr/include/pulse/version.h	65;"	d
PA_CLAMP_VOLUME	/usr/include/pulse/volume.h	132;"	d
PA_CONTEXT_AUTHORIZING	/usr/include/pulse/def.h	/^    PA_CONTEXT_AUTHORIZING,    \/**< The client is authorizing itself to the daemon *\/$/;"	e	enum:pa_context_state
PA_CONTEXT_AUTHORIZING	/usr/include/pulse/def.h	61;"	d
PA_CONTEXT_CONNECTING	/usr/include/pulse/def.h	/^    PA_CONTEXT_CONNECTING,     \/**< A connection is being established *\/$/;"	e	enum:pa_context_state
PA_CONTEXT_CONNECTING	/usr/include/pulse/def.h	60;"	d
PA_CONTEXT_FAILED	/usr/include/pulse/def.h	/^    PA_CONTEXT_FAILED,         \/**< The connection failed or was disconnected *\/$/;"	e	enum:pa_context_state
PA_CONTEXT_FAILED	/usr/include/pulse/def.h	64;"	d
PA_CONTEXT_IS_GOOD	/usr/include/pulse/def.h	/^static inline int PA_CONTEXT_IS_GOOD(pa_context_state_t x) {$/;"	f	signature:(pa_context_state_t x)
PA_CONTEXT_IS_GOOD	/usr/include/pulse/def.h	66;"	d
PA_CONTEXT_NOAUTOSPAWN	/usr/include/pulse/def.h	/^    PA_CONTEXT_NOAUTOSPAWN = 0x0001U,$/;"	e	enum:pa_context_flags
PA_CONTEXT_NOAUTOSPAWN	/usr/include/pulse/def.h	123;"	d
PA_CONTEXT_NOFAIL	/usr/include/pulse/def.h	/^    PA_CONTEXT_NOFAIL = 0x0002U$/;"	e	enum:pa_context_flags
PA_CONTEXT_NOFAIL	/usr/include/pulse/def.h	124;"	d
PA_CONTEXT_NOFLAGS	/usr/include/pulse/def.h	/^    PA_CONTEXT_NOFLAGS = 0x0000U,$/;"	e	enum:pa_context_flags
PA_CONTEXT_READY	/usr/include/pulse/def.h	/^    PA_CONTEXT_READY,          \/**< The connection is established, the context is ready to execute operations *\/$/;"	e	enum:pa_context_state
PA_CONTEXT_READY	/usr/include/pulse/def.h	63;"	d
PA_CONTEXT_SETTING_NAME	/usr/include/pulse/def.h	/^    PA_CONTEXT_SETTING_NAME,   \/**< The client is passing its application name to the daemon *\/$/;"	e	enum:pa_context_state
PA_CONTEXT_SETTING_NAME	/usr/include/pulse/def.h	62;"	d
PA_CONTEXT_TERMINATED	/usr/include/pulse/def.h	/^    PA_CONTEXT_TERMINATED      \/**< The connection was terminated cleanly *\/$/;"	e	enum:pa_context_state
PA_CONTEXT_TERMINATED	/usr/include/pulse/def.h	65;"	d
PA_CONTEXT_UNCONNECTED	/usr/include/pulse/def.h	/^    PA_CONTEXT_UNCONNECTED,    \/**< The context hasn't been connected yet *\/$/;"	e	enum:pa_context_state
PA_CONTEXT_UNCONNECTED	/usr/include/pulse/def.h	59;"	d
PA_CVOLUME_SNPRINT_MAX	/usr/include/pulse/volume.h	162;"	d
PA_C_DECL_BEGIN	/usr/include/pulse/cdecl.h	30;"	d
PA_C_DECL_BEGIN	/usr/include/pulse/cdecl.h	36;"	d
PA_C_DECL_END	/usr/include/pulse/cdecl.h	32;"	d
PA_C_DECL_END	/usr/include/pulse/cdecl.h	38;"	d
PA_DECIBEL_MININFTY	/usr/include/pulse/volume.h	286;"	d
PA_DECIBEL_MININFTY	/usr/include/pulse/volume.h	289;"	d
PA_DEVICE_TYPE_SINK	/usr/include/pulse/def.h	/^    PA_DEVICE_TYPE_SINK,     \/**< Playback device *\/$/;"	e	enum:pa_device_type
PA_DEVICE_TYPE_SINK	/usr/include/pulse/def.h	148;"	d
PA_DEVICE_TYPE_SOURCE	/usr/include/pulse/def.h	/^    PA_DEVICE_TYPE_SOURCE    \/**< Recording device *\/$/;"	e	enum:pa_device_type
PA_DEVICE_TYPE_SOURCE	/usr/include/pulse/def.h	149;"	d
PA_DIRECTION_INPUT	/usr/include/pulse/def.h	/^    PA_DIRECTION_INPUT = 0x0002U    \/**< Input direction *\/$/;"	e	enum:pa_direction
PA_DIRECTION_INPUT	/usr/include/pulse/def.h	138;"	d
PA_DIRECTION_OUTPUT	/usr/include/pulse/def.h	/^    PA_DIRECTION_OUTPUT = 0x0001U,  \/**< Output direction *\/$/;"	e	enum:pa_direction
PA_DIRECTION_OUTPUT	/usr/include/pulse/def.h	137;"	d
PA_ENCODING_AC3_IEC61937	/usr/include/pulse/format.h	/^    PA_ENCODING_AC3_IEC61937,$/;"	e	enum:pa_encoding
PA_ENCODING_ANY	/usr/include/pulse/format.h	/^    PA_ENCODING_ANY,$/;"	e	enum:pa_encoding
PA_ENCODING_DTS_IEC61937	/usr/include/pulse/format.h	/^    PA_ENCODING_DTS_IEC61937,$/;"	e	enum:pa_encoding
PA_ENCODING_EAC3_IEC61937	/usr/include/pulse/format.h	/^    PA_ENCODING_EAC3_IEC61937,$/;"	e	enum:pa_encoding
PA_ENCODING_INVALID	/usr/include/pulse/format.h	/^    PA_ENCODING_INVALID = -1,$/;"	e	enum:pa_encoding
PA_ENCODING_MAX	/usr/include/pulse/format.h	/^    PA_ENCODING_MAX,$/;"	e	enum:pa_encoding
PA_ENCODING_MPEG_IEC61937	/usr/include/pulse/format.h	/^    PA_ENCODING_MPEG_IEC61937,$/;"	e	enum:pa_encoding
PA_ENCODING_PCM	/usr/include/pulse/format.h	/^    PA_ENCODING_PCM,$/;"	e	enum:pa_encoding
PA_ERR_ACCESS	/usr/include/pulse/def.h	/^    PA_ERR_ACCESS,                 \/**< Access failure *\/$/;"	e	enum:__anon1
PA_ERR_ACCESS	/usr/include/pulse/def.h	449;"	d
PA_ERR_AUTHKEY	/usr/include/pulse/def.h	/^    PA_ERR_AUTHKEY,                \/**< No authorization key *\/$/;"	e	enum:__anon1
PA_ERR_AUTHKEY	/usr/include/pulse/def.h	457;"	d
PA_ERR_BADSTATE	/usr/include/pulse/def.h	/^    PA_ERR_BADSTATE,               \/**< Bad state *\/$/;"	e	enum:__anon1
PA_ERR_BADSTATE	/usr/include/pulse/def.h	463;"	d
PA_ERR_BUSY	/usr/include/pulse/def.h	/^    PA_ERR_BUSY,                   \/**< Device or resource busy. \\since 0.9.17 *\/$/;"	e	enum:__anon1
PA_ERR_COMMAND	/usr/include/pulse/def.h	/^    PA_ERR_COMMAND,                \/**< Unknown command *\/$/;"	e	enum:__anon1
PA_ERR_COMMAND	/usr/include/pulse/def.h	450;"	d
PA_ERR_CONNECTIONREFUSED	/usr/include/pulse/def.h	/^    PA_ERR_CONNECTIONREFUSED,      \/**< Connection refused *\/$/;"	e	enum:__anon1
PA_ERR_CONNECTIONREFUSED	/usr/include/pulse/def.h	454;"	d
PA_ERR_CONNECTIONTERMINATED	/usr/include/pulse/def.h	/^    PA_ERR_CONNECTIONTERMINATED,   \/**< Connection terminated *\/$/;"	e	enum:__anon1
PA_ERR_CONNECTIONTERMINATED	/usr/include/pulse/def.h	459;"	d
PA_ERR_EXIST	/usr/include/pulse/def.h	/^    PA_ERR_EXIST,                  \/**< Entity exists *\/$/;"	e	enum:__anon1
PA_ERR_EXIST	/usr/include/pulse/def.h	452;"	d
PA_ERR_FORKED	/usr/include/pulse/def.h	/^    PA_ERR_FORKED,                 \/**< The caller forked without calling execve() and tried to reuse the context. \\since 0.9.15 *\/$/;"	e	enum:__anon1
PA_ERR_FORKED	/usr/include/pulse/def.h	472;"	d
PA_ERR_INTERNAL	/usr/include/pulse/def.h	/^    PA_ERR_INTERNAL,               \/**< Internal error *\/$/;"	e	enum:__anon1
PA_ERR_INTERNAL	/usr/include/pulse/def.h	458;"	d
PA_ERR_INVALID	/usr/include/pulse/def.h	/^    PA_ERR_INVALID,                \/**< Invalid argument *\/$/;"	e	enum:__anon1
PA_ERR_INVALID	/usr/include/pulse/def.h	451;"	d
PA_ERR_INVALIDSERVER	/usr/include/pulse/def.h	/^    PA_ERR_INVALIDSERVER,          \/**< Invalid server *\/$/;"	e	enum:__anon1
PA_ERR_INVALIDSERVER	/usr/include/pulse/def.h	461;"	d
PA_ERR_IO	/usr/include/pulse/def.h	/^    PA_ERR_IO,                     \/**< An IO error happened. \\since 0.9.16 *\/$/;"	e	enum:__anon1
PA_ERR_KILLED	/usr/include/pulse/def.h	/^    PA_ERR_KILLED,                 \/**< Entity killed *\/$/;"	e	enum:__anon1
PA_ERR_KILLED	/usr/include/pulse/def.h	460;"	d
PA_ERR_MAX	/usr/include/pulse/def.h	/^    PA_ERR_MAX                     \/**< Not really an error but the first invalid error code *\/$/;"	e	enum:__anon1
PA_ERR_MAX	/usr/include/pulse/def.h	473;"	d
PA_ERR_MODINITFAILED	/usr/include/pulse/def.h	/^    PA_ERR_MODINITFAILED,          \/**< Module initialization failed *\/$/;"	e	enum:__anon1
PA_ERR_MODINITFAILED	/usr/include/pulse/def.h	462;"	d
PA_ERR_NODATA	/usr/include/pulse/def.h	/^    PA_ERR_NODATA,                 \/**< No data *\/$/;"	e	enum:__anon1
PA_ERR_NODATA	/usr/include/pulse/def.h	464;"	d
PA_ERR_NOENTITY	/usr/include/pulse/def.h	/^    PA_ERR_NOENTITY,               \/**< No such entity *\/$/;"	e	enum:__anon1
PA_ERR_NOENTITY	/usr/include/pulse/def.h	453;"	d
PA_ERR_NOEXTENSION	/usr/include/pulse/def.h	/^    PA_ERR_NOEXTENSION,            \/**< Extension does not exist. \\since 0.9.12 *\/$/;"	e	enum:__anon1
PA_ERR_NOEXTENSION	/usr/include/pulse/def.h	469;"	d
PA_ERR_NOTIMPLEMENTED	/usr/include/pulse/def.h	/^    PA_ERR_NOTIMPLEMENTED,         \/**< Missing implementation. \\since 0.9.15 *\/$/;"	e	enum:__anon1
PA_ERR_NOTIMPLEMENTED	/usr/include/pulse/def.h	471;"	d
PA_ERR_NOTSUPPORTED	/usr/include/pulse/def.h	/^    PA_ERR_NOTSUPPORTED,           \/**< Operation not supported \\since 0.9.5 *\/$/;"	e	enum:__anon1
PA_ERR_NOTSUPPORTED	/usr/include/pulse/def.h	467;"	d
PA_ERR_OBSOLETE	/usr/include/pulse/def.h	/^    PA_ERR_OBSOLETE,               \/**< Obsolete functionality. \\since 0.9.15 *\/$/;"	e	enum:__anon1
PA_ERR_OBSOLETE	/usr/include/pulse/def.h	470;"	d
PA_ERR_PROTOCOL	/usr/include/pulse/def.h	/^    PA_ERR_PROTOCOL,               \/**< Protocol error *\/$/;"	e	enum:__anon1
PA_ERR_PROTOCOL	/usr/include/pulse/def.h	455;"	d
PA_ERR_TIMEOUT	/usr/include/pulse/def.h	/^    PA_ERR_TIMEOUT,                \/**< Timeout *\/$/;"	e	enum:__anon1
PA_ERR_TIMEOUT	/usr/include/pulse/def.h	456;"	d
PA_ERR_TOOLARGE	/usr/include/pulse/def.h	/^    PA_ERR_TOOLARGE,               \/**< Data too large *\/$/;"	e	enum:__anon1
PA_ERR_TOOLARGE	/usr/include/pulse/def.h	466;"	d
PA_ERR_UNKNOWN	/usr/include/pulse/def.h	/^    PA_ERR_UNKNOWN,                \/**< The error code was unknown to the client *\/$/;"	e	enum:__anon1
PA_ERR_UNKNOWN	/usr/include/pulse/def.h	468;"	d
PA_ERR_VERSION	/usr/include/pulse/def.h	/^    PA_ERR_VERSION,                \/**< Incompatible protocol version *\/$/;"	e	enum:__anon1
PA_ERR_VERSION	/usr/include/pulse/def.h	465;"	d
PA_FORMAT_INFO_SNPRINT_MAX	/usr/include/pulse/format.h	106;"	d
PA_GCC_ALLOC_SIZE	/usr/include/pulse/gccmacro.h	101;"	d
PA_GCC_ALLOC_SIZE	/usr/include/pulse/gccmacro.h	105;"	d
PA_GCC_ALLOC_SIZE2	/usr/include/pulse/gccmacro.h	102;"	d
PA_GCC_ALLOC_SIZE2	/usr/include/pulse/gccmacro.h	107;"	d
PA_GCC_CONST	/usr/include/pulse/gccmacro.h	74;"	d
PA_GCC_CONST	/usr/include/pulse/gccmacro.h	77;"	d
PA_GCC_DEPRECATED	/usr/include/pulse/gccmacro.h	83;"	d
PA_GCC_DEPRECATED	/usr/include/pulse/gccmacro.h	86;"	d
PA_GCC_DESTRUCTOR	/usr/include/pulse/gccmacro.h	57;"	d
PA_GCC_DESTRUCTOR	/usr/include/pulse/gccmacro.h	60;"	d
PA_GCC_MALLOC	/usr/include/pulse/gccmacro.h	113;"	d
PA_GCC_MALLOC	/usr/include/pulse/gccmacro.h	116;"	d
PA_GCC_NORETURN	/usr/include/pulse/gccmacro.h	43;"	d
PA_GCC_NORETURN	/usr/include/pulse/gccmacro.h	46;"	d
PA_GCC_PACKED	/usr/include/pulse/gccmacro.h	92;"	d
PA_GCC_PACKED	/usr/include/pulse/gccmacro.h	95;"	d
PA_GCC_PRINTF_ATTR	/usr/include/pulse/gccmacro.h	29;"	d
PA_GCC_PRINTF_ATTR	/usr/include/pulse/gccmacro.h	32;"	d
PA_GCC_PURE	/usr/include/pulse/gccmacro.h	65;"	d
PA_GCC_PURE	/usr/include/pulse/gccmacro.h	68;"	d
PA_GCC_SENTINEL	/usr/include/pulse/gccmacro.h	36;"	d
PA_GCC_SENTINEL	/usr/include/pulse/gccmacro.h	39;"	d
PA_GCC_UNUSED	/usr/include/pulse/gccmacro.h	50;"	d
PA_GCC_UNUSED	/usr/include/pulse/gccmacro.h	53;"	d
PA_GCC_WEAKREF	/usr/include/pulse/gccmacro.h	123;"	d
PA_INVALID_INDEX	/usr/include/pulse/def.h	109;"	d
PA_IO_EVENT_ERROR	/usr/include/pulse/mainloop-api.h	/^    PA_IO_EVENT_ERROR = 8     \/**< Error event *\/$/;"	e	enum:pa_io_event_flags
PA_IO_EVENT_HANGUP	/usr/include/pulse/mainloop-api.h	/^    PA_IO_EVENT_HANGUP = 4,   \/**< Hangup event *\/$/;"	e	enum:pa_io_event_flags
PA_IO_EVENT_INPUT	/usr/include/pulse/mainloop-api.h	/^    PA_IO_EVENT_INPUT = 1,    \/**< Input event *\/$/;"	e	enum:pa_io_event_flags
PA_IO_EVENT_NULL	/usr/include/pulse/mainloop-api.h	/^    PA_IO_EVENT_NULL = 0,     \/**< No event *\/$/;"	e	enum:pa_io_event_flags
PA_IO_EVENT_OUTPUT	/usr/include/pulse/mainloop-api.h	/^    PA_IO_EVENT_OUTPUT = 2,   \/**< Output event *\/$/;"	e	enum:pa_io_event_flags
PA_MAJOR	/usr/include/pulse/version.h	55;"	d
PA_MICRO	/usr/include/pulse/version.h	61;"	d
PA_MINOR	/usr/include/pulse/version.h	58;"	d
PA_MSEC_PER_SEC	/usr/include/pulse/timeval.h	37;"	d
PA_NSEC_PER_MSEC	/usr/include/pulse/timeval.h	49;"	d
PA_NSEC_PER_SEC	/usr/include/pulse/timeval.h	43;"	d
PA_NSEC_PER_USEC	/usr/include/pulse/timeval.h	52;"	d
PA_OK	/usr/include/pulse/def.h	/^    PA_OK = 0,                     \/**< No error *\/$/;"	e	enum:__anon1
PA_OK	/usr/include/pulse/def.h	448;"	d
PA_OPERATION_CANCELED	/usr/include/pulse/def.h	104;"	d
PA_OPERATION_CANCELLED	/usr/include/pulse/def.h	/^    PA_OPERATION_CANCELLED     \/**< The operation has been cancelled. Before 0.9.18 this was called PA_OPERATION_CANCELED. That name is still available for compatibility. *\/$/;"	e	enum:pa_operation_state
PA_OPERATION_CANCELLED	/usr/include/pulse/def.h	105;"	d
PA_OPERATION_DONE	/usr/include/pulse/def.h	/^    PA_OPERATION_DONE,         \/**< The operation has been completed *\/$/;"	e	enum:pa_operation_state
PA_OPERATION_DONE	/usr/include/pulse/def.h	103;"	d
PA_OPERATION_RUNNING	/usr/include/pulse/def.h	/^    PA_OPERATION_RUNNING,      \/**< The operation is still running *\/$/;"	e	enum:pa_operation_state
PA_OPERATION_RUNNING	/usr/include/pulse/def.h	102;"	d
PA_PORT_AVAILABLE_NO	/usr/include/pulse/def.h	/^    PA_PORT_AVAILABLE_NO = 1,      \/**< This port is not available, likely because the jack is not plugged in. \\since 2.0 *\/$/;"	e	enum:pa_port_available
PA_PORT_AVAILABLE_NO	/usr/include/pulse/def.h	994;"	d
PA_PORT_AVAILABLE_UNKNOWN	/usr/include/pulse/def.h	/^    PA_PORT_AVAILABLE_UNKNOWN = 0, \/**< This port does not support jack detection \\since 2.0 *\/$/;"	e	enum:pa_port_available
PA_PORT_AVAILABLE_UNKNOWN	/usr/include/pulse/def.h	993;"	d
PA_PORT_AVAILABLE_YES	/usr/include/pulse/def.h	/^    PA_PORT_AVAILABLE_YES = 2,     \/**< This port is available, likely because the jack is plugged in. \\since 2.0 *\/$/;"	e	enum:pa_port_available
PA_PORT_AVAILABLE_YES	/usr/include/pulse/def.h	995;"	d
PA_PROP_APPLICATION_ICON	/usr/include/pulse/proplist.h	153;"	d
PA_PROP_APPLICATION_ICON_NAME	/usr/include/pulse/proplist.h	157;"	d
PA_PROP_APPLICATION_ID	/usr/include/pulse/proplist.h	146;"	d
PA_PROP_APPLICATION_LANGUAGE	/usr/include/pulse/proplist.h	160;"	d
PA_PROP_APPLICATION_NAME	/usr/include/pulse/proplist.h	143;"	d
PA_PROP_APPLICATION_PROCESS_BINARY	/usr/include/pulse/proplist.h	166;"	d
PA_PROP_APPLICATION_PROCESS_HOST	/usr/include/pulse/proplist.h	172;"	d
PA_PROP_APPLICATION_PROCESS_ID	/usr/include/pulse/proplist.h	163;"	d
PA_PROP_APPLICATION_PROCESS_MACHINE_ID	/usr/include/pulse/proplist.h	175;"	d
PA_PROP_APPLICATION_PROCESS_SESSION_ID	/usr/include/pulse/proplist.h	178;"	d
PA_PROP_APPLICATION_PROCESS_USER	/usr/include/pulse/proplist.h	169;"	d
PA_PROP_APPLICATION_VERSION	/usr/include/pulse/proplist.h	149;"	d
PA_PROP_DEVICE_ACCESS_MODE	/usr/include/pulse/proplist.h	225;"	d
PA_PROP_DEVICE_API	/usr/include/pulse/proplist.h	184;"	d
PA_PROP_DEVICE_BUFFERING_BUFFER_SIZE	/usr/include/pulse/proplist.h	231;"	d
PA_PROP_DEVICE_BUFFERING_FRAGMENT_SIZE	/usr/include/pulse/proplist.h	234;"	d
PA_PROP_DEVICE_BUS	/usr/include/pulse/proplist.h	214;"	d
PA_PROP_DEVICE_BUS_PATH	/usr/include/pulse/proplist.h	190;"	d
PA_PROP_DEVICE_CLASS	/usr/include/pulse/proplist.h	208;"	d
PA_PROP_DEVICE_DESCRIPTION	/usr/include/pulse/proplist.h	187;"	d
PA_PROP_DEVICE_FORM_FACTOR	/usr/include/pulse/proplist.h	211;"	d
PA_PROP_DEVICE_ICON	/usr/include/pulse/proplist.h	218;"	d
PA_PROP_DEVICE_ICON_NAME	/usr/include/pulse/proplist.h	222;"	d
PA_PROP_DEVICE_INTENDED_ROLES	/usr/include/pulse/proplist.h	240;"	d
PA_PROP_DEVICE_MASTER_DEVICE	/usr/include/pulse/proplist.h	228;"	d
PA_PROP_DEVICE_PRODUCT_ID	/usr/include/pulse/proplist.h	202;"	d
PA_PROP_DEVICE_PRODUCT_NAME	/usr/include/pulse/proplist.h	205;"	d
PA_PROP_DEVICE_PROFILE_DESCRIPTION	/usr/include/pulse/proplist.h	243;"	d
PA_PROP_DEVICE_PROFILE_NAME	/usr/include/pulse/proplist.h	237;"	d
PA_PROP_DEVICE_SERIAL	/usr/include/pulse/proplist.h	193;"	d
PA_PROP_DEVICE_STRING	/usr/include/pulse/proplist.h	181;"	d
PA_PROP_DEVICE_VENDOR_ID	/usr/include/pulse/proplist.h	196;"	d
PA_PROP_DEVICE_VENDOR_NAME	/usr/include/pulse/proplist.h	199;"	d
PA_PROP_EVENT_DESCRIPTION	/usr/include/pulse/proplist.h	78;"	d
PA_PROP_EVENT_ID	/usr/include/pulse/proplist.h	75;"	d
PA_PROP_EVENT_MOUSE_BUTTON	/usr/include/pulse/proplist.h	93;"	d
PA_PROP_EVENT_MOUSE_HPOS	/usr/include/pulse/proplist.h	87;"	d
PA_PROP_EVENT_MOUSE_VPOS	/usr/include/pulse/proplist.h	90;"	d
PA_PROP_EVENT_MOUSE_X	/usr/include/pulse/proplist.h	81;"	d
PA_PROP_EVENT_MOUSE_Y	/usr/include/pulse/proplist.h	84;"	d
PA_PROP_FILTER_APPLY	/usr/include/pulse/proplist.h	69;"	d
PA_PROP_FILTER_SUPPRESS	/usr/include/pulse/proplist.h	72;"	d
PA_PROP_FILTER_WANT	/usr/include/pulse/proplist.h	66;"	d
PA_PROP_FORMAT_CHANNELS	/usr/include/pulse/proplist.h	264;"	d
PA_PROP_FORMAT_CHANNEL_MAP	/usr/include/pulse/proplist.h	267;"	d
PA_PROP_FORMAT_RATE	/usr/include/pulse/proplist.h	261;"	d
PA_PROP_FORMAT_SAMPLE_FORMAT	/usr/include/pulse/proplist.h	258;"	d
PA_PROP_MEDIA_ARTIST	/usr/include/pulse/proplist.h	40;"	d
PA_PROP_MEDIA_COPYRIGHT	/usr/include/pulse/proplist.h	43;"	d
PA_PROP_MEDIA_FILENAME	/usr/include/pulse/proplist.h	52;"	d
PA_PROP_MEDIA_ICON	/usr/include/pulse/proplist.h	56;"	d
PA_PROP_MEDIA_ICON_NAME	/usr/include/pulse/proplist.h	60;"	d
PA_PROP_MEDIA_LANGUAGE	/usr/include/pulse/proplist.h	49;"	d
PA_PROP_MEDIA_NAME	/usr/include/pulse/proplist.h	34;"	d
PA_PROP_MEDIA_ROLE	/usr/include/pulse/proplist.h	63;"	d
PA_PROP_MEDIA_SOFTWARE	/usr/include/pulse/proplist.h	46;"	d
PA_PROP_MEDIA_TITLE	/usr/include/pulse/proplist.h	37;"	d
PA_PROP_MODULE_AUTHOR	/usr/include/pulse/proplist.h	246;"	d
PA_PROP_MODULE_DESCRIPTION	/usr/include/pulse/proplist.h	249;"	d
PA_PROP_MODULE_USAGE	/usr/include/pulse/proplist.h	252;"	d
PA_PROP_MODULE_VERSION	/usr/include/pulse/proplist.h	255;"	d
PA_PROP_WINDOW_DESKTOP	/usr/include/pulse/proplist.h	128;"	d
PA_PROP_WINDOW_HEIGHT	/usr/include/pulse/proplist.h	119;"	d
PA_PROP_WINDOW_HPOS	/usr/include/pulse/proplist.h	122;"	d
PA_PROP_WINDOW_ICON	/usr/include/pulse/proplist.h	103;"	d
PA_PROP_WINDOW_ICON_NAME	/usr/include/pulse/proplist.h	107;"	d
PA_PROP_WINDOW_ID	/usr/include/pulse/proplist.h	99;"	d
PA_PROP_WINDOW_NAME	/usr/include/pulse/proplist.h	96;"	d
PA_PROP_WINDOW_VPOS	/usr/include/pulse/proplist.h	125;"	d
PA_PROP_WINDOW_WIDTH	/usr/include/pulse/proplist.h	116;"	d
PA_PROP_WINDOW_X	/usr/include/pulse/proplist.h	110;"	d
PA_PROP_WINDOW_X11_DISPLAY	/usr/include/pulse/proplist.h	131;"	d
PA_PROP_WINDOW_X11_MONITOR	/usr/include/pulse/proplist.h	137;"	d
PA_PROP_WINDOW_X11_SCREEN	/usr/include/pulse/proplist.h	134;"	d
PA_PROP_WINDOW_X11_XID	/usr/include/pulse/proplist.h	140;"	d
PA_PROP_WINDOW_Y	/usr/include/pulse/proplist.h	113;"	d
PA_PROTOCOL_VERSION	/usr/include/pulse/version.h	52;"	d
PA_RATE_MAX	/usr/include/pulse/sample.h	126;"	d
PA_SAMPLE_ALAW	/usr/include/pulse/sample.h	/^    PA_SAMPLE_ALAW,$/;"	e	enum:pa_sample_format
PA_SAMPLE_ALAW	/usr/include/pulse/sample.h	228;"	d
PA_SAMPLE_FLOAT32	/usr/include/pulse/sample.h	223;"	d
PA_SAMPLE_FLOAT32BE	/usr/include/pulse/sample.h	/^    PA_SAMPLE_FLOAT32BE,$/;"	e	enum:pa_sample_format
PA_SAMPLE_FLOAT32BE	/usr/include/pulse/sample.h	233;"	d
PA_SAMPLE_FLOAT32LE	/usr/include/pulse/sample.h	/^    PA_SAMPLE_FLOAT32LE,$/;"	e	enum:pa_sample_format
PA_SAMPLE_FLOAT32LE	/usr/include/pulse/sample.h	232;"	d
PA_SAMPLE_FLOAT32NE	/usr/include/pulse/sample.h	180;"	d
PA_SAMPLE_FLOAT32NE	/usr/include/pulse/sample.h	202;"	d
PA_SAMPLE_FLOAT32RE	/usr/include/pulse/sample.h	191;"	d
PA_SAMPLE_FLOAT32RE	/usr/include/pulse/sample.h	213;"	d
PA_SAMPLE_INVALID	/usr/include/pulse/sample.h	/^    PA_SAMPLE_INVALID = -1$/;"	e	enum:pa_sample_format
PA_SAMPLE_MAX	/usr/include/pulse/sample.h	/^    PA_SAMPLE_MAX,$/;"	e	enum:pa_sample_format
PA_SAMPLE_S16BE	/usr/include/pulse/sample.h	/^    PA_SAMPLE_S16BE,$/;"	e	enum:pa_sample_format
PA_SAMPLE_S16BE	/usr/include/pulse/sample.h	231;"	d
PA_SAMPLE_S16LE	/usr/include/pulse/sample.h	/^    PA_SAMPLE_S16LE,$/;"	e	enum:pa_sample_format
PA_SAMPLE_S16LE	/usr/include/pulse/sample.h	230;"	d
PA_SAMPLE_S16NE	/usr/include/pulse/sample.h	178;"	d
PA_SAMPLE_S16NE	/usr/include/pulse/sample.h	200;"	d
PA_SAMPLE_S16RE	/usr/include/pulse/sample.h	189;"	d
PA_SAMPLE_S16RE	/usr/include/pulse/sample.h	211;"	d
PA_SAMPLE_S24BE	/usr/include/pulse/sample.h	/^    PA_SAMPLE_S24BE,$/;"	e	enum:pa_sample_format
PA_SAMPLE_S24BE	/usr/include/pulse/sample.h	237;"	d
PA_SAMPLE_S24LE	/usr/include/pulse/sample.h	/^    PA_SAMPLE_S24LE,$/;"	e	enum:pa_sample_format
PA_SAMPLE_S24LE	/usr/include/pulse/sample.h	236;"	d
PA_SAMPLE_S24NE	/usr/include/pulse/sample.h	184;"	d
PA_SAMPLE_S24NE	/usr/include/pulse/sample.h	206;"	d
PA_SAMPLE_S24RE	/usr/include/pulse/sample.h	195;"	d
PA_SAMPLE_S24RE	/usr/include/pulse/sample.h	217;"	d
PA_SAMPLE_S24_32BE	/usr/include/pulse/sample.h	/^    PA_SAMPLE_S24_32BE,$/;"	e	enum:pa_sample_format
PA_SAMPLE_S24_32BE	/usr/include/pulse/sample.h	239;"	d
PA_SAMPLE_S24_32LE	/usr/include/pulse/sample.h	/^    PA_SAMPLE_S24_32LE,$/;"	e	enum:pa_sample_format
PA_SAMPLE_S24_32LE	/usr/include/pulse/sample.h	238;"	d
PA_SAMPLE_S24_32NE	/usr/include/pulse/sample.h	186;"	d
PA_SAMPLE_S24_32NE	/usr/include/pulse/sample.h	208;"	d
PA_SAMPLE_S24_32RE	/usr/include/pulse/sample.h	197;"	d
PA_SAMPLE_S24_32RE	/usr/include/pulse/sample.h	219;"	d
PA_SAMPLE_S32BE	/usr/include/pulse/sample.h	/^    PA_SAMPLE_S32BE,$/;"	e	enum:pa_sample_format
PA_SAMPLE_S32BE	/usr/include/pulse/sample.h	235;"	d
PA_SAMPLE_S32LE	/usr/include/pulse/sample.h	/^    PA_SAMPLE_S32LE,$/;"	e	enum:pa_sample_format
PA_SAMPLE_S32LE	/usr/include/pulse/sample.h	234;"	d
PA_SAMPLE_S32NE	/usr/include/pulse/sample.h	182;"	d
PA_SAMPLE_S32NE	/usr/include/pulse/sample.h	204;"	d
PA_SAMPLE_S32RE	/usr/include/pulse/sample.h	193;"	d
PA_SAMPLE_S32RE	/usr/include/pulse/sample.h	215;"	d
PA_SAMPLE_SPEC_SNPRINT_MAX	/usr/include/pulse/sample.h	302;"	d
PA_SAMPLE_U8	/usr/include/pulse/sample.h	/^    PA_SAMPLE_U8,$/;"	e	enum:pa_sample_format
PA_SAMPLE_U8	/usr/include/pulse/sample.h	227;"	d
PA_SAMPLE_ULAW	/usr/include/pulse/sample.h	/^    PA_SAMPLE_ULAW,$/;"	e	enum:pa_sample_format
PA_SAMPLE_ULAW	/usr/include/pulse/sample.h	229;"	d
PA_SEEK_ABSOLUTE	/usr/include/pulse/def.h	/^    PA_SEEK_ABSOLUTE = 1,$/;"	e	enum:pa_seek_mode
PA_SEEK_ABSOLUTE	/usr/include/pulse/def.h	729;"	d
PA_SEEK_RELATIVE	/usr/include/pulse/def.h	/^    PA_SEEK_RELATIVE = 0,$/;"	e	enum:pa_seek_mode
PA_SEEK_RELATIVE	/usr/include/pulse/def.h	728;"	d
PA_SEEK_RELATIVE_END	/usr/include/pulse/def.h	/^    PA_SEEK_RELATIVE_END = 3$/;"	e	enum:pa_seek_mode
PA_SEEK_RELATIVE_END	/usr/include/pulse/def.h	731;"	d
PA_SEEK_RELATIVE_ON_READ	/usr/include/pulse/def.h	/^    PA_SEEK_RELATIVE_ON_READ = 2,$/;"	e	enum:pa_seek_mode
PA_SEEK_RELATIVE_ON_READ	/usr/include/pulse/def.h	730;"	d
PA_SINK_CLIENT_FLAGS_MASK	/usr/include/pulse/def.h	803;"	d
PA_SINK_DECIBEL_VOLUME	/usr/include/pulse/def.h	/^    PA_SINK_DECIBEL_VOLUME = 0x0020U,$/;"	e	enum:pa_sink_flags
PA_SINK_DECIBEL_VOLUME	/usr/include/pulse/def.h	798;"	d
PA_SINK_DEFERRED_VOLUME	/usr/include/pulse/def.h	/^    PA_SINK_DEFERRED_VOLUME = 0x2000000U,$/;"	e	enum:pa_sink_flags
PA_SINK_DYNAMIC_LATENCY	/usr/include/pulse/def.h	/^    PA_SINK_DYNAMIC_LATENCY = 0x0080U,$/;"	e	enum:pa_sink_flags
PA_SINK_DYNAMIC_LATENCY	/usr/include/pulse/def.h	800;"	d
PA_SINK_FLAT_VOLUME	/usr/include/pulse/def.h	/^    PA_SINK_FLAT_VOLUME = 0x0040U,$/;"	e	enum:pa_sink_flags
PA_SINK_FLAT_VOLUME	/usr/include/pulse/def.h	799;"	d
PA_SINK_HARDWARE	/usr/include/pulse/def.h	/^    PA_SINK_HARDWARE = 0x0004U,$/;"	e	enum:pa_sink_flags
PA_SINK_HARDWARE	/usr/include/pulse/def.h	795;"	d
PA_SINK_HW_MUTE_CTRL	/usr/include/pulse/def.h	/^    PA_SINK_HW_MUTE_CTRL = 0x0010U,$/;"	e	enum:pa_sink_flags
PA_SINK_HW_MUTE_CTRL	/usr/include/pulse/def.h	797;"	d
PA_SINK_HW_VOLUME_CTRL	/usr/include/pulse/def.h	/^    PA_SINK_HW_VOLUME_CTRL = 0x0001U,$/;"	e	enum:pa_sink_flags
PA_SINK_HW_VOLUME_CTRL	/usr/include/pulse/def.h	793;"	d
PA_SINK_IDLE	/usr/include/pulse/def.h	/^    PA_SINK_IDLE = 1,$/;"	e	enum:pa_sink_state
PA_SINK_IDLE	/usr/include/pulse/def.h	846;"	d
PA_SINK_INIT	/usr/include/pulse/def.h	/^    PA_SINK_INIT = -2,$/;"	e	enum:pa_sink_state
PA_SINK_INIT	/usr/include/pulse/def.h	848;"	d
PA_SINK_INVALID_STATE	/usr/include/pulse/def.h	/^    PA_SINK_INVALID_STATE = -1,$/;"	e	enum:pa_sink_state
PA_SINK_INVALID_STATE	/usr/include/pulse/def.h	844;"	d
PA_SINK_IS_OPENED	/usr/include/pulse/def.h	/^static inline int PA_SINK_IS_OPENED(pa_sink_state_t x) {$/;"	f	signature:(pa_sink_state_t x)
PA_SINK_IS_OPENED	/usr/include/pulse/def.h	850;"	d
PA_SINK_LATENCY	/usr/include/pulse/def.h	/^    PA_SINK_LATENCY = 0x0002U,$/;"	e	enum:pa_sink_flags
PA_SINK_LATENCY	/usr/include/pulse/def.h	794;"	d
PA_SINK_NETWORK	/usr/include/pulse/def.h	/^    PA_SINK_NETWORK = 0x0008U,$/;"	e	enum:pa_sink_flags
PA_SINK_NETWORK	/usr/include/pulse/def.h	796;"	d
PA_SINK_NOFLAGS	/usr/include/pulse/def.h	/^    PA_SINK_NOFLAGS = 0x0000U,$/;"	e	enum:pa_sink_flags
PA_SINK_RUNNING	/usr/include/pulse/def.h	/^    PA_SINK_RUNNING = 0,$/;"	e	enum:pa_sink_state
PA_SINK_RUNNING	/usr/include/pulse/def.h	845;"	d
PA_SINK_SET_FORMATS	/usr/include/pulse/def.h	/^    PA_SINK_SET_FORMATS = 0x0100U,$/;"	e	enum:pa_sink_flags
PA_SINK_SET_FORMATS	/usr/include/pulse/def.h	801;"	d
PA_SINK_SHARE_VOLUME_WITH_MASTER	/usr/include/pulse/def.h	/^    PA_SINK_SHARE_VOLUME_WITH_MASTER = 0x1000000U,$/;"	e	enum:pa_sink_flags
PA_SINK_SUSPENDED	/usr/include/pulse/def.h	/^    PA_SINK_SUSPENDED = 2,$/;"	e	enum:pa_sink_state
PA_SINK_SUSPENDED	/usr/include/pulse/def.h	847;"	d
PA_SINK_UNLINKED	/usr/include/pulse/def.h	/^    PA_SINK_UNLINKED = -3$/;"	e	enum:pa_sink_state
PA_SINK_UNLINKED	/usr/include/pulse/def.h	849;"	d
PA_SOURCE_CLIENT_FLAGS_MASK	/usr/include/pulse/def.h	914;"	d
PA_SOURCE_DECIBEL_VOLUME	/usr/include/pulse/def.h	/^    PA_SOURCE_DECIBEL_VOLUME = 0x0020U,$/;"	e	enum:pa_source_flags
PA_SOURCE_DECIBEL_VOLUME	/usr/include/pulse/def.h	910;"	d
PA_SOURCE_DEFERRED_VOLUME	/usr/include/pulse/def.h	/^    PA_SOURCE_DEFERRED_VOLUME = 0x2000000U,$/;"	e	enum:pa_source_flags
PA_SOURCE_DYNAMIC_LATENCY	/usr/include/pulse/def.h	/^    PA_SOURCE_DYNAMIC_LATENCY = 0x0040U,$/;"	e	enum:pa_source_flags
PA_SOURCE_DYNAMIC_LATENCY	/usr/include/pulse/def.h	911;"	d
PA_SOURCE_FLAT_VOLUME	/usr/include/pulse/def.h	/^    PA_SOURCE_FLAT_VOLUME = 0x0080U,$/;"	e	enum:pa_source_flags
PA_SOURCE_FLAT_VOLUME	/usr/include/pulse/def.h	912;"	d
PA_SOURCE_HARDWARE	/usr/include/pulse/def.h	/^    PA_SOURCE_HARDWARE = 0x0004U,$/;"	e	enum:pa_source_flags
PA_SOURCE_HARDWARE	/usr/include/pulse/def.h	907;"	d
PA_SOURCE_HW_MUTE_CTRL	/usr/include/pulse/def.h	/^    PA_SOURCE_HW_MUTE_CTRL = 0x0010U,$/;"	e	enum:pa_source_flags
PA_SOURCE_HW_MUTE_CTRL	/usr/include/pulse/def.h	909;"	d
PA_SOURCE_HW_VOLUME_CTRL	/usr/include/pulse/def.h	/^    PA_SOURCE_HW_VOLUME_CTRL = 0x0001U,$/;"	e	enum:pa_source_flags
PA_SOURCE_HW_VOLUME_CTRL	/usr/include/pulse/def.h	905;"	d
PA_SOURCE_IDLE	/usr/include/pulse/def.h	/^    PA_SOURCE_IDLE = 1,$/;"	e	enum:pa_source_state
PA_SOURCE_IDLE	/usr/include/pulse/def.h	957;"	d
PA_SOURCE_INIT	/usr/include/pulse/def.h	/^    PA_SOURCE_INIT = -2,$/;"	e	enum:pa_source_state
PA_SOURCE_INIT	/usr/include/pulse/def.h	959;"	d
PA_SOURCE_INVALID_STATE	/usr/include/pulse/def.h	/^    PA_SOURCE_INVALID_STATE = -1,$/;"	e	enum:pa_source_state
PA_SOURCE_INVALID_STATE	/usr/include/pulse/def.h	955;"	d
PA_SOURCE_IS_OPENED	/usr/include/pulse/def.h	/^static inline int PA_SOURCE_IS_OPENED(pa_source_state_t x) {$/;"	f	signature:(pa_source_state_t x)
PA_SOURCE_IS_OPENED	/usr/include/pulse/def.h	961;"	d
PA_SOURCE_LATENCY	/usr/include/pulse/def.h	/^    PA_SOURCE_LATENCY = 0x0002U,$/;"	e	enum:pa_source_flags
PA_SOURCE_LATENCY	/usr/include/pulse/def.h	906;"	d
PA_SOURCE_NETWORK	/usr/include/pulse/def.h	/^    PA_SOURCE_NETWORK = 0x0008U,$/;"	e	enum:pa_source_flags
PA_SOURCE_NETWORK	/usr/include/pulse/def.h	908;"	d
PA_SOURCE_NOFLAGS	/usr/include/pulse/def.h	/^    PA_SOURCE_NOFLAGS = 0x0000U,$/;"	e	enum:pa_source_flags
PA_SOURCE_RUNNING	/usr/include/pulse/def.h	/^    PA_SOURCE_RUNNING = 0,$/;"	e	enum:pa_source_state
PA_SOURCE_RUNNING	/usr/include/pulse/def.h	956;"	d
PA_SOURCE_SHARE_VOLUME_WITH_MASTER	/usr/include/pulse/def.h	/^    PA_SOURCE_SHARE_VOLUME_WITH_MASTER = 0x1000000U,$/;"	e	enum:pa_source_flags
PA_SOURCE_SUSPENDED	/usr/include/pulse/def.h	/^    PA_SOURCE_SUSPENDED = 2,$/;"	e	enum:pa_source_state
PA_SOURCE_SUSPENDED	/usr/include/pulse/def.h	958;"	d
PA_SOURCE_UNLINKED	/usr/include/pulse/def.h	/^    PA_SOURCE_UNLINKED = -3$/;"	e	enum:pa_source_state
PA_SOURCE_UNLINKED	/usr/include/pulse/def.h	960;"	d
PA_STREAM_ADJUST_LATENCY	/usr/include/pulse/def.h	/^    PA_STREAM_ADJUST_LATENCY = 0x2000U,$/;"	e	enum:pa_stream_flags
PA_STREAM_ADJUST_LATENCY	/usr/include/pulse/def.h	343;"	d
PA_STREAM_AUTO_TIMING_UPDATE	/usr/include/pulse/def.h	/^    PA_STREAM_AUTO_TIMING_UPDATE = 0x0008U,$/;"	e	enum:pa_stream_flags
PA_STREAM_AUTO_TIMING_UPDATE	/usr/include/pulse/def.h	333;"	d
PA_STREAM_CREATING	/usr/include/pulse/def.h	/^    PA_STREAM_CREATING,     \/**< The stream is being created *\/$/;"	e	enum:pa_stream_state
PA_STREAM_CREATING	/usr/include/pulse/def.h	87;"	d
PA_STREAM_DONT_INHIBIT_AUTO_SUSPEND	/usr/include/pulse/def.h	/^    PA_STREAM_DONT_INHIBIT_AUTO_SUSPEND = 0x8000U,$/;"	e	enum:pa_stream_flags
PA_STREAM_DONT_INHIBIT_AUTO_SUSPEND	/usr/include/pulse/def.h	345;"	d
PA_STREAM_DONT_MOVE	/usr/include/pulse/def.h	/^    PA_STREAM_DONT_MOVE = 0x0200U,$/;"	e	enum:pa_stream_flags
PA_STREAM_DONT_MOVE	/usr/include/pulse/def.h	339;"	d
PA_STREAM_EARLY_REQUESTS	/usr/include/pulse/def.h	/^    PA_STREAM_EARLY_REQUESTS = 0x4000U,$/;"	e	enum:pa_stream_flags
PA_STREAM_EARLY_REQUESTS	/usr/include/pulse/def.h	344;"	d
PA_STREAM_EVENT_FORMAT_LOST	/usr/include/pulse/def.h	982;"	d
PA_STREAM_EVENT_REQUEST_CORK	/usr/include/pulse/def.h	970;"	d
PA_STREAM_EVENT_REQUEST_UNCORK	/usr/include/pulse/def.h	975;"	d
PA_STREAM_FAILED	/usr/include/pulse/def.h	/^    PA_STREAM_FAILED,       \/**< An error occurred that made the stream invalid *\/$/;"	e	enum:pa_stream_state
PA_STREAM_FAILED	/usr/include/pulse/def.h	89;"	d
PA_STREAM_FAIL_ON_SUSPEND	/usr/include/pulse/def.h	/^    PA_STREAM_FAIL_ON_SUSPEND = 0x20000U,$/;"	e	enum:pa_stream_flags
PA_STREAM_FAIL_ON_SUSPEND	/usr/include/pulse/def.h	347;"	d
PA_STREAM_FIX_CHANNELS	/usr/include/pulse/def.h	/^    PA_STREAM_FIX_CHANNELS = 0x0100,$/;"	e	enum:pa_stream_flags
PA_STREAM_FIX_CHANNELS	/usr/include/pulse/def.h	338;"	d
PA_STREAM_FIX_FORMAT	/usr/include/pulse/def.h	/^    PA_STREAM_FIX_FORMAT = 0x0040U,$/;"	e	enum:pa_stream_flags
PA_STREAM_FIX_FORMAT	/usr/include/pulse/def.h	336;"	d
PA_STREAM_FIX_RATE	/usr/include/pulse/def.h	/^    PA_STREAM_FIX_RATE = 0x0080U,$/;"	e	enum:pa_stream_flags
PA_STREAM_FIX_RATE	/usr/include/pulse/def.h	337;"	d
PA_STREAM_INTERPOLATE_TIMING	/usr/include/pulse/def.h	/^    PA_STREAM_INTERPOLATE_TIMING = 0x0002U,$/;"	e	enum:pa_stream_flags
PA_STREAM_INTERPOLATE_TIMING	/usr/include/pulse/def.h	331;"	d
PA_STREAM_IS_GOOD	/usr/include/pulse/def.h	/^static inline int PA_STREAM_IS_GOOD(pa_stream_state_t x) {$/;"	f	signature:(pa_stream_state_t x)
PA_STREAM_IS_GOOD	/usr/include/pulse/def.h	91;"	d
PA_STREAM_NODIRECTION	/usr/include/pulse/def.h	/^    PA_STREAM_NODIRECTION,   \/**< Invalid direction *\/$/;"	e	enum:pa_stream_direction
PA_STREAM_NODIRECTION	/usr/include/pulse/def.h	161;"	d
PA_STREAM_NOFLAGS	/usr/include/pulse/def.h	/^    PA_STREAM_NOFLAGS = 0x0000U,$/;"	e	enum:pa_stream_flags
PA_STREAM_NOT_MONOTONIC	/usr/include/pulse/def.h	/^    PA_STREAM_NOT_MONOTONIC = 0x0004U,$/;"	e	enum:pa_stream_flags
PA_STREAM_NOT_MONOTONIC	/usr/include/pulse/def.h	332;"	d
PA_STREAM_NOT_MONOTONOUS	/usr/include/pulse/def.h	327;"	d
PA_STREAM_NO_REMAP_CHANNELS	/usr/include/pulse/def.h	/^    PA_STREAM_NO_REMAP_CHANNELS = 0x0010U,$/;"	e	enum:pa_stream_flags
PA_STREAM_NO_REMAP_CHANNELS	/usr/include/pulse/def.h	334;"	d
PA_STREAM_NO_REMIX_CHANNELS	/usr/include/pulse/def.h	/^    PA_STREAM_NO_REMIX_CHANNELS = 0x0020U,$/;"	e	enum:pa_stream_flags
PA_STREAM_NO_REMIX_CHANNELS	/usr/include/pulse/def.h	335;"	d
PA_STREAM_PASSTHROUGH	/usr/include/pulse/def.h	/^    PA_STREAM_PASSTHROUGH = 0x80000U$/;"	e	enum:pa_stream_flags
PA_STREAM_PASSTHROUGH	/usr/include/pulse/def.h	349;"	d
PA_STREAM_PEAK_DETECT	/usr/include/pulse/def.h	/^    PA_STREAM_PEAK_DETECT = 0x0800U,$/;"	e	enum:pa_stream_flags
PA_STREAM_PEAK_DETECT	/usr/include/pulse/def.h	341;"	d
PA_STREAM_PLAYBACK	/usr/include/pulse/def.h	/^    PA_STREAM_PLAYBACK,      \/**< Playback stream *\/$/;"	e	enum:pa_stream_direction
PA_STREAM_PLAYBACK	/usr/include/pulse/def.h	162;"	d
PA_STREAM_READY	/usr/include/pulse/def.h	/^    PA_STREAM_READY,        \/**< The stream is established, you may pass audio data to it now *\/$/;"	e	enum:pa_stream_state
PA_STREAM_READY	/usr/include/pulse/def.h	88;"	d
PA_STREAM_RECORD	/usr/include/pulse/def.h	/^    PA_STREAM_RECORD,        \/**< Record stream *\/$/;"	e	enum:pa_stream_direction
PA_STREAM_RECORD	/usr/include/pulse/def.h	163;"	d
PA_STREAM_RELATIVE_VOLUME	/usr/include/pulse/def.h	/^    PA_STREAM_RELATIVE_VOLUME = 0x40000U,$/;"	e	enum:pa_stream_flags
PA_STREAM_RELATIVE_VOLUME	/usr/include/pulse/def.h	348;"	d
PA_STREAM_START_CORKED	/usr/include/pulse/def.h	/^    PA_STREAM_START_CORKED = 0x0001U,$/;"	e	enum:pa_stream_flags
PA_STREAM_START_CORKED	/usr/include/pulse/def.h	330;"	d
PA_STREAM_START_MUTED	/usr/include/pulse/def.h	/^    PA_STREAM_START_MUTED = 0x1000U,$/;"	e	enum:pa_stream_flags
PA_STREAM_START_MUTED	/usr/include/pulse/def.h	342;"	d
PA_STREAM_START_UNMUTED	/usr/include/pulse/def.h	/^    PA_STREAM_START_UNMUTED = 0x10000U,$/;"	e	enum:pa_stream_flags
PA_STREAM_START_UNMUTED	/usr/include/pulse/def.h	346;"	d
PA_STREAM_TERMINATED	/usr/include/pulse/def.h	/^    PA_STREAM_TERMINATED    \/**< The stream has been terminated cleanly *\/$/;"	e	enum:pa_stream_state
PA_STREAM_TERMINATED	/usr/include/pulse/def.h	90;"	d
PA_STREAM_UNCONNECTED	/usr/include/pulse/def.h	/^    PA_STREAM_UNCONNECTED,  \/**< The stream is not yet connected to any sink or source *\/$/;"	e	enum:pa_stream_state
PA_STREAM_UNCONNECTED	/usr/include/pulse/def.h	86;"	d
PA_STREAM_UPLOAD	/usr/include/pulse/def.h	/^    PA_STREAM_UPLOAD         \/**< Sample upload stream *\/$/;"	e	enum:pa_stream_direction
PA_STREAM_UPLOAD	/usr/include/pulse/def.h	164;"	d
PA_STREAM_VARIABLE_RATE	/usr/include/pulse/def.h	/^    PA_STREAM_VARIABLE_RATE = 0x0400U,$/;"	e	enum:pa_stream_flags
PA_STREAM_VARIABLE_RATE	/usr/include/pulse/def.h	340;"	d
PA_SUBSCRIPTION_EVENT_AUTOLOAD	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_EVENT_AUTOLOAD = 0x0008U,$/;"	e	enum:pa_subscription_event_type
PA_SUBSCRIPTION_EVENT_AUTOLOAD	/usr/include/pulse/def.h	592;"	d
PA_SUBSCRIPTION_EVENT_CARD	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_EVENT_CARD = 0x0009U,$/;"	e	enum:pa_subscription_event_type
PA_SUBSCRIPTION_EVENT_CARD	/usr/include/pulse/def.h	593;"	d
PA_SUBSCRIPTION_EVENT_CHANGE	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_EVENT_CHANGE = 0x0010U,$/;"	e	enum:pa_subscription_event_type
PA_SUBSCRIPTION_EVENT_CHANGE	/usr/include/pulse/def.h	596;"	d
PA_SUBSCRIPTION_EVENT_CLIENT	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_EVENT_CLIENT = 0x0005U,$/;"	e	enum:pa_subscription_event_type
PA_SUBSCRIPTION_EVENT_CLIENT	/usr/include/pulse/def.h	589;"	d
PA_SUBSCRIPTION_EVENT_FACILITY_MASK	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_EVENT_FACILITY_MASK = 0x000FU,$/;"	e	enum:pa_subscription_event_type
PA_SUBSCRIPTION_EVENT_FACILITY_MASK	/usr/include/pulse/def.h	594;"	d
PA_SUBSCRIPTION_EVENT_MODULE	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_EVENT_MODULE = 0x0004U,$/;"	e	enum:pa_subscription_event_type
PA_SUBSCRIPTION_EVENT_MODULE	/usr/include/pulse/def.h	588;"	d
PA_SUBSCRIPTION_EVENT_NEW	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_EVENT_NEW = 0x0000U,$/;"	e	enum:pa_subscription_event_type
PA_SUBSCRIPTION_EVENT_NEW	/usr/include/pulse/def.h	595;"	d
PA_SUBSCRIPTION_EVENT_REMOVE	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_EVENT_REMOVE = 0x0020U,$/;"	e	enum:pa_subscription_event_type
PA_SUBSCRIPTION_EVENT_REMOVE	/usr/include/pulse/def.h	597;"	d
PA_SUBSCRIPTION_EVENT_SAMPLE_CACHE	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_EVENT_SAMPLE_CACHE = 0x0006U,$/;"	e	enum:pa_subscription_event_type
PA_SUBSCRIPTION_EVENT_SAMPLE_CACHE	/usr/include/pulse/def.h	590;"	d
PA_SUBSCRIPTION_EVENT_SERVER	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_EVENT_SERVER = 0x0007U,$/;"	e	enum:pa_subscription_event_type
PA_SUBSCRIPTION_EVENT_SERVER	/usr/include/pulse/def.h	591;"	d
PA_SUBSCRIPTION_EVENT_SINK	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_EVENT_SINK = 0x0000U,$/;"	e	enum:pa_subscription_event_type
PA_SUBSCRIPTION_EVENT_SINK	/usr/include/pulse/def.h	584;"	d
PA_SUBSCRIPTION_EVENT_SINK_INPUT	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_EVENT_SINK_INPUT = 0x0002U,$/;"	e	enum:pa_subscription_event_type
PA_SUBSCRIPTION_EVENT_SINK_INPUT	/usr/include/pulse/def.h	586;"	d
PA_SUBSCRIPTION_EVENT_SOURCE	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_EVENT_SOURCE = 0x0001U,$/;"	e	enum:pa_subscription_event_type
PA_SUBSCRIPTION_EVENT_SOURCE	/usr/include/pulse/def.h	585;"	d
PA_SUBSCRIPTION_EVENT_SOURCE_OUTPUT	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_EVENT_SOURCE_OUTPUT = 0x0003U,$/;"	e	enum:pa_subscription_event_type
PA_SUBSCRIPTION_EVENT_SOURCE_OUTPUT	/usr/include/pulse/def.h	587;"	d
PA_SUBSCRIPTION_EVENT_TYPE_MASK	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_EVENT_TYPE_MASK = 0x0030U$/;"	e	enum:pa_subscription_event_type
PA_SUBSCRIPTION_EVENT_TYPE_MASK	/usr/include/pulse/def.h	598;"	d
PA_SUBSCRIPTION_MASK_ALL	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_MASK_ALL = 0x02ffU$/;"	e	enum:pa_subscription_mask
PA_SUBSCRIPTION_MASK_ALL	/usr/include/pulse/def.h	583;"	d
PA_SUBSCRIPTION_MASK_AUTOLOAD	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_MASK_AUTOLOAD = 0x0100U,$/;"	e	enum:pa_subscription_mask
PA_SUBSCRIPTION_MASK_AUTOLOAD	/usr/include/pulse/def.h	581;"	d
PA_SUBSCRIPTION_MASK_CARD	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_MASK_CARD = 0x0200U,$/;"	e	enum:pa_subscription_mask
PA_SUBSCRIPTION_MASK_CARD	/usr/include/pulse/def.h	582;"	d
PA_SUBSCRIPTION_MASK_CLIENT	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_MASK_CLIENT = 0x0020U,$/;"	e	enum:pa_subscription_mask
PA_SUBSCRIPTION_MASK_CLIENT	/usr/include/pulse/def.h	578;"	d
PA_SUBSCRIPTION_MASK_MODULE	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_MASK_MODULE = 0x0010U,$/;"	e	enum:pa_subscription_mask
PA_SUBSCRIPTION_MASK_MODULE	/usr/include/pulse/def.h	577;"	d
PA_SUBSCRIPTION_MASK_NULL	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_MASK_NULL = 0x0000U,$/;"	e	enum:pa_subscription_mask
PA_SUBSCRIPTION_MASK_NULL	/usr/include/pulse/def.h	572;"	d
PA_SUBSCRIPTION_MASK_SAMPLE_CACHE	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_MASK_SAMPLE_CACHE = 0x0040U,$/;"	e	enum:pa_subscription_mask
PA_SUBSCRIPTION_MASK_SAMPLE_CACHE	/usr/include/pulse/def.h	579;"	d
PA_SUBSCRIPTION_MASK_SERVER	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_MASK_SERVER = 0x0080U,$/;"	e	enum:pa_subscription_mask
PA_SUBSCRIPTION_MASK_SERVER	/usr/include/pulse/def.h	580;"	d
PA_SUBSCRIPTION_MASK_SINK	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_MASK_SINK = 0x0001U,$/;"	e	enum:pa_subscription_mask
PA_SUBSCRIPTION_MASK_SINK	/usr/include/pulse/def.h	573;"	d
PA_SUBSCRIPTION_MASK_SINK_INPUT	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_MASK_SINK_INPUT = 0x0004U,$/;"	e	enum:pa_subscription_mask
PA_SUBSCRIPTION_MASK_SINK_INPUT	/usr/include/pulse/def.h	575;"	d
PA_SUBSCRIPTION_MASK_SOURCE	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_MASK_SOURCE = 0x0002U,$/;"	e	enum:pa_subscription_mask
PA_SUBSCRIPTION_MASK_SOURCE	/usr/include/pulse/def.h	574;"	d
PA_SUBSCRIPTION_MASK_SOURCE_OUTPUT	/usr/include/pulse/def.h	/^    PA_SUBSCRIPTION_MASK_SOURCE_OUTPUT = 0x0008U,$/;"	e	enum:pa_subscription_mask
PA_SUBSCRIPTION_MASK_SOURCE_OUTPUT	/usr/include/pulse/def.h	576;"	d
PA_SW_CVOLUME_SNPRINT_DB_MAX	/usr/include/pulse/volume.h	172;"	d
PA_SW_VOLUME_SNPRINT_DB_MAX	/usr/include/pulse/volume.h	192;"	d
PA_UPDATE_MERGE	/usr/include/pulse/proplist.h	/^    PA_UPDATE_MERGE$/;"	e	enum:pa_update_mode
PA_UPDATE_MERGE	/usr/include/pulse/proplist.h	337;"	d
PA_UPDATE_REPLACE	/usr/include/pulse/proplist.h	/^    PA_UPDATE_REPLACE$/;"	e	enum:pa_update_mode
PA_UPDATE_REPLACE	/usr/include/pulse/proplist.h	338;"	d
PA_UPDATE_SET	/usr/include/pulse/proplist.h	/^    PA_UPDATE_SET$/;"	e	enum:pa_update_mode
PA_UPDATE_SET	/usr/include/pulse/proplist.h	336;"	d
PA_USEC_INVALID	/usr/include/pulse/timeval.h	55;"	d
PA_USEC_MAX	/usr/include/pulse/timeval.h	58;"	d
PA_USEC_PER_MSEC	/usr/include/pulse/timeval.h	46;"	d
PA_USEC_PER_SEC	/usr/include/pulse/timeval.h	40;"	d
PA_VOLUME_INVALID	/usr/include/pulse/volume.h	126;"	d
PA_VOLUME_IS_VALID	/usr/include/pulse/volume.h	129;"	d
PA_VOLUME_MAX	/usr/include/pulse/volume.h	116;"	d
PA_VOLUME_MUTED	/usr/include/pulse/volume.h	113;"	d
PA_VOLUME_NORM	/usr/include/pulse/volume.h	110;"	d
PA_VOLUME_SNPRINT_MAX	/usr/include/pulse/volume.h	182;"	d
PA_VOLUME_UI_MAX	/usr/include/pulse/volume.h	123;"	d
WORDS_BIGENDIAN	/usr/include/pulse/sample.h	117;"	d
_pa_xnew0_internal	/usr/include/pulse/xmalloc.h	/^static inline void* _pa_xnew0_internal(size_t n, size_t k) {$/;"	f	signature:(size_t n, size_t k)
_pa_xnew_internal	/usr/include/pulse/xmalloc.h	/^static inline void* _pa_xnew_internal(size_t n, size_t k) {$/;"	f	signature:(size_t n, size_t k)
_pa_xnewdup_internal	/usr/include/pulse/xmalloc.h	/^static inline void* _pa_xnewdup_internal(const void *p, size_t n, size_t k) {$/;"	f	signature:(const void *p, size_t n, size_t k)
_pa_xrenew_internal	/usr/include/pulse/xmalloc.h	/^static inline void* _pa_xrenew_internal(void *p, size_t n, size_t k) {$/;"	f	signature:(void *p, size_t n, size_t k)
active_port	/usr/include/pulse/introspect.h	/^    pa_sink_port_info* active_port;    \/**< Pointer to active port in the array, or NULL \\since 0.9.16 *\/$/;"	m	struct:pa_sink_info	access:public
active_port	/usr/include/pulse/introspect.h	/^    pa_source_port_info* active_port;   \/**< Pointer to active port in the array, or NULL \\since 0.9.16  *\/$/;"	m	struct:pa_source_info	access:public
active_profile	/usr/include/pulse/introspect.h	/^    pa_card_profile_info* active_profile; \/**< Pointer to active profile in the array, or NULL *\/$/;"	m	struct:pa_card_info	access:public
argument	/usr/include/pulse/introspect.h	/^        *argument;                      \/**< Argument string of the module *\/$/;"	m	struct:pa_module_info	access:public
argument	/usr/include/pulse/introspect.h	/^    const char *argument;         \/**< Argument string for module *\/$/;"	m	struct:pa_autoload_info	access:public
atfork	/usr/include/pulse/def.h	/^    void (*atfork)(void);$/;"	m	struct:pa_spawn_api	access:public
auto_unload	/usr/include/pulse/introspect.h	/^    int auto_unload;                    \/**< \\deprecated Non-zero if this is an autoloaded module *\/$/;"	m	struct:pa_module_info	access:public
available	/usr/include/pulse/introspect.h	/^    int available;                      \/**< A \\link pa_port_available_t, indicating availability status of this port. *\/$/;"	m	struct:pa_card_port_info	access:public
available	/usr/include/pulse/introspect.h	/^    int available;                      \/**< A \\link pa_port_available_t, indicating availability status of this port. \\since 2.0 *\/$/;"	m	struct:pa_sink_port_info	access:public
available	/usr/include/pulse/introspect.h	/^    int available;                      \/**< A \\link pa_port_available_t, indicating availability status of this port. \\since 2.0 *\/$/;"	m	struct:pa_source_port_info	access:public
base_volume	/usr/include/pulse/introspect.h	/^    pa_volume_t base_volume;            \/**< Some kind of "base" volume that refers to unamplified\/unattenuated volume in the context of the input device. \\since 0.9.15 *\/$/;"	m	struct:pa_source_info	access:public
base_volume	/usr/include/pulse/introspect.h	/^    pa_volume_t base_volume;           \/**< Some kind of "base" volume that refers to unamplified\/unattenuated volume in the context of the output device. \\since 0.9.15 *\/$/;"	m	struct:pa_sink_info	access:public
buffer_usec	/usr/include/pulse/introspect.h	/^    pa_usec_t buffer_usec;               \/**< Latency due to buffering in sink input, see pa_latency_info for details *\/$/;"	m	struct:pa_sink_input_info	access:public
buffer_usec	/usr/include/pulse/introspect.h	/^    pa_usec_t buffer_usec;               \/**< Latency due to buffering in the source output, see pa_latency_info for details. *\/$/;"	m	struct:pa_source_output_info	access:public
bytes	/usr/include/pulse/introspect.h	/^    uint32_t bytes;                       \/**< Length of this sample in bytes. *\/$/;"	m	struct:pa_sample_info	access:public
card	/usr/include/pulse/introspect.h	/^    uint32_t card;                      \/**< Card index, or PA_INVALID_INDEX. \\since 0.9.15 *\/$/;"	m	struct:pa_source_info	access:public
card	/usr/include/pulse/introspect.h	/^    uint32_t card;                     \/**< Card index, or PA_INVALID_INDEX. \\since 0.9.15 *\/$/;"	m	struct:pa_sink_info	access:public
channel_map	/usr/include/pulse/ext-stream-restore.h	/^    pa_channel_map channel_map;  \/**< The channel map for the volume field, if applicable *\/$/;"	m	struct:pa_ext_stream_restore_info	access:public
channel_map	/usr/include/pulse/introspect.h	/^    pa_channel_map channel_map;           \/**< The channel map *\/$/;"	m	struct:pa_sample_info	access:public
channel_map	/usr/include/pulse/introspect.h	/^    pa_channel_map channel_map;          \/**< Channel map *\/$/;"	m	struct:pa_sink_input_info	access:public
channel_map	/usr/include/pulse/introspect.h	/^    pa_channel_map channel_map;          \/**< Channel map *\/$/;"	m	struct:pa_source_output_info	access:public
channel_map	/usr/include/pulse/introspect.h	/^    pa_channel_map channel_map;         \/**< Channel map *\/$/;"	m	struct:pa_source_info	access:public
channel_map	/usr/include/pulse/introspect.h	/^    pa_channel_map channel_map;         \/**< Default channel map. \\since 0.9.15 *\/$/;"	m	struct:pa_server_info	access:public
channel_map	/usr/include/pulse/introspect.h	/^    pa_channel_map channel_map;        \/**< Channel map *\/$/;"	m	struct:pa_sink_info	access:public
channels	/usr/include/pulse/channelmap.h	/^    uint8_t channels;$/;"	m	struct:pa_channel_map	access:public
channels	/usr/include/pulse/sample.h	/^    uint8_t channels;$/;"	m	struct:pa_sample_spec	access:public
channels	/usr/include/pulse/volume.h	/^    uint8_t channels;                     \/**< Number of channels *\/$/;"	m	struct:pa_cvolume	access:public
client	/usr/include/pulse/introspect.h	/^    uint32_t client;                     \/**< Index of the client this sink input belongs to, or PA_INVALID_INDEX when it does not belong to any client *\/$/;"	m	struct:pa_sink_input_info	access:public
client	/usr/include/pulse/introspect.h	/^    uint32_t client;                     \/**< Index of the client this source output belongs to, or PA_INVALID_INDEX when it does not belong to any client *\/$/;"	m	struct:pa_source_output_info	access:public
configured_latency	/usr/include/pulse/introspect.h	/^    pa_usec_t configured_latency;       \/**< The latency this device has been configured to. \\since 0.9.11 *\/$/;"	m	struct:pa_source_info	access:public
configured_latency	/usr/include/pulse/introspect.h	/^    pa_usec_t configured_latency;      \/**< The latency this device has been configured to. \\since 0.9.11 *\/$/;"	m	struct:pa_sink_info	access:public
configured_sink_usec	/usr/include/pulse/def.h	/^    pa_usec_t configured_sink_usec;$/;"	m	struct:pa_timing_info	access:public
configured_source_usec	/usr/include/pulse/def.h	/^    pa_usec_t configured_source_usec;$/;"	m	struct:pa_timing_info	access:public
cookie	/usr/include/pulse/introspect.h	/^    uint32_t cookie;                    \/**< A random cookie for identifying this instance of PulseAudio. *\/$/;"	m	struct:pa_server_info	access:public
corked	/usr/include/pulse/introspect.h	/^    int corked;                          \/**< Stream corked \\since 1.0 *\/$/;"	m	struct:pa_sink_input_info	access:public
corked	/usr/include/pulse/introspect.h	/^    int corked;                          \/**< Stream corked \\since 1.0 *\/$/;"	m	struct:pa_source_output_info	access:public
default_sink_name	/usr/include/pulse/introspect.h	/^    const char *default_sink_name;      \/**< Name of default sink. *\/$/;"	m	struct:pa_server_info	access:public
default_source_name	/usr/include/pulse/introspect.h	/^    const char *default_source_name;    \/**< Name of default source. *\/$/;"	m	struct:pa_server_info	access:public
defer_enable	/usr/include/pulse/mainloop-api.h	/^    void (*defer_enable)(pa_defer_event* e, int b);$/;"	m	struct:pa_mainloop_api	access:public
defer_free	/usr/include/pulse/mainloop-api.h	/^    void (*defer_free)(pa_defer_event* e);$/;"	m	struct:pa_mainloop_api	access:public
defer_new	/usr/include/pulse/mainloop-api.h	/^    pa_defer_event* (*defer_new)(pa_mainloop_api*a, pa_defer_event_cb_t cb, void *userdata);$/;"	m	struct:pa_mainloop_api	access:public
defer_set_destroy	/usr/include/pulse/mainloop-api.h	/^    void (*defer_set_destroy)(pa_defer_event *e, pa_defer_event_destroy_cb_t cb);$/;"	m	struct:pa_mainloop_api	access:public
description	/usr/include/pulse/ext-device-manager.h	/^    const char *description;     \/**< The description of the device when it was last seen, if applicable and saved *\/$/;"	m	struct:pa_ext_device_manager_info	access:public
description	/usr/include/pulse/introspect.h	/^    const char *description;            \/**< Description of this port *\/$/;"	m	struct:pa_card_port_info	access:public
description	/usr/include/pulse/introspect.h	/^    const char *description;            \/**< Description of this port *\/$/;"	m	struct:pa_sink_port_info	access:public
description	/usr/include/pulse/introspect.h	/^    const char *description;            \/**< Description of this port *\/$/;"	m	struct:pa_source_port_info	access:public
description	/usr/include/pulse/introspect.h	/^    const char *description;            \/**< Description of this profile *\/$/;"	m	struct:pa_card_profile_info	access:public
description	/usr/include/pulse/introspect.h	/^    const char *description;            \/**< Description of this source *\/$/;"	m	struct:pa_source_info	access:public
description	/usr/include/pulse/introspect.h	/^    const char *description;           \/**< Description of this sink *\/$/;"	m	struct:pa_sink_info	access:public
device	/usr/include/pulse/ext-stream-restore.h	/^    const char *device;          \/**< The sink\/source of the stream when it was last seen, if applicable and saved *\/$/;"	m	struct:pa_ext_stream_restore_info	access:public
direction	/usr/include/pulse/introspect.h	/^    int direction;                      \/**< This is a \\link pa_direction_t enum, indicating the direction of this port. *\/$/;"	m	struct:pa_card_port_info	access:public
driver	/usr/include/pulse/introspect.h	/^    const char *driver;                  \/**< Driver name *\/$/;"	m	struct:pa_card_info	access:public
driver	/usr/include/pulse/introspect.h	/^    const char *driver;                  \/**< Driver name *\/$/;"	m	struct:pa_client_info	access:public
driver	/usr/include/pulse/introspect.h	/^    const char *driver;                  \/**< Driver name *\/$/;"	m	struct:pa_sink_input_info	access:public
driver	/usr/include/pulse/introspect.h	/^    const char *driver;                  \/**< Driver name *\/$/;"	m	struct:pa_source_output_info	access:public
driver	/usr/include/pulse/introspect.h	/^    const char *driver;                 \/**< Driver name *\/$/;"	m	struct:pa_source_info	access:public
driver	/usr/include/pulse/introspect.h	/^    const char *driver;                \/**< Driver name. *\/$/;"	m	struct:pa_sink_info	access:public
duration	/usr/include/pulse/introspect.h	/^    pa_usec_t duration;                   \/**< Duration of this entry *\/$/;"	m	struct:pa_sample_info	access:public
encoding	/usr/include/pulse/format.h	/^    pa_encoding_t encoding;$/;"	m	struct:pa_format_info	access:public
filename	/usr/include/pulse/introspect.h	/^    const char *filename;                 \/**< In case this is a lazy cache entry, the filename for the sound file to be loaded on demand. *\/$/;"	m	struct:pa_sample_info	access:public
flags	/usr/include/pulse/introspect.h	/^    pa_sink_flags_t flags;             \/**< Flags *\/$/;"	m	struct:pa_sink_info	access:public
flags	/usr/include/pulse/introspect.h	/^    pa_source_flags_t flags;            \/**< Flags *\/$/;"	m	struct:pa_source_info	access:public
foochannelmaphfoo	/usr/include/pulse/channelmap.h	2;"	d
foocontexthfoo	/usr/include/pulse/context.h	2;"	d
foodefhfoo	/usr/include/pulse/def.h	2;"	d
fooerrorhfoo	/usr/include/pulse/error.h	2;"	d
fooformathfoo	/usr/include/pulse/format.h	2;"	d
fooglibmainloophfoo	/usr/include/pulse/glib-mainloop.h	2;"	d
foointrospecthfoo	/usr/include/pulse/introspect.h	2;"	d
foomainloopapihfoo	/usr/include/pulse/mainloop-api.h	2;"	d
foomainloophfoo	/usr/include/pulse/mainloop.h	2;"	d
foomainloopsignalhfoo	/usr/include/pulse/mainloop-signal.h	2;"	d
foomemoryhfoo	/usr/include/pulse/xmalloc.h	2;"	d
foooperationhfoo	/usr/include/pulse/operation.h	2;"	d
foopulseaudiohfoo	/usr/include/pulse/pulseaudio.h	2;"	d
foopulsecdeclhfoo	/usr/include/pulse/cdecl.h	2;"	d
foopulseextdevicemanagerhfoo	/usr/include/pulse/ext-device-manager.h	2;"	d
foopulseextdevicerestorehfoo	/usr/include/pulse/ext-device-restore.h	2;"	d
foopulseextstreamrestorehfoo	/usr/include/pulse/ext-stream-restore.h	2;"	d
foopulsegccmacrohfoo	/usr/include/pulse/gccmacro.h	2;"	d
foopulseproplisthfoo	/usr/include/pulse/proplist.h	2;"	d
foortclockfoo	/usr/include/pulse/rtclock.h	2;"	d
foosamplehfoo	/usr/include/pulse/sample.h	2;"	d
fooscachehfoo	/usr/include/pulse/scache.h	2;"	d
foosimplehfoo	/usr/include/pulse/simple.h	2;"	d
foostreamhfoo	/usr/include/pulse/stream.h	2;"	d
foosubscribehfoo	/usr/include/pulse/subscribe.h	2;"	d
foothreadmainloophfoo	/usr/include/pulse/thread-mainloop.h	2;"	d
footimevalhfoo	/usr/include/pulse/timeval.h	2;"	d
fooutf8hfoo	/usr/include/pulse/utf8.h	2;"	d
fooutilhfoo	/usr/include/pulse/util.h	2;"	d
fooversionhfoo	/usr/include/pulse/version.h	2;"	d
foovolumehfoo	/usr/include/pulse/volume.h	2;"	d
format	/usr/include/pulse/introspect.h	/^    pa_format_info *format;              \/**< Stream format information. \\since 1.0 *\/$/;"	m	struct:pa_sink_input_info	access:public
format	/usr/include/pulse/introspect.h	/^    pa_format_info *format;              \/**< Stream format information. \\since 1.0 *\/$/;"	m	struct:pa_source_output_info	access:public
format	/usr/include/pulse/sample.h	/^    pa_sample_format_t format;$/;"	m	struct:pa_sample_spec	access:public
formats	/usr/include/pulse/ext-device-restore.h	/^    pa_format_info **formats;    \/**< An array of formats (may be NULL if n_formats == 0) *\/$/;"	m	struct:pa_ext_device_restore_info	access:public
formats	/usr/include/pulse/introspect.h	/^    pa_format_info **formats;           \/**< Array of formats supported by the source. \\since 1.0 *\/$/;"	m	struct:pa_source_info	access:public
formats	/usr/include/pulse/introspect.h	/^    pa_format_info **formats;          \/**< Array of formats supported by the sink. \\since 1.0 *\/$/;"	m	struct:pa_sink_info	access:public
fragsize	/usr/include/pulse/def.h	/^    uint32_t fragsize;$/;"	m	struct:pa_buffer_attr	access:public
has_volume	/usr/include/pulse/introspect.h	/^    int has_volume;                      \/**< Stream has volume. If not set, then the meaning of this struct's volume member is unspecified. \\since 1.0 *\/$/;"	m	struct:pa_sink_input_info	access:public
has_volume	/usr/include/pulse/introspect.h	/^    int has_volume;                      \/**< Stream has volume. If not set, then the meaning of this struct's volume member is unspecified. \\since 1.0 *\/$/;"	m	struct:pa_source_output_info	access:public
host_name	/usr/include/pulse/introspect.h	/^    const char *host_name;              \/**< Host name the daemon is running on *\/$/;"	m	struct:pa_server_info	access:public
icon	/usr/include/pulse/ext-device-manager.h	/^    const char *icon;            \/**< The icon given to the device *\/$/;"	m	struct:pa_ext_device_manager_info	access:public
index	/usr/include/pulse/ext-device-manager.h	/^    uint32_t index;              \/**< The device index if it is currently available or PA_INVALID_INDEX *\/$/;"	m	struct:pa_ext_device_manager_info	access:public
index	/usr/include/pulse/ext-device-restore.h	/^    uint32_t index;              \/**< The device index *\/$/;"	m	struct:pa_ext_device_restore_info	access:public
index	/usr/include/pulse/introspect.h	/^    uint32_t index;                       \/**< Index of this entry *\/$/;"	m	struct:pa_sample_info	access:public
index	/usr/include/pulse/introspect.h	/^    uint32_t index;                      \/**< Index of the sink input *\/$/;"	m	struct:pa_sink_input_info	access:public
index	/usr/include/pulse/introspect.h	/^    uint32_t index;                      \/**< Index of the source output *\/$/;"	m	struct:pa_source_output_info	access:public
index	/usr/include/pulse/introspect.h	/^    uint32_t index;                      \/**< Index of this card *\/$/;"	m	struct:pa_card_info	access:public
index	/usr/include/pulse/introspect.h	/^    uint32_t index;                      \/**< Index of this client *\/$/;"	m	struct:pa_client_info	access:public
index	/usr/include/pulse/introspect.h	/^    uint32_t index;                     \/**< Index of the module *\/$/;"	m	struct:pa_module_info	access:public
index	/usr/include/pulse/introspect.h	/^    uint32_t index;                     \/**< Index of the source *\/$/;"	m	struct:pa_source_info	access:public
index	/usr/include/pulse/introspect.h	/^    uint32_t index;                    \/**< Index of the sink *\/$/;"	m	struct:pa_sink_info	access:public
index	/usr/include/pulse/introspect.h	/^    uint32_t index;               \/**< Index of this autoload entry *\/$/;"	m	struct:pa_autoload_info	access:public
io_enable	/usr/include/pulse/mainloop-api.h	/^    void (*io_enable)(pa_io_event* e, pa_io_event_flags_t events);$/;"	m	struct:pa_mainloop_api	access:public
io_free	/usr/include/pulse/mainloop-api.h	/^    void (*io_free)(pa_io_event* e);$/;"	m	struct:pa_mainloop_api	access:public
io_new	/usr/include/pulse/mainloop-api.h	/^    pa_io_event* (*io_new)(pa_mainloop_api*a, int fd, pa_io_event_flags_t events, pa_io_event_cb_t cb, void *userdata);$/;"	m	struct:pa_mainloop_api	access:public
io_set_destroy	/usr/include/pulse/mainloop-api.h	/^    void (*io_set_destroy)(pa_io_event *e, pa_io_event_destroy_cb_t cb);$/;"	m	struct:pa_mainloop_api	access:public
latency	/usr/include/pulse/introspect.h	/^    pa_usec_t latency;                  \/**< Length of filled record buffer of this source. *\/$/;"	m	struct:pa_source_info	access:public
latency	/usr/include/pulse/introspect.h	/^    pa_usec_t latency;                 \/**< Length of queued audio in the output buffer. *\/$/;"	m	struct:pa_sink_info	access:public
lazy	/usr/include/pulse/introspect.h	/^    int lazy;                             \/**< Non-zero when this is a lazy cache entry. *\/$/;"	m	struct:pa_sample_info	access:public
map	/usr/include/pulse/channelmap.h	/^    pa_channel_position_t map[PA_CHANNELS_MAX];$/;"	m	struct:pa_channel_map	access:public
maxlength	/usr/include/pulse/def.h	/^    uint32_t maxlength;$/;"	m	struct:pa_buffer_attr	access:public
memblock_allocated	/usr/include/pulse/introspect.h	/^    uint32_t memblock_allocated;       \/**< Allocated memory blocks during the whole lifetime of the daemon *\/$/;"	m	struct:pa_stat_info	access:public
memblock_allocated_size	/usr/include/pulse/introspect.h	/^    uint32_t memblock_allocated_size;  \/**< Total size of all memory blocks allocated during the whole lifetime of the daemon *\/$/;"	m	struct:pa_stat_info	access:public
memblock_total	/usr/include/pulse/introspect.h	/^    uint32_t memblock_total;           \/**< Currently allocated memory blocks *\/$/;"	m	struct:pa_stat_info	access:public
memblock_total_size	/usr/include/pulse/introspect.h	/^    uint32_t memblock_total_size;      \/**< Current total size of allocated memory blocks *\/$/;"	m	struct:pa_stat_info	access:public
minreq	/usr/include/pulse/def.h	/^    uint32_t minreq;$/;"	m	struct:pa_buffer_attr	access:public
module	/usr/include/pulse/introspect.h	/^    const char *module;           \/**< Module name to load *\/$/;"	m	struct:pa_autoload_info	access:public
monitor_of_sink	/usr/include/pulse/introspect.h	/^    uint32_t monitor_of_sink;           \/**< If this is a monitor source the index of the owning sink, otherwise PA_INVALID_INDEX *\/$/;"	m	struct:pa_source_info	access:public
monitor_of_sink_name	/usr/include/pulse/introspect.h	/^    const char *monitor_of_sink_name;   \/**< Name of the owning sink, or PA_INVALID_INDEX *\/$/;"	m	struct:pa_source_info	access:public
monitor_source	/usr/include/pulse/introspect.h	/^    uint32_t monitor_source;           \/**< Index of the monitor source connected to this sink *\/$/;"	m	struct:pa_sink_info	access:public
monitor_source_name	/usr/include/pulse/introspect.h	/^    const char *monitor_source_name;   \/**< The name of the monitor source *\/$/;"	m	struct:pa_sink_info	access:public
mute	/usr/include/pulse/ext-stream-restore.h	/^    int mute;                    \/**< The boolean mute state of the stream when it was last seen, if applicable and saved *\/$/;"	m	struct:pa_ext_stream_restore_info	access:public
mute	/usr/include/pulse/introspect.h	/^    int mute;                            \/**< Stream muted \\since 0.9.7 *\/$/;"	m	struct:pa_sink_input_info	access:public
mute	/usr/include/pulse/introspect.h	/^    int mute;                            \/**< Stream muted \\since 1.0 *\/$/;"	m	struct:pa_source_output_info	access:public
mute	/usr/include/pulse/introspect.h	/^    int mute;                           \/**< Mute switch of the sink *\/$/;"	m	struct:pa_source_info	access:public
mute	/usr/include/pulse/introspect.h	/^    int mute;                          \/**< Mute switch of the sink *\/$/;"	m	struct:pa_sink_info	access:public
n_formats	/usr/include/pulse/ext-device-restore.h	/^    uint8_t n_formats;           \/**< How many formats do we have? *\/$/;"	m	struct:pa_ext_device_restore_info	access:public
n_formats	/usr/include/pulse/introspect.h	/^    uint8_t n_formats;                  \/**< Number of formats supported by the source. \\since 1.0 *\/$/;"	m	struct:pa_source_info	access:public
n_formats	/usr/include/pulse/introspect.h	/^    uint8_t n_formats;                 \/**< Number of formats supported by the sink. \\since 1.0 *\/$/;"	m	struct:pa_sink_info	access:public
n_ports	/usr/include/pulse/introspect.h	/^    uint32_t n_ports;                    \/**< Number of entries in port array *\/$/;"	m	struct:pa_card_info	access:public
n_ports	/usr/include/pulse/introspect.h	/^    uint32_t n_ports;                   \/**< Number of entries in port array \\since 0.9.16 *\/$/;"	m	struct:pa_source_info	access:public
n_ports	/usr/include/pulse/introspect.h	/^    uint32_t n_ports;                  \/**< Number of entries in port array \\since 0.9.16 *\/$/;"	m	struct:pa_sink_info	access:public
n_profiles	/usr/include/pulse/introspect.h	/^    uint32_t n_profiles;                 \/**< Number of entries in profile array *\/$/;"	m	struct:pa_card_info	access:public
n_profiles	/usr/include/pulse/introspect.h	/^    uint32_t n_profiles;                \/**< Number of entries in profile array *\/$/;"	m	struct:pa_card_port_info	access:public
n_role_priorities	/usr/include/pulse/ext-device-manager.h	/^    uint32_t n_role_priorities;  \/**< How many role priorities do we have? *\/$/;"	m	struct:pa_ext_device_manager_info	access:public
n_sinks	/usr/include/pulse/introspect.h	/^    uint32_t n_sinks;                   \/**< Number of sinks this profile would create *\/$/;"	m	struct:pa_card_profile_info	access:public
n_sources	/usr/include/pulse/introspect.h	/^    uint32_t n_sources;                 \/**< Number of sources this profile would create *\/$/;"	m	struct:pa_card_profile_info	access:public
n_used	/usr/include/pulse/introspect.h	/^    uint32_t n_used;                    \/**< Usage counter or PA_INVALID_INDEX *\/$/;"	m	struct:pa_module_info	access:public
n_volume_steps	/usr/include/pulse/introspect.h	/^    uint32_t n_volume_steps;            \/**< Number of volume steps for sources which do not support arbitrary volumes. \\since 0.9.15 *\/$/;"	m	struct:pa_source_info	access:public
n_volume_steps	/usr/include/pulse/introspect.h	/^    uint32_t n_volume_steps;           \/**< Number of volume steps for sinks which do not support arbitrary volumes. \\since 0.9.15 *\/$/;"	m	struct:pa_sink_info	access:public
name	/usr/include/pulse/ext-device-manager.h	/^    const char *name;            \/**< Identifier string of the device. A string like "sink:" or similar followed by the name of the device. *\/$/;"	m	struct:pa_ext_device_manager_info	access:public
name	/usr/include/pulse/ext-stream-restore.h	/^    const char *name;            \/**< Identifier string of the stream. A string like "sink-input-by-role:" or similar followed by some arbitrary property value. *\/$/;"	m	struct:pa_ext_stream_restore_info	access:public
name	/usr/include/pulse/introspect.h	/^    const char *name;                     \/**< Name of this entry *\/$/;"	m	struct:pa_sample_info	access:public
name	/usr/include/pulse/introspect.h	/^    const char *name;                    \/**< Name of the sink input *\/$/;"	m	struct:pa_sink_input_info	access:public
name	/usr/include/pulse/introspect.h	/^    const char *name;                    \/**< Name of the source output *\/$/;"	m	struct:pa_source_output_info	access:public
name	/usr/include/pulse/introspect.h	/^    const char *name;                    \/**< Name of this card *\/$/;"	m	struct:pa_card_info	access:public
name	/usr/include/pulse/introspect.h	/^    const char *name;                    \/**< Name of this client *\/$/;"	m	struct:pa_client_info	access:public
name	/usr/include/pulse/introspect.h	/^    const char *name;                   \/**< Name of the source *\/$/;"	m	struct:pa_source_info	access:public
name	/usr/include/pulse/introspect.h	/^    const char *name;                   \/**< Name of this port *\/$/;"	m	struct:pa_card_port_info	access:public
name	/usr/include/pulse/introspect.h	/^    const char *name;                   \/**< Name of this port *\/$/;"	m	struct:pa_sink_port_info	access:public
name	/usr/include/pulse/introspect.h	/^    const char *name;                   \/**< Name of this port *\/$/;"	m	struct:pa_source_port_info	access:public
name	/usr/include/pulse/introspect.h	/^    const char *name;                   \/**< Name of this profile *\/$/;"	m	struct:pa_card_profile_info	access:public
name	/usr/include/pulse/introspect.h	/^    const char *name;                  \/**< Name of the sink *\/$/;"	m	struct:pa_sink_info	access:public
name	/usr/include/pulse/introspect.h	/^    const char *name;             \/**< Name of the sink or source *\/$/;"	m	struct:pa_autoload_info	access:public
name	/usr/include/pulse/introspect.h	/^    const char*name,                    \/**< Name of the module *\/$/;"	m	struct:pa_module_info	access:public
owner_module	/usr/include/pulse/introspect.h	/^    uint32_t owner_module;               \/**< Index of the module this sink input belongs to, or PA_INVALID_INDEX when it does not belong to any module *\/$/;"	m	struct:pa_sink_input_info	access:public
owner_module	/usr/include/pulse/introspect.h	/^    uint32_t owner_module;               \/**< Index of the module this source output belongs to, or PA_INVALID_INDEX when it does not belong to any module *\/$/;"	m	struct:pa_source_output_info	access:public
owner_module	/usr/include/pulse/introspect.h	/^    uint32_t owner_module;               \/**< Index of the owning module, or PA_INVALID_INDEX *\/$/;"	m	struct:pa_card_info	access:public
owner_module	/usr/include/pulse/introspect.h	/^    uint32_t owner_module;               \/**< Index of the owning module, or PA_INVALID_INDEX *\/$/;"	m	struct:pa_client_info	access:public
owner_module	/usr/include/pulse/introspect.h	/^    uint32_t owner_module;              \/**< Owning module index, or PA_INVALID_INDEX *\/$/;"	m	struct:pa_source_info	access:public
owner_module	/usr/include/pulse/introspect.h	/^    uint32_t owner_module;             \/**< Index of the owning module of this sink, or PA_INVALID_INDEX *\/$/;"	m	struct:pa_sink_info	access:public
pa_ascii_filter	/usr/include/pulse/utf8.h	/^char *pa_ascii_filter(const char *str);$/;"	p	signature:(const char *str)
pa_autoload_info	/usr/include/pulse/introspect.h	/^typedef struct pa_autoload_info {$/;"	s
pa_autoload_info	/usr/include/pulse/introspect.h	/^} pa_autoload_info;$/;"	t	typeref:struct:pa_autoload_info
pa_autoload_info::argument	/usr/include/pulse/introspect.h	/^    const char *argument;         \/**< Argument string for module *\/$/;"	m	struct:pa_autoload_info	access:public
pa_autoload_info::index	/usr/include/pulse/introspect.h	/^    uint32_t index;               \/**< Index of this autoload entry *\/$/;"	m	struct:pa_autoload_info	access:public
pa_autoload_info::module	/usr/include/pulse/introspect.h	/^    const char *module;           \/**< Module name to load *\/$/;"	m	struct:pa_autoload_info	access:public
pa_autoload_info::name	/usr/include/pulse/introspect.h	/^    const char *name;             \/**< Name of the sink or source *\/$/;"	m	struct:pa_autoload_info	access:public
pa_autoload_info::type	/usr/include/pulse/introspect.h	/^    pa_autoload_type_t type;      \/**< Type of the autoload entry *\/$/;"	m	struct:pa_autoload_info	access:public
pa_autoload_info_cb_t	/usr/include/pulse/introspect.h	/^typedef void (*pa_autoload_info_cb_t)(pa_context *c, const pa_autoload_info *i, int eol, void *userdata);$/;"	t
pa_autoload_type	/usr/include/pulse/introspect.h	/^typedef enum pa_autoload_type {$/;"	g
pa_autoload_type_t	/usr/include/pulse/introspect.h	/^} pa_autoload_type_t;$/;"	t	typeref:enum:pa_autoload_type
pa_buffer_attr	/usr/include/pulse/def.h	/^typedef struct pa_buffer_attr {$/;"	s
pa_buffer_attr	/usr/include/pulse/def.h	/^} pa_buffer_attr;$/;"	t	typeref:struct:pa_buffer_attr
pa_buffer_attr::fragsize	/usr/include/pulse/def.h	/^    uint32_t fragsize;$/;"	m	struct:pa_buffer_attr	access:public
pa_buffer_attr::maxlength	/usr/include/pulse/def.h	/^    uint32_t maxlength;$/;"	m	struct:pa_buffer_attr	access:public
pa_buffer_attr::minreq	/usr/include/pulse/def.h	/^    uint32_t minreq;$/;"	m	struct:pa_buffer_attr	access:public
pa_buffer_attr::prebuf	/usr/include/pulse/def.h	/^    uint32_t prebuf;$/;"	m	struct:pa_buffer_attr	access:public
pa_buffer_attr::tlength	/usr/include/pulse/def.h	/^    uint32_t tlength;$/;"	m	struct:pa_buffer_attr	access:public
pa_bytes_snprint	/usr/include/pulse/sample.h	/^char* pa_bytes_snprint(char *s, size_t l, unsigned v);$/;"	p	signature:(char *s, size_t l, unsigned v)
pa_card_info	/usr/include/pulse/introspect.h	/^typedef struct pa_card_info {$/;"	s
pa_card_info	/usr/include/pulse/introspect.h	/^} pa_card_info;$/;"	t	typeref:struct:pa_card_info
pa_card_info::active_profile	/usr/include/pulse/introspect.h	/^    pa_card_profile_info* active_profile; \/**< Pointer to active profile in the array, or NULL *\/$/;"	m	struct:pa_card_info	access:public
pa_card_info::driver	/usr/include/pulse/introspect.h	/^    const char *driver;                  \/**< Driver name *\/$/;"	m	struct:pa_card_info	access:public
pa_card_info::index	/usr/include/pulse/introspect.h	/^    uint32_t index;                      \/**< Index of this card *\/$/;"	m	struct:pa_card_info	access:public
pa_card_info::n_ports	/usr/include/pulse/introspect.h	/^    uint32_t n_ports;                    \/**< Number of entries in port array *\/$/;"	m	struct:pa_card_info	access:public
pa_card_info::n_profiles	/usr/include/pulse/introspect.h	/^    uint32_t n_profiles;                 \/**< Number of entries in profile array *\/$/;"	m	struct:pa_card_info	access:public
pa_card_info::name	/usr/include/pulse/introspect.h	/^    const char *name;                    \/**< Name of this card *\/$/;"	m	struct:pa_card_info	access:public
pa_card_info::owner_module	/usr/include/pulse/introspect.h	/^    uint32_t owner_module;               \/**< Index of the owning module, or PA_INVALID_INDEX *\/$/;"	m	struct:pa_card_info	access:public
pa_card_info::ports	/usr/include/pulse/introspect.h	/^    pa_card_port_info **ports;           \/**< Array of pointers to ports, or NULL. Array is terminated by an entry set to NULL. *\/$/;"	m	struct:pa_card_info	access:public
pa_card_info::profiles	/usr/include/pulse/introspect.h	/^    pa_card_profile_info* profiles;      \/**< Array of available profile, or NULL. Array is terminated by an entry with name set to NULL. Number of entries is stored in n_profiles *\/$/;"	m	struct:pa_card_info	access:public
pa_card_info::proplist	/usr/include/pulse/introspect.h	/^    pa_proplist *proplist;               \/**< Property list *\/$/;"	m	struct:pa_card_info	access:public
pa_card_info_cb_t	/usr/include/pulse/introspect.h	/^typedef void (*pa_card_info_cb_t) (pa_context *c, const pa_card_info*i, int eol, void *userdata);$/;"	t
pa_card_port_info	/usr/include/pulse/introspect.h	/^typedef struct pa_card_port_info {$/;"	s
pa_card_port_info	/usr/include/pulse/introspect.h	/^} pa_card_port_info;$/;"	t	typeref:struct:pa_card_port_info
pa_card_port_info::available	/usr/include/pulse/introspect.h	/^    int available;                      \/**< A \\link pa_port_available_t, indicating availability status of this port. *\/$/;"	m	struct:pa_card_port_info	access:public
pa_card_port_info::description	/usr/include/pulse/introspect.h	/^    const char *description;            \/**< Description of this port *\/$/;"	m	struct:pa_card_port_info	access:public
pa_card_port_info::direction	/usr/include/pulse/introspect.h	/^    int direction;                      \/**< This is a \\link pa_direction_t enum, indicating the direction of this port. *\/$/;"	m	struct:pa_card_port_info	access:public
pa_card_port_info::n_profiles	/usr/include/pulse/introspect.h	/^    uint32_t n_profiles;                \/**< Number of entries in profile array *\/$/;"	m	struct:pa_card_port_info	access:public
pa_card_port_info::name	/usr/include/pulse/introspect.h	/^    const char *name;                   \/**< Name of this port *\/$/;"	m	struct:pa_card_port_info	access:public
pa_card_port_info::priority	/usr/include/pulse/introspect.h	/^    uint32_t priority;                  \/**< The higher this value is the more useful this port is as a default *\/$/;"	m	struct:pa_card_port_info	access:public
pa_card_port_info::profiles	/usr/include/pulse/introspect.h	/^    pa_card_profile_info** profiles;    \/**< Array of pointers available profile, or NULL. Array is terminated by an entry set to NULL. *\/$/;"	m	struct:pa_card_port_info	access:public
pa_card_port_info::proplist	/usr/include/pulse/introspect.h	/^    pa_proplist *proplist;              \/**< Property list *\/$/;"	m	struct:pa_card_port_info	access:public
pa_card_profile_info	/usr/include/pulse/introspect.h	/^typedef struct pa_card_profile_info {$/;"	s
pa_card_profile_info	/usr/include/pulse/introspect.h	/^} pa_card_profile_info;$/;"	t	typeref:struct:pa_card_profile_info
pa_card_profile_info::description	/usr/include/pulse/introspect.h	/^    const char *description;            \/**< Description of this profile *\/$/;"	m	struct:pa_card_profile_info	access:public
pa_card_profile_info::n_sinks	/usr/include/pulse/introspect.h	/^    uint32_t n_sinks;                   \/**< Number of sinks this profile would create *\/$/;"	m	struct:pa_card_profile_info	access:public
pa_card_profile_info::n_sources	/usr/include/pulse/introspect.h	/^    uint32_t n_sources;                 \/**< Number of sources this profile would create *\/$/;"	m	struct:pa_card_profile_info	access:public
pa_card_profile_info::name	/usr/include/pulse/introspect.h	/^    const char *name;                   \/**< Name of this profile *\/$/;"	m	struct:pa_card_profile_info	access:public
pa_card_profile_info::priority	/usr/include/pulse/introspect.h	/^    uint32_t priority;                  \/**< The higher this value is the more useful this profile is as a default *\/$/;"	m	struct:pa_card_profile_info	access:public
pa_channel_map	/usr/include/pulse/channelmap.h	/^typedef struct pa_channel_map {$/;"	s
pa_channel_map	/usr/include/pulse/channelmap.h	/^} pa_channel_map;$/;"	t	typeref:struct:pa_channel_map
pa_channel_map::channels	/usr/include/pulse/channelmap.h	/^    uint8_t channels;$/;"	m	struct:pa_channel_map	access:public
pa_channel_map::map	/usr/include/pulse/channelmap.h	/^    pa_channel_position_t map[PA_CHANNELS_MAX];$/;"	m	struct:pa_channel_map	access:public
pa_channel_map_def	/usr/include/pulse/channelmap.h	/^typedef enum pa_channel_map_def {$/;"	g
pa_channel_map_def_t	/usr/include/pulse/channelmap.h	/^} pa_channel_map_def_t;$/;"	t	typeref:enum:pa_channel_map_def
pa_channel_map_init	/usr/include/pulse/channelmap.h	/^pa_channel_map* pa_channel_map_init(pa_channel_map *m);$/;"	p	signature:(pa_channel_map *m)
pa_channel_map_init_auto	/usr/include/pulse/channelmap.h	/^pa_channel_map* pa_channel_map_init_auto(pa_channel_map *m, unsigned channels, pa_channel_map_def_t def);$/;"	p	signature:(pa_channel_map *m, unsigned channels, pa_channel_map_def_t def)
pa_channel_map_init_extend	/usr/include/pulse/channelmap.h	/^pa_channel_map* pa_channel_map_init_extend(pa_channel_map *m, unsigned channels, pa_channel_map_def_t def);$/;"	p	signature:(pa_channel_map *m, unsigned channels, pa_channel_map_def_t def)
pa_channel_map_init_mono	/usr/include/pulse/channelmap.h	/^pa_channel_map* pa_channel_map_init_mono(pa_channel_map *m);$/;"	p	signature:(pa_channel_map *m)
pa_channel_map_init_stereo	/usr/include/pulse/channelmap.h	/^pa_channel_map* pa_channel_map_init_stereo(pa_channel_map *m);$/;"	p	signature:(pa_channel_map *m)
pa_channel_map_parse	/usr/include/pulse/channelmap.h	/^pa_channel_map *pa_channel_map_parse(pa_channel_map *map, const char *s);$/;"	p	signature:(pa_channel_map *map, const char *s)
pa_channel_map_snprint	/usr/include/pulse/channelmap.h	/^char* pa_channel_map_snprint(char *s, size_t l, const pa_channel_map *map);$/;"	p	signature:(char *s, size_t l, const pa_channel_map *map)
pa_channel_position	/usr/include/pulse/channelmap.h	/^typedef enum pa_channel_position {$/;"	g
pa_channel_position_mask_t	/usr/include/pulse/channelmap.h	/^typedef uint64_t pa_channel_position_mask_t;$/;"	t
pa_channel_position_t	/usr/include/pulse/channelmap.h	/^} pa_channel_position_t;$/;"	t	typeref:enum:pa_channel_position
pa_channel_position_to_pretty_string	/usr/include/pulse/channelmap.h	/^const char* pa_channel_position_to_pretty_string(pa_channel_position_t pos);$/;"	p	signature:(pa_channel_position_t pos)
pa_client_info	/usr/include/pulse/introspect.h	/^typedef struct pa_client_info {$/;"	s
pa_client_info	/usr/include/pulse/introspect.h	/^} pa_client_info;$/;"	t	typeref:struct:pa_client_info
pa_client_info::driver	/usr/include/pulse/introspect.h	/^    const char *driver;                  \/**< Driver name *\/$/;"	m	struct:pa_client_info	access:public
pa_client_info::index	/usr/include/pulse/introspect.h	/^    uint32_t index;                      \/**< Index of this client *\/$/;"	m	struct:pa_client_info	access:public
pa_client_info::name	/usr/include/pulse/introspect.h	/^    const char *name;                    \/**< Name of this client *\/$/;"	m	struct:pa_client_info	access:public
pa_client_info::owner_module	/usr/include/pulse/introspect.h	/^    uint32_t owner_module;               \/**< Index of the owning module, or PA_INVALID_INDEX *\/$/;"	m	struct:pa_client_info	access:public
pa_client_info::proplist	/usr/include/pulse/introspect.h	/^    pa_proplist *proplist;               \/**< Property list \\since 0.9.11 *\/$/;"	m	struct:pa_client_info	access:public
pa_client_info_cb_t	/usr/include/pulse/introspect.h	/^typedef void (*pa_client_info_cb_t) (pa_context *c, const pa_client_info*i, int eol, void *userdata);$/;"	t
pa_context	/usr/include/pulse/context.h	/^typedef struct pa_context pa_context;$/;"	t	typeref:struct:pa_context
pa_context_connect	/usr/include/pulse/context.h	/^int pa_context_connect(pa_context *c, const char *server, pa_context_flags_t flags, const pa_spawn_api *api);$/;"	p	signature:(pa_context *c, const char *server, pa_context_flags_t flags, const pa_spawn_api *api)
pa_context_disconnect	/usr/include/pulse/context.h	/^void pa_context_disconnect(pa_context *c);$/;"	p	signature:(pa_context *c)
pa_context_drain	/usr/include/pulse/context.h	/^pa_operation* pa_context_drain(pa_context *c, pa_context_notify_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, pa_context_notify_cb_t cb, void *userdata)
pa_context_errno	/usr/include/pulse/context.h	/^int pa_context_errno(pa_context *c);$/;"	p	signature:(pa_context *c)
pa_context_event_cb_t	/usr/include/pulse/context.h	/^typedef void (*pa_context_event_cb_t)(pa_context *c, const char *name, pa_proplist *p, void *userdata);$/;"	t
pa_context_exit_daemon	/usr/include/pulse/context.h	/^pa_operation* pa_context_exit_daemon(pa_context *c, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, pa_context_success_cb_t cb, void *userdata)
pa_context_flags	/usr/include/pulse/def.h	/^typedef enum pa_context_flags {$/;"	g
pa_context_flags_t	/usr/include/pulse/def.h	/^} pa_context_flags_t;$/;"	t	typeref:enum:pa_context_flags
pa_context_get_card_info_by_index	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_card_info_by_index(pa_context *c, uint32_t idx, pa_card_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, pa_card_info_cb_t cb, void *userdata)
pa_context_get_card_info_by_name	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_card_info_by_name(pa_context *c, const char *name, pa_card_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, const char *name, pa_card_info_cb_t cb, void *userdata)
pa_context_get_card_info_list	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_card_info_list(pa_context *c, pa_card_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, pa_card_info_cb_t cb, void *userdata)
pa_context_get_client_info	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_client_info(pa_context *c, uint32_t idx, pa_client_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, pa_client_info_cb_t cb, void *userdata)
pa_context_get_client_info_list	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_client_info_list(pa_context *c, pa_client_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, pa_client_info_cb_t cb, void *userdata)
pa_context_get_index	/usr/include/pulse/context.h	/^uint32_t pa_context_get_index(pa_context *s);$/;"	p	signature:(pa_context *s)
pa_context_get_module_info	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_module_info(pa_context *c, uint32_t idx, pa_module_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, pa_module_info_cb_t cb, void *userdata)
pa_context_get_module_info_list	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_module_info_list(pa_context *c, pa_module_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, pa_module_info_cb_t cb, void *userdata)
pa_context_get_protocol_version	/usr/include/pulse/context.h	/^uint32_t pa_context_get_protocol_version(pa_context *c);$/;"	p	signature:(pa_context *c)
pa_context_get_sample_info_by_index	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_sample_info_by_index(pa_context *c, uint32_t idx, pa_sample_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, pa_sample_info_cb_t cb, void *userdata)
pa_context_get_sample_info_by_name	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_sample_info_by_name(pa_context *c, const char *name, pa_sample_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, const char *name, pa_sample_info_cb_t cb, void *userdata)
pa_context_get_sample_info_list	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_sample_info_list(pa_context *c, pa_sample_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, pa_sample_info_cb_t cb, void *userdata)
pa_context_get_server	/usr/include/pulse/context.h	/^const char* pa_context_get_server(pa_context *c);$/;"	p	signature:(pa_context *c)
pa_context_get_server_info	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_server_info(pa_context *c, pa_server_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, pa_server_info_cb_t cb, void *userdata)
pa_context_get_server_protocol_version	/usr/include/pulse/context.h	/^uint32_t pa_context_get_server_protocol_version(pa_context *c);$/;"	p	signature:(pa_context *c)
pa_context_get_sink_info_by_index	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_sink_info_by_index(pa_context *c, uint32_t idx, pa_sink_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, pa_sink_info_cb_t cb, void *userdata)
pa_context_get_sink_info_by_name	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_sink_info_by_name(pa_context *c, const char *name, pa_sink_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, const char *name, pa_sink_info_cb_t cb, void *userdata)
pa_context_get_sink_info_list	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_sink_info_list(pa_context *c, pa_sink_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, pa_sink_info_cb_t cb, void *userdata)
pa_context_get_sink_input_info	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_sink_input_info(pa_context *c, uint32_t idx, pa_sink_input_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, pa_sink_input_info_cb_t cb, void *userdata)
pa_context_get_sink_input_info_list	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_sink_input_info_list(pa_context *c, pa_sink_input_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, pa_sink_input_info_cb_t cb, void *userdata)
pa_context_get_source_info_by_index	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_source_info_by_index(pa_context *c, uint32_t idx, pa_source_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, pa_source_info_cb_t cb, void *userdata)
pa_context_get_source_info_by_name	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_source_info_by_name(pa_context *c, const char *name, pa_source_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, const char *name, pa_source_info_cb_t cb, void *userdata)
pa_context_get_source_info_list	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_source_info_list(pa_context *c, pa_source_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, pa_source_info_cb_t cb, void *userdata)
pa_context_get_source_output_info	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_source_output_info(pa_context *c, uint32_t idx, pa_source_output_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, pa_source_output_info_cb_t cb, void *userdata)
pa_context_get_source_output_info_list	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_get_source_output_info_list(pa_context *c, pa_source_output_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, pa_source_output_info_cb_t cb, void *userdata)
pa_context_get_state	/usr/include/pulse/context.h	/^pa_context_state_t pa_context_get_state(pa_context *c);$/;"	p	signature:(pa_context *c)
pa_context_get_tile_size	/usr/include/pulse/context.h	/^size_t pa_context_get_tile_size(pa_context *c, const pa_sample_spec *ss);$/;"	p	signature:(pa_context *c, const pa_sample_spec *ss)
pa_context_index_cb_t	/usr/include/pulse/introspect.h	/^typedef void (*pa_context_index_cb_t)(pa_context *c, uint32_t idx, void *userdata);$/;"	t
pa_context_is_local	/usr/include/pulse/context.h	/^int pa_context_is_local(pa_context *c);$/;"	p	signature:(pa_context *c)
pa_context_is_pending	/usr/include/pulse/context.h	/^int pa_context_is_pending(pa_context *c);$/;"	p	signature:(pa_context *c)
pa_context_kill_client	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_kill_client(pa_context *c, uint32_t idx, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, pa_context_success_cb_t cb, void *userdata)
pa_context_kill_sink_input	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_kill_sink_input(pa_context *c, uint32_t idx, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, pa_context_success_cb_t cb, void *userdata)
pa_context_kill_source_output	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_kill_source_output(pa_context *c, uint32_t idx, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, pa_context_success_cb_t cb, void *userdata)
pa_context_load_module	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_load_module(pa_context *c, const char*name, const char *argument, pa_context_index_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, const char*name, const char *argument, pa_context_index_cb_t cb, void *userdata)
pa_context_move_sink_input_by_index	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_move_sink_input_by_index(pa_context *c, uint32_t idx, uint32_t sink_idx, pa_context_success_cb_t cb, void* userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, uint32_t sink_idx, pa_context_success_cb_t cb, void* userdata)
pa_context_move_sink_input_by_name	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_move_sink_input_by_name(pa_context *c, uint32_t idx, const char *sink_name, pa_context_success_cb_t cb, void* userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, const char *sink_name, pa_context_success_cb_t cb, void* userdata)
pa_context_move_source_output_by_index	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_move_source_output_by_index(pa_context *c, uint32_t idx, uint32_t source_idx, pa_context_success_cb_t cb, void* userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, uint32_t source_idx, pa_context_success_cb_t cb, void* userdata)
pa_context_move_source_output_by_name	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_move_source_output_by_name(pa_context *c, uint32_t idx, const char *source_name, pa_context_success_cb_t cb, void* userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, const char *source_name, pa_context_success_cb_t cb, void* userdata)
pa_context_new	/usr/include/pulse/context.h	/^pa_context *pa_context_new(pa_mainloop_api *mainloop, const char *name);$/;"	p	signature:(pa_mainloop_api *mainloop, const char *name)
pa_context_new_with_proplist	/usr/include/pulse/context.h	/^pa_context *pa_context_new_with_proplist(pa_mainloop_api *mainloop, const char *name, pa_proplist *proplist);$/;"	p	signature:(pa_mainloop_api *mainloop, const char *name, pa_proplist *proplist)
pa_context_notify_cb_t	/usr/include/pulse/context.h	/^typedef void (*pa_context_notify_cb_t)(pa_context *c, void *userdata);$/;"	t
pa_context_play_sample	/usr/include/pulse/scache.h	/^pa_operation* pa_context_play_sample($/;"	p	signature:( pa_context *c , const char *name , const char *dev , pa_volume_t volume , pa_context_success_cb_t cb , void *userdata )
pa_context_play_sample_cb_t	/usr/include/pulse/scache.h	/^typedef void (*pa_context_play_sample_cb_t)(pa_context *c, uint32_t idx, void *userdata);$/;"	t
pa_context_play_sample_with_proplist	/usr/include/pulse/scache.h	/^pa_operation* pa_context_play_sample_with_proplist($/;"	p	signature:( pa_context *c , const char *name , const char *dev , pa_volume_t volume , pa_proplist *proplist , pa_context_play_sample_cb_t cb , void *userdata )
pa_context_proplist_remove	/usr/include/pulse/context.h	/^pa_operation *pa_context_proplist_remove(pa_context *c, const char *const keys[], pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, const char *const keys[], pa_context_success_cb_t cb, void *userdata)
pa_context_proplist_update	/usr/include/pulse/context.h	/^pa_operation *pa_context_proplist_update(pa_context *c, pa_update_mode_t mode, pa_proplist *p, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, pa_update_mode_t mode, pa_proplist *p, pa_context_success_cb_t cb, void *userdata)
pa_context_ref	/usr/include/pulse/context.h	/^pa_context* pa_context_ref(pa_context *c);$/;"	p	signature:(pa_context *c)
pa_context_remove_sample	/usr/include/pulse/scache.h	/^pa_operation* pa_context_remove_sample(pa_context *c, const char *name, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, const char *name, pa_context_success_cb_t cb, void *userdata)
pa_context_rttime_new	/usr/include/pulse/context.h	/^pa_time_event* pa_context_rttime_new(pa_context *c, pa_usec_t usec, pa_time_event_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, pa_usec_t usec, pa_time_event_cb_t cb, void *userdata)
pa_context_rttime_restart	/usr/include/pulse/context.h	/^void pa_context_rttime_restart(pa_context *c, pa_time_event *e, pa_usec_t usec);$/;"	p	signature:(pa_context *c, pa_time_event *e, pa_usec_t usec)
pa_context_set_card_profile_by_index	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_set_card_profile_by_index(pa_context *c, uint32_t idx, const char*profile, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, const char*profile, pa_context_success_cb_t cb, void *userdata)
pa_context_set_card_profile_by_name	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_set_card_profile_by_name(pa_context *c, const char*name, const char*profile, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, const char*name, const char*profile, pa_context_success_cb_t cb, void *userdata)
pa_context_set_default_sink	/usr/include/pulse/context.h	/^pa_operation* pa_context_set_default_sink(pa_context *c, const char *name, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, const char *name, pa_context_success_cb_t cb, void *userdata)
pa_context_set_default_source	/usr/include/pulse/context.h	/^pa_operation* pa_context_set_default_source(pa_context *c, const char *name, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, const char *name, pa_context_success_cb_t cb, void *userdata)
pa_context_set_event_callback	/usr/include/pulse/context.h	/^void pa_context_set_event_callback(pa_context *p, pa_context_event_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *p, pa_context_event_cb_t cb, void *userdata)
pa_context_set_name	/usr/include/pulse/context.h	/^pa_operation* pa_context_set_name(pa_context *c, const char *name, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, const char *name, pa_context_success_cb_t cb, void *userdata)
pa_context_set_sink_input_mute	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_set_sink_input_mute(pa_context *c, uint32_t idx, int mute, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, int mute, pa_context_success_cb_t cb, void *userdata)
pa_context_set_sink_input_volume	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_set_sink_input_volume(pa_context *c, uint32_t idx, const pa_cvolume *volume, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, const pa_cvolume *volume, pa_context_success_cb_t cb, void *userdata)
pa_context_set_sink_mute_by_index	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_set_sink_mute_by_index(pa_context *c, uint32_t idx, int mute, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, int mute, pa_context_success_cb_t cb, void *userdata)
pa_context_set_sink_mute_by_name	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_set_sink_mute_by_name(pa_context *c, const char *name, int mute, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, const char *name, int mute, pa_context_success_cb_t cb, void *userdata)
pa_context_set_sink_port_by_index	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_set_sink_port_by_index(pa_context *c, uint32_t idx, const char*port, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, const char*port, pa_context_success_cb_t cb, void *userdata)
pa_context_set_sink_port_by_name	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_set_sink_port_by_name(pa_context *c, const char*name, const char*port, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, const char*name, const char*port, pa_context_success_cb_t cb, void *userdata)
pa_context_set_sink_volume_by_index	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_set_sink_volume_by_index(pa_context *c, uint32_t idx, const pa_cvolume *volume, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, const pa_cvolume *volume, pa_context_success_cb_t cb, void *userdata)
pa_context_set_sink_volume_by_name	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_set_sink_volume_by_name(pa_context *c, const char *name, const pa_cvolume *volume, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, const char *name, const pa_cvolume *volume, pa_context_success_cb_t cb, void *userdata)
pa_context_set_source_mute_by_index	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_set_source_mute_by_index(pa_context *c, uint32_t idx, int mute, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, int mute, pa_context_success_cb_t cb, void *userdata)
pa_context_set_source_mute_by_name	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_set_source_mute_by_name(pa_context *c, const char *name, int mute, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, const char *name, int mute, pa_context_success_cb_t cb, void *userdata)
pa_context_set_source_output_mute	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_set_source_output_mute(pa_context *c, uint32_t idx, int mute, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, int mute, pa_context_success_cb_t cb, void *userdata)
pa_context_set_source_output_volume	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_set_source_output_volume(pa_context *c, uint32_t idx, const pa_cvolume *volume, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, const pa_cvolume *volume, pa_context_success_cb_t cb, void *userdata)
pa_context_set_source_port_by_index	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_set_source_port_by_index(pa_context *c, uint32_t idx, const char*port, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, const char*port, pa_context_success_cb_t cb, void *userdata)
pa_context_set_source_port_by_name	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_set_source_port_by_name(pa_context *c, const char*name, const char*port, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, const char*name, const char*port, pa_context_success_cb_t cb, void *userdata)
pa_context_set_source_volume_by_index	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_set_source_volume_by_index(pa_context *c, uint32_t idx, const pa_cvolume *volume, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, const pa_cvolume *volume, pa_context_success_cb_t cb, void *userdata)
pa_context_set_source_volume_by_name	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_set_source_volume_by_name(pa_context *c, const char *name, const pa_cvolume *volume, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, const char *name, const pa_cvolume *volume, pa_context_success_cb_t cb, void *userdata)
pa_context_set_state_callback	/usr/include/pulse/context.h	/^void pa_context_set_state_callback(pa_context *c, pa_context_notify_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, pa_context_notify_cb_t cb, void *userdata)
pa_context_set_subscribe_callback	/usr/include/pulse/subscribe.h	/^void pa_context_set_subscribe_callback(pa_context *c, pa_context_subscribe_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, pa_context_subscribe_cb_t cb, void *userdata)
pa_context_stat	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_stat(pa_context *c, pa_stat_info_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, pa_stat_info_cb_t cb, void *userdata)
pa_context_state	/usr/include/pulse/def.h	/^typedef enum pa_context_state {$/;"	g
pa_context_state_t	/usr/include/pulse/def.h	/^} pa_context_state_t;$/;"	t	typeref:enum:pa_context_state
pa_context_subscribe	/usr/include/pulse/subscribe.h	/^pa_operation* pa_context_subscribe(pa_context *c, pa_subscription_mask_t m, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, pa_subscription_mask_t m, pa_context_success_cb_t cb, void *userdata)
pa_context_subscribe_cb_t	/usr/include/pulse/subscribe.h	/^typedef void (*pa_context_subscribe_cb_t)(pa_context *c, pa_subscription_event_type_t t, uint32_t idx, void *userdata);$/;"	t
pa_context_success_cb_t	/usr/include/pulse/context.h	/^typedef void (*pa_context_success_cb_t) (pa_context *c, int success, void *userdata);$/;"	t
pa_context_suspend_sink_by_index	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_suspend_sink_by_index(pa_context *c, uint32_t idx, int suspend,  pa_context_success_cb_t cb, void* userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, int suspend, pa_context_success_cb_t cb, void* userdata)
pa_context_suspend_sink_by_name	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_suspend_sink_by_name(pa_context *c, const char *sink_name, int suspend, pa_context_success_cb_t cb, void* userdata);$/;"	p	signature:(pa_context *c, const char *sink_name, int suspend, pa_context_success_cb_t cb, void* userdata)
pa_context_suspend_source_by_index	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_suspend_source_by_index(pa_context *c, uint32_t idx, int suspend, pa_context_success_cb_t cb, void* userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, int suspend, pa_context_success_cb_t cb, void* userdata)
pa_context_suspend_source_by_name	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_suspend_source_by_name(pa_context *c, const char *source_name, int suspend, pa_context_success_cb_t cb, void* userdata);$/;"	p	signature:(pa_context *c, const char *source_name, int suspend, pa_context_success_cb_t cb, void* userdata)
pa_context_unload_module	/usr/include/pulse/introspect.h	/^pa_operation* pa_context_unload_module(pa_context *c, uint32_t idx, pa_context_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_context *c, uint32_t idx, pa_context_success_cb_t cb, void *userdata)
pa_context_unref	/usr/include/pulse/context.h	/^void pa_context_unref(pa_context *c);$/;"	p	signature:(pa_context *c)
pa_cvolume	/usr/include/pulse/volume.h	/^typedef struct pa_cvolume {$/;"	s
pa_cvolume	/usr/include/pulse/volume.h	/^} pa_cvolume;$/;"	t	typeref:struct:pa_cvolume
pa_cvolume::channels	/usr/include/pulse/volume.h	/^    uint8_t channels;                     \/**< Number of channels *\/$/;"	m	struct:pa_cvolume	access:public
pa_cvolume::values	/usr/include/pulse/volume.h	/^    pa_volume_t values[PA_CHANNELS_MAX];  \/**< Per-channel volume *\/$/;"	m	struct:pa_cvolume	access:public
pa_cvolume_dec	/usr/include/pulse/volume.h	/^pa_cvolume* pa_cvolume_dec(pa_cvolume *v, pa_volume_t dec);$/;"	p	signature:(pa_cvolume *v, pa_volume_t dec)
pa_cvolume_inc	/usr/include/pulse/volume.h	/^pa_cvolume* pa_cvolume_inc(pa_cvolume *v, pa_volume_t inc);$/;"	p	signature:(pa_cvolume *v, pa_volume_t inc)
pa_cvolume_inc_clamp	/usr/include/pulse/volume.h	/^pa_cvolume* pa_cvolume_inc_clamp(pa_cvolume *v, pa_volume_t inc, pa_volume_t limit);$/;"	p	signature:(pa_cvolume *v, pa_volume_t inc, pa_volume_t limit)
pa_cvolume_init	/usr/include/pulse/volume.h	/^pa_cvolume* pa_cvolume_init(pa_cvolume *a);$/;"	p	signature:(pa_cvolume *a)
pa_cvolume_is_muted	/usr/include/pulse/volume.h	234;"	d
pa_cvolume_is_norm	/usr/include/pulse/volume.h	237;"	d
pa_cvolume_merge	/usr/include/pulse/volume.h	/^pa_cvolume* pa_cvolume_merge(pa_cvolume *dest, const pa_cvolume *a, const pa_cvolume *b);$/;"	p	signature:(pa_cvolume *dest, const pa_cvolume *a, const pa_cvolume *b)
pa_cvolume_mute	/usr/include/pulse/volume.h	152;"	d
pa_cvolume_remap	/usr/include/pulse/volume.h	/^pa_cvolume *pa_cvolume_remap(pa_cvolume *v, const pa_channel_map *from, const pa_channel_map *to);$/;"	p	signature:(pa_cvolume *v, const pa_channel_map *from, const pa_channel_map *to)
pa_cvolume_reset	/usr/include/pulse/volume.h	149;"	d
pa_cvolume_scale	/usr/include/pulse/volume.h	/^pa_cvolume* pa_cvolume_scale(pa_cvolume *v, pa_volume_t max);$/;"	p	signature:(pa_cvolume *v, pa_volume_t max)
pa_cvolume_scale_mask	/usr/include/pulse/volume.h	/^pa_cvolume* pa_cvolume_scale_mask(pa_cvolume *v, pa_volume_t max, pa_channel_map *cm, pa_channel_position_mask_t mask);$/;"	p	signature:(pa_cvolume *v, pa_volume_t max, pa_channel_map *cm, pa_channel_position_mask_t mask)
pa_cvolume_set	/usr/include/pulse/volume.h	/^pa_cvolume* pa_cvolume_set(pa_cvolume *a, unsigned channels, pa_volume_t v);$/;"	p	signature:(pa_cvolume *a, unsigned channels, pa_volume_t v)
pa_cvolume_set_balance	/usr/include/pulse/volume.h	/^pa_cvolume* pa_cvolume_set_balance(pa_cvolume *v, const pa_channel_map *map, float new_balance);$/;"	p	signature:(pa_cvolume *v, const pa_channel_map *map, float new_balance)
pa_cvolume_set_fade	/usr/include/pulse/volume.h	/^pa_cvolume* pa_cvolume_set_fade(pa_cvolume *v, const pa_channel_map *map, float new_fade);$/;"	p	signature:(pa_cvolume *v, const pa_channel_map *map, float new_fade)
pa_cvolume_set_position	/usr/include/pulse/volume.h	/^pa_cvolume* pa_cvolume_set_position(pa_cvolume *cv, const pa_channel_map *map, pa_channel_position_t t, pa_volume_t v);$/;"	p	signature:(pa_cvolume *cv, const pa_channel_map *map, pa_channel_position_t t, pa_volume_t v)
pa_cvolume_snprint	/usr/include/pulse/volume.h	/^char *pa_cvolume_snprint(char *s, size_t l, const pa_cvolume *c);$/;"	p	signature:(char *s, size_t l, const pa_cvolume *c)
pa_defer_event	/usr/include/pulse/mainloop-api.h	/^typedef struct pa_defer_event pa_defer_event;$/;"	t	typeref:struct:pa_defer_event
pa_defer_event_cb_t	/usr/include/pulse/mainloop-api.h	/^typedef void (*pa_defer_event_cb_t)(pa_mainloop_api*a, pa_defer_event* e, void *userdata);$/;"	t
pa_defer_event_destroy_cb_t	/usr/include/pulse/mainloop-api.h	/^typedef void (*pa_defer_event_destroy_cb_t)(pa_mainloop_api*a, pa_defer_event *e, void *userdata);$/;"	t
pa_device_type	/usr/include/pulse/def.h	/^typedef enum pa_device_type {$/;"	g
pa_device_type_t	/usr/include/pulse/def.h	/^} pa_device_type_t;$/;"	t	typeref:enum:pa_device_type
pa_direction	/usr/include/pulse/def.h	/^typedef enum pa_direction {$/;"	g
pa_direction_t	/usr/include/pulse/def.h	/^} pa_direction_t;$/;"	t	typeref:enum:pa_direction
pa_encoding	/usr/include/pulse/format.h	/^typedef enum pa_encoding {$/;"	g
pa_encoding_from_string	/usr/include/pulse/format.h	/^pa_encoding_t pa_encoding_from_string(const char *encoding);$/;"	p	signature:(const char *encoding)
pa_encoding_t	/usr/include/pulse/format.h	/^} pa_encoding_t;$/;"	t	typeref:enum:pa_encoding
pa_ext_device_manager_delete	/usr/include/pulse/ext-device-manager.h	/^pa_operation *pa_ext_device_manager_delete($/;"	p	signature:( pa_context *c, const char *const s[], pa_context_success_cb_t cb, void *userdata)
pa_ext_device_manager_enable_role_device_priority_routing	/usr/include/pulse/ext-device-manager.h	/^pa_operation *pa_ext_device_manager_enable_role_device_priority_routing($/;"	p	signature:( pa_context *c, int enable, pa_context_success_cb_t cb, void *userdata)
pa_ext_device_manager_info	/usr/include/pulse/ext-device-manager.h	/^typedef struct pa_ext_device_manager_info {$/;"	s
pa_ext_device_manager_info	/usr/include/pulse/ext-device-manager.h	/^} pa_ext_device_manager_info;$/;"	t	typeref:struct:pa_ext_device_manager_info
pa_ext_device_manager_info::description	/usr/include/pulse/ext-device-manager.h	/^    const char *description;     \/**< The description of the device when it was last seen, if applicable and saved *\/$/;"	m	struct:pa_ext_device_manager_info	access:public
pa_ext_device_manager_info::icon	/usr/include/pulse/ext-device-manager.h	/^    const char *icon;            \/**< The icon given to the device *\/$/;"	m	struct:pa_ext_device_manager_info	access:public
pa_ext_device_manager_info::index	/usr/include/pulse/ext-device-manager.h	/^    uint32_t index;              \/**< The device index if it is currently available or PA_INVALID_INDEX *\/$/;"	m	struct:pa_ext_device_manager_info	access:public
pa_ext_device_manager_info::n_role_priorities	/usr/include/pulse/ext-device-manager.h	/^    uint32_t n_role_priorities;  \/**< How many role priorities do we have? *\/$/;"	m	struct:pa_ext_device_manager_info	access:public
pa_ext_device_manager_info::name	/usr/include/pulse/ext-device-manager.h	/^    const char *name;            \/**< Identifier string of the device. A string like "sink:" or similar followed by the name of the device. *\/$/;"	m	struct:pa_ext_device_manager_info	access:public
pa_ext_device_manager_info::role_priorities	/usr/include/pulse/ext-device-manager.h	/^    pa_ext_device_manager_role_priority_info *role_priorities; \/**< An array of role priority structures or NULL *\/$/;"	m	struct:pa_ext_device_manager_info	access:public
pa_ext_device_manager_read	/usr/include/pulse/ext-device-manager.h	/^pa_operation *pa_ext_device_manager_read($/;"	p	signature:( pa_context *c, pa_ext_device_manager_read_cb_t cb, void *userdata)
pa_ext_device_manager_read_cb_t	/usr/include/pulse/ext-device-manager.h	/^typedef void (*pa_ext_device_manager_read_cb_t)($/;"	t
pa_ext_device_manager_reorder_devices_for_role	/usr/include/pulse/ext-device-manager.h	/^pa_operation *pa_ext_device_manager_reorder_devices_for_role($/;"	p	signature:( pa_context *c, const char* role, const char** devices, pa_context_success_cb_t cb, void *userdata)
pa_ext_device_manager_role_priority_info	/usr/include/pulse/ext-device-manager.h	/^typedef struct pa_ext_device_manager_role_priority_info {$/;"	s
pa_ext_device_manager_role_priority_info	/usr/include/pulse/ext-device-manager.h	/^} pa_ext_device_manager_role_priority_info;$/;"	t	typeref:struct:pa_ext_device_manager_role_priority_info
pa_ext_device_manager_role_priority_info::priority	/usr/include/pulse/ext-device-manager.h	/^    uint32_t priority;$/;"	m	struct:pa_ext_device_manager_role_priority_info	access:public
pa_ext_device_manager_role_priority_info::role	/usr/include/pulse/ext-device-manager.h	/^    const char *role;$/;"	m	struct:pa_ext_device_manager_role_priority_info	access:public
pa_ext_device_manager_set_device_description	/usr/include/pulse/ext-device-manager.h	/^pa_operation *pa_ext_device_manager_set_device_description($/;"	p	signature:( pa_context *c, const char* device, const char* description, pa_context_success_cb_t cb, void *userdata)
pa_ext_device_manager_set_subscribe_cb	/usr/include/pulse/ext-device-manager.h	/^void pa_ext_device_manager_set_subscribe_cb($/;"	p	signature:( pa_context *c, pa_ext_device_manager_subscribe_cb_t cb, void *userdata)
pa_ext_device_manager_subscribe	/usr/include/pulse/ext-device-manager.h	/^pa_operation *pa_ext_device_manager_subscribe($/;"	p	signature:( pa_context *c, int enable, pa_context_success_cb_t cb, void *userdata)
pa_ext_device_manager_subscribe_cb_t	/usr/include/pulse/ext-device-manager.h	/^typedef void (*pa_ext_device_manager_subscribe_cb_t)($/;"	t
pa_ext_device_manager_test	/usr/include/pulse/ext-device-manager.h	/^pa_operation *pa_ext_device_manager_test($/;"	p	signature:( pa_context *c, pa_ext_device_manager_test_cb_t cb, void *userdata)
pa_ext_device_manager_test_cb_t	/usr/include/pulse/ext-device-manager.h	/^typedef void (*pa_ext_device_manager_test_cb_t)($/;"	t
pa_ext_device_restore_info	/usr/include/pulse/ext-device-restore.h	/^typedef struct pa_ext_device_restore_info {$/;"	s
pa_ext_device_restore_info	/usr/include/pulse/ext-device-restore.h	/^} pa_ext_device_restore_info;$/;"	t	typeref:struct:pa_ext_device_restore_info
pa_ext_device_restore_info::formats	/usr/include/pulse/ext-device-restore.h	/^    pa_format_info **formats;    \/**< An array of formats (may be NULL if n_formats == 0) *\/$/;"	m	struct:pa_ext_device_restore_info	access:public
pa_ext_device_restore_info::index	/usr/include/pulse/ext-device-restore.h	/^    uint32_t index;              \/**< The device index *\/$/;"	m	struct:pa_ext_device_restore_info	access:public
pa_ext_device_restore_info::n_formats	/usr/include/pulse/ext-device-restore.h	/^    uint8_t n_formats;           \/**< How many formats do we have? *\/$/;"	m	struct:pa_ext_device_restore_info	access:public
pa_ext_device_restore_info::type	/usr/include/pulse/ext-device-restore.h	/^    pa_device_type_t type;       \/**< Device type sink or source? *\/$/;"	m	struct:pa_ext_device_restore_info	access:public
pa_ext_device_restore_read_device_formats_cb_t	/usr/include/pulse/ext-device-restore.h	/^typedef void (*pa_ext_device_restore_read_device_formats_cb_t)($/;"	t
pa_ext_device_restore_read_formats	/usr/include/pulse/ext-device-restore.h	/^pa_operation *pa_ext_device_restore_read_formats($/;"	p	signature:( pa_context *c, pa_device_type_t type, uint32_t idx, pa_ext_device_restore_read_device_formats_cb_t cb, void *userdata)
pa_ext_device_restore_read_formats_all	/usr/include/pulse/ext-device-restore.h	/^pa_operation *pa_ext_device_restore_read_formats_all($/;"	p	signature:( pa_context *c, pa_ext_device_restore_read_device_formats_cb_t cb, void *userdata)
pa_ext_device_restore_save_formats	/usr/include/pulse/ext-device-restore.h	/^pa_operation *pa_ext_device_restore_save_formats($/;"	p	signature:( pa_context *c, pa_device_type_t type, uint32_t idx, uint8_t n_formats, pa_format_info **formats, pa_context_success_cb_t cb, void *userdata)
pa_ext_device_restore_set_subscribe_cb	/usr/include/pulse/ext-device-restore.h	/^void pa_ext_device_restore_set_subscribe_cb($/;"	p	signature:( pa_context *c, pa_ext_device_restore_subscribe_cb_t cb, void *userdata)
pa_ext_device_restore_subscribe	/usr/include/pulse/ext-device-restore.h	/^pa_operation *pa_ext_device_restore_subscribe($/;"	p	signature:( pa_context *c, int enable, pa_context_success_cb_t cb, void *userdata)
pa_ext_device_restore_subscribe_cb_t	/usr/include/pulse/ext-device-restore.h	/^typedef void (*pa_ext_device_restore_subscribe_cb_t)($/;"	t
pa_ext_device_restore_test	/usr/include/pulse/ext-device-restore.h	/^pa_operation *pa_ext_device_restore_test($/;"	p	signature:( pa_context *c, pa_ext_device_restore_test_cb_t cb, void *userdata)
pa_ext_device_restore_test_cb_t	/usr/include/pulse/ext-device-restore.h	/^typedef void (*pa_ext_device_restore_test_cb_t)($/;"	t
pa_ext_stream_restore_delete	/usr/include/pulse/ext-stream-restore.h	/^pa_operation *pa_ext_stream_restore_delete($/;"	p	signature:( pa_context *c, const char *const s[], pa_context_success_cb_t cb, void *userdata)
pa_ext_stream_restore_info	/usr/include/pulse/ext-stream-restore.h	/^typedef struct pa_ext_stream_restore_info {$/;"	s
pa_ext_stream_restore_info	/usr/include/pulse/ext-stream-restore.h	/^} pa_ext_stream_restore_info;$/;"	t	typeref:struct:pa_ext_stream_restore_info
pa_ext_stream_restore_info::channel_map	/usr/include/pulse/ext-stream-restore.h	/^    pa_channel_map channel_map;  \/**< The channel map for the volume field, if applicable *\/$/;"	m	struct:pa_ext_stream_restore_info	access:public
pa_ext_stream_restore_info::device	/usr/include/pulse/ext-stream-restore.h	/^    const char *device;          \/**< The sink\/source of the stream when it was last seen, if applicable and saved *\/$/;"	m	struct:pa_ext_stream_restore_info	access:public
pa_ext_stream_restore_info::mute	/usr/include/pulse/ext-stream-restore.h	/^    int mute;                    \/**< The boolean mute state of the stream when it was last seen, if applicable and saved *\/$/;"	m	struct:pa_ext_stream_restore_info	access:public
pa_ext_stream_restore_info::name	/usr/include/pulse/ext-stream-restore.h	/^    const char *name;            \/**< Identifier string of the stream. A string like "sink-input-by-role:" or similar followed by some arbitrary property value. *\/$/;"	m	struct:pa_ext_stream_restore_info	access:public
pa_ext_stream_restore_info::volume	/usr/include/pulse/ext-stream-restore.h	/^    pa_cvolume volume;           \/**< The volume of the stream when it was seen last, if applicable and saved *\/$/;"	m	struct:pa_ext_stream_restore_info	access:public
pa_ext_stream_restore_read	/usr/include/pulse/ext-stream-restore.h	/^pa_operation *pa_ext_stream_restore_read($/;"	p	signature:( pa_context *c, pa_ext_stream_restore_read_cb_t cb, void *userdata)
pa_ext_stream_restore_read_cb_t	/usr/include/pulse/ext-stream-restore.h	/^typedef void (*pa_ext_stream_restore_read_cb_t)($/;"	t
pa_ext_stream_restore_set_subscribe_cb	/usr/include/pulse/ext-stream-restore.h	/^void pa_ext_stream_restore_set_subscribe_cb($/;"	p	signature:( pa_context *c, pa_ext_stream_restore_subscribe_cb_t cb, void *userdata)
pa_ext_stream_restore_subscribe	/usr/include/pulse/ext-stream-restore.h	/^pa_operation *pa_ext_stream_restore_subscribe($/;"	p	signature:( pa_context *c, int enable, pa_context_success_cb_t cb, void *userdata)
pa_ext_stream_restore_subscribe_cb_t	/usr/include/pulse/ext-stream-restore.h	/^typedef void (*pa_ext_stream_restore_subscribe_cb_t)($/;"	t
pa_ext_stream_restore_test	/usr/include/pulse/ext-stream-restore.h	/^pa_operation *pa_ext_stream_restore_test($/;"	p	signature:( pa_context *c, pa_ext_stream_restore_test_cb_t cb, void *userdata)
pa_ext_stream_restore_test_cb_t	/usr/include/pulse/ext-stream-restore.h	/^typedef void (*pa_ext_stream_restore_test_cb_t)($/;"	t
pa_ext_stream_restore_write	/usr/include/pulse/ext-stream-restore.h	/^pa_operation *pa_ext_stream_restore_write($/;"	p	signature:( pa_context *c, pa_update_mode_t mode, const pa_ext_stream_restore_info data[], unsigned n, int apply_immediately, pa_context_success_cb_t cb, void *userdata)
pa_format_info	/usr/include/pulse/format.h	/^typedef struct pa_format_info {$/;"	s
pa_format_info	/usr/include/pulse/format.h	/^} pa_format_info;$/;"	t	typeref:struct:pa_format_info
pa_format_info::encoding	/usr/include/pulse/format.h	/^    pa_encoding_t encoding;$/;"	m	struct:pa_format_info	access:public
pa_format_info::plist	/usr/include/pulse/format.h	/^    pa_proplist *plist;$/;"	m	struct:pa_format_info	access:public
pa_format_info_copy	/usr/include/pulse/format.h	/^pa_format_info* pa_format_info_copy(const pa_format_info *src);$/;"	p	signature:(const pa_format_info *src)
pa_format_info_free	/usr/include/pulse/format.h	/^void pa_format_info_free(pa_format_info *f);$/;"	p	signature:(pa_format_info *f)
pa_format_info_from_string	/usr/include/pulse/format.h	/^pa_format_info* pa_format_info_from_string(const char *str);$/;"	p	signature:(const char *str)
pa_format_info_is_compatible	/usr/include/pulse/format.h	/^int pa_format_info_is_compatible(pa_format_info *first, pa_format_info *second);$/;"	p	signature:(pa_format_info *first, pa_format_info *second)
pa_format_info_is_pcm	/usr/include/pulse/format.h	/^int pa_format_info_is_pcm(const pa_format_info *f);$/;"	p	signature:(const pa_format_info *f)
pa_format_info_new	/usr/include/pulse/format.h	/^pa_format_info* pa_format_info_new(void);$/;"	p	signature:(void)
pa_format_info_set_channel_map	/usr/include/pulse/format.h	/^void pa_format_info_set_channel_map(pa_format_info *f, const pa_channel_map *map);$/;"	p	signature:(pa_format_info *f, const pa_channel_map *map)
pa_format_info_set_channels	/usr/include/pulse/format.h	/^void pa_format_info_set_channels(pa_format_info *f, int channels);$/;"	p	signature:(pa_format_info *f, int channels)
pa_format_info_set_prop_int	/usr/include/pulse/format.h	/^void pa_format_info_set_prop_int(pa_format_info *f, const char *key, int value);$/;"	p	signature:(pa_format_info *f, const char *key, int value)
pa_format_info_set_prop_int_array	/usr/include/pulse/format.h	/^void pa_format_info_set_prop_int_array(pa_format_info *f, const char *key, const int *values, int n_values);$/;"	p	signature:(pa_format_info *f, const char *key, const int *values, int n_values)
pa_format_info_set_prop_int_range	/usr/include/pulse/format.h	/^void pa_format_info_set_prop_int_range(pa_format_info *f, const char *key, int min, int max);$/;"	p	signature:(pa_format_info *f, const char *key, int min, int max)
pa_format_info_set_prop_string	/usr/include/pulse/format.h	/^void pa_format_info_set_prop_string(pa_format_info *f, const char *key, const char *value);$/;"	p	signature:(pa_format_info *f, const char *key, const char *value)
pa_format_info_set_prop_string_array	/usr/include/pulse/format.h	/^void pa_format_info_set_prop_string_array(pa_format_info *f, const char *key, const char **values, int n_values);$/;"	p	signature:(pa_format_info *f, const char *key, const char **values, int n_values)
pa_format_info_set_rate	/usr/include/pulse/format.h	/^void pa_format_info_set_rate(pa_format_info *f, int rate);$/;"	p	signature:(pa_format_info *f, int rate)
pa_format_info_set_sample_format	/usr/include/pulse/format.h	/^void pa_format_info_set_sample_format(pa_format_info *f, pa_sample_format_t sf);$/;"	p	signature:(pa_format_info *f, pa_sample_format_t sf)
pa_format_info_snprint	/usr/include/pulse/format.h	/^char *pa_format_info_snprint(char *s, size_t l, const pa_format_info *f);$/;"	p	signature:(char *s, size_t l, const pa_format_info *f)
pa_format_info_valid	/usr/include/pulse/format.h	/^int pa_format_info_valid(const pa_format_info *f);$/;"	p	signature:(const pa_format_info *f)
pa_free_cb_t	/usr/include/pulse/def.h	/^typedef void (*pa_free_cb_t)(void *p);$/;"	t
pa_get_binary_name	/usr/include/pulse/util.h	/^char *pa_get_binary_name(char *s, size_t l);$/;"	p	signature:(char *s, size_t l)
pa_get_fqdn	/usr/include/pulse/util.h	/^char *pa_get_fqdn(char *s, size_t l);$/;"	p	signature:(char *s, size_t l)
pa_get_headers_version	/usr/include/pulse/version.h	38;"	d
pa_get_home_dir	/usr/include/pulse/util.h	/^char *pa_get_home_dir(char *s, size_t l);$/;"	p	signature:(char *s, size_t l)
pa_get_host_name	/usr/include/pulse/util.h	/^char *pa_get_host_name(char *s, size_t l);$/;"	p	signature:(char *s, size_t l)
pa_get_library_version	/usr/include/pulse/version.h	/^const char* pa_get_library_version(void);$/;"	p	signature:(void)
pa_get_user_name	/usr/include/pulse/util.h	/^char *pa_get_user_name(char *s, size_t l);$/;"	p	signature:(char *s, size_t l)
pa_gettimeofday	/usr/include/pulse/timeval.h	/^struct timeval *pa_gettimeofday(struct timeval *tv);$/;"	p	signature:(struct timeval *tv)
pa_glib_mainloop	/usr/include/pulse/glib-mainloop.h	/^typedef struct pa_glib_mainloop pa_glib_mainloop;$/;"	t	typeref:struct:pa_glib_mainloop
pa_glib_mainloop_free	/usr/include/pulse/glib-mainloop.h	/^void pa_glib_mainloop_free(pa_glib_mainloop* g);$/;"	p	signature:(pa_glib_mainloop* g)
pa_glib_mainloop_get_api	/usr/include/pulse/glib-mainloop.h	/^pa_mainloop_api* pa_glib_mainloop_get_api(pa_glib_mainloop *g);$/;"	p	signature:(pa_glib_mainloop *g)
pa_glib_mainloop_new	/usr/include/pulse/glib-mainloop.h	/^pa_glib_mainloop *pa_glib_mainloop_new(GMainContext *c);$/;"	p	signature:(GMainContext *c)
pa_io_event	/usr/include/pulse/mainloop-api.h	/^typedef struct pa_io_event pa_io_event;$/;"	t	typeref:struct:pa_io_event
pa_io_event_cb_t	/usr/include/pulse/mainloop-api.h	/^typedef void (*pa_io_event_cb_t)(pa_mainloop_api*ea, pa_io_event* e, int fd, pa_io_event_flags_t events, void *userdata);$/;"	t
pa_io_event_destroy_cb_t	/usr/include/pulse/mainloop-api.h	/^typedef void (*pa_io_event_destroy_cb_t)(pa_mainloop_api*a, pa_io_event *e, void *userdata);$/;"	t
pa_io_event_flags	/usr/include/pulse/mainloop-api.h	/^typedef enum pa_io_event_flags {$/;"	g
pa_io_event_flags_t	/usr/include/pulse/mainloop-api.h	/^} pa_io_event_flags_t;$/;"	t	typeref:enum:pa_io_event_flags
pa_locale_to_utf8	/usr/include/pulse/utf8.h	/^char* pa_locale_to_utf8 (const char *str);$/;"	p	signature:(const char *str)
pa_mainloop	/usr/include/pulse/mainloop.h	/^typedef struct pa_mainloop pa_mainloop;$/;"	t	typeref:struct:pa_mainloop
pa_mainloop_api	/usr/include/pulse/mainloop-api.h	/^struct pa_mainloop_api {$/;"	s
pa_mainloop_api	/usr/include/pulse/mainloop-api.h	/^typedef struct pa_mainloop_api pa_mainloop_api;$/;"	t	typeref:struct:pa_mainloop_api
pa_mainloop_api::defer_enable	/usr/include/pulse/mainloop-api.h	/^    void (*defer_enable)(pa_defer_event* e, int b);$/;"	m	struct:pa_mainloop_api	access:public
pa_mainloop_api::defer_free	/usr/include/pulse/mainloop-api.h	/^    void (*defer_free)(pa_defer_event* e);$/;"	m	struct:pa_mainloop_api	access:public
pa_mainloop_api::defer_new	/usr/include/pulse/mainloop-api.h	/^    pa_defer_event* (*defer_new)(pa_mainloop_api*a, pa_defer_event_cb_t cb, void *userdata);$/;"	m	struct:pa_mainloop_api	access:public
pa_mainloop_api::defer_set_destroy	/usr/include/pulse/mainloop-api.h	/^    void (*defer_set_destroy)(pa_defer_event *e, pa_defer_event_destroy_cb_t cb);$/;"	m	struct:pa_mainloop_api	access:public
pa_mainloop_api::io_enable	/usr/include/pulse/mainloop-api.h	/^    void (*io_enable)(pa_io_event* e, pa_io_event_flags_t events);$/;"	m	struct:pa_mainloop_api	access:public
pa_mainloop_api::io_free	/usr/include/pulse/mainloop-api.h	/^    void (*io_free)(pa_io_event* e);$/;"	m	struct:pa_mainloop_api	access:public
pa_mainloop_api::io_new	/usr/include/pulse/mainloop-api.h	/^    pa_io_event* (*io_new)(pa_mainloop_api*a, int fd, pa_io_event_flags_t events, pa_io_event_cb_t cb, void *userdata);$/;"	m	struct:pa_mainloop_api	access:public
pa_mainloop_api::io_set_destroy	/usr/include/pulse/mainloop-api.h	/^    void (*io_set_destroy)(pa_io_event *e, pa_io_event_destroy_cb_t cb);$/;"	m	struct:pa_mainloop_api	access:public
pa_mainloop_api::quit	/usr/include/pulse/mainloop-api.h	/^    void (*quit)(pa_mainloop_api*a, int retval);$/;"	m	struct:pa_mainloop_api	access:public
pa_mainloop_api::time_free	/usr/include/pulse/mainloop-api.h	/^    void (*time_free)(pa_time_event* e);$/;"	m	struct:pa_mainloop_api	access:public
pa_mainloop_api::time_new	/usr/include/pulse/mainloop-api.h	/^    pa_time_event* (*time_new)(pa_mainloop_api*a, const struct timeval *tv, pa_time_event_cb_t cb, void *userdata);$/;"	m	struct:pa_mainloop_api	access:public
pa_mainloop_api::time_restart	/usr/include/pulse/mainloop-api.h	/^    void (*time_restart)(pa_time_event* e, const struct timeval *tv);$/;"	m	struct:pa_mainloop_api	access:public
pa_mainloop_api::time_set_destroy	/usr/include/pulse/mainloop-api.h	/^    void (*time_set_destroy)(pa_time_event *e, pa_time_event_destroy_cb_t cb);$/;"	m	struct:pa_mainloop_api	access:public
pa_mainloop_api::userdata	/usr/include/pulse/mainloop-api.h	/^    void *userdata;$/;"	m	struct:pa_mainloop_api	access:public
pa_mainloop_api_once	/usr/include/pulse/mainloop-api.h	/^void pa_mainloop_api_once(pa_mainloop_api*m, void (*callback)(pa_mainloop_api*m, void *userdata), void *userdata);$/;"	p	signature:(pa_mainloop_api*m, void (*callback)(pa_mainloop_api*m, void *userdata), void *userdata)
pa_mainloop_dispatch	/usr/include/pulse/mainloop.h	/^int pa_mainloop_dispatch(pa_mainloop *m);$/;"	p	signature:(pa_mainloop *m)
pa_mainloop_free	/usr/include/pulse/mainloop.h	/^void pa_mainloop_free(pa_mainloop* m);$/;"	p	signature:(pa_mainloop* m)
pa_mainloop_get_api	/usr/include/pulse/mainloop.h	/^pa_mainloop_api* pa_mainloop_get_api(pa_mainloop*m);$/;"	p	signature:(pa_mainloop*m)
pa_mainloop_get_retval	/usr/include/pulse/mainloop.h	/^int pa_mainloop_get_retval(pa_mainloop *m);$/;"	p	signature:(pa_mainloop *m)
pa_mainloop_iterate	/usr/include/pulse/mainloop.h	/^int pa_mainloop_iterate(pa_mainloop *m, int block, int *retval);$/;"	p	signature:(pa_mainloop *m, int block, int *retval)
pa_mainloop_new	/usr/include/pulse/mainloop.h	/^pa_mainloop *pa_mainloop_new(void);$/;"	p	signature:(void)
pa_mainloop_poll	/usr/include/pulse/mainloop.h	/^int pa_mainloop_poll(pa_mainloop *m);$/;"	p	signature:(pa_mainloop *m)
pa_mainloop_prepare	/usr/include/pulse/mainloop.h	/^int pa_mainloop_prepare(pa_mainloop *m, int timeout);$/;"	p	signature:(pa_mainloop *m, int timeout)
pa_mainloop_quit	/usr/include/pulse/mainloop.h	/^void pa_mainloop_quit(pa_mainloop *m, int r);$/;"	p	signature:(pa_mainloop *m, int r)
pa_mainloop_run	/usr/include/pulse/mainloop.h	/^int pa_mainloop_run(pa_mainloop *m, int *retval);$/;"	p	signature:(pa_mainloop *m, int *retval)
pa_mainloop_set_poll_func	/usr/include/pulse/mainloop.h	/^void pa_mainloop_set_poll_func(pa_mainloop *m, pa_poll_func poll_func, void *userdata);$/;"	p	signature:(pa_mainloop *m, pa_poll_func poll_func, void *userdata)
pa_mainloop_wakeup	/usr/include/pulse/mainloop.h	/^void pa_mainloop_wakeup(pa_mainloop *m);$/;"	p	signature:(pa_mainloop *m)
pa_module_info	/usr/include/pulse/introspect.h	/^typedef struct pa_module_info {$/;"	s
pa_module_info	/usr/include/pulse/introspect.h	/^} pa_module_info;$/;"	t	typeref:struct:pa_module_info
pa_module_info::argument	/usr/include/pulse/introspect.h	/^        *argument;                      \/**< Argument string of the module *\/$/;"	m	struct:pa_module_info	access:public
pa_module_info::auto_unload	/usr/include/pulse/introspect.h	/^    int auto_unload;                    \/**< \\deprecated Non-zero if this is an autoloaded module *\/$/;"	m	struct:pa_module_info	access:public
pa_module_info::index	/usr/include/pulse/introspect.h	/^    uint32_t index;                     \/**< Index of the module *\/$/;"	m	struct:pa_module_info	access:public
pa_module_info::n_used	/usr/include/pulse/introspect.h	/^    uint32_t n_used;                    \/**< Usage counter or PA_INVALID_INDEX *\/$/;"	m	struct:pa_module_info	access:public
pa_module_info::name	/usr/include/pulse/introspect.h	/^    const char*name,                    \/**< Name of the module *\/$/;"	m	struct:pa_module_info	access:public
pa_module_info::proplist	/usr/include/pulse/introspect.h	/^    pa_proplist *proplist;              \/**< Property list \\since 0.9.15 *\/$/;"	m	struct:pa_module_info	access:public
pa_module_info_cb_t	/usr/include/pulse/introspect.h	/^typedef void (*pa_module_info_cb_t) (pa_context *c, const pa_module_info*i, int eol, void *userdata);$/;"	t
pa_msleep	/usr/include/pulse/util.h	/^int pa_msleep(unsigned long t);$/;"	p	signature:(unsigned long t)
pa_operation	/usr/include/pulse/operation.h	/^typedef struct pa_operation pa_operation;$/;"	t	typeref:struct:pa_operation
pa_operation_cancel	/usr/include/pulse/operation.h	/^void pa_operation_cancel(pa_operation *o);$/;"	p	signature:(pa_operation *o)
pa_operation_get_state	/usr/include/pulse/operation.h	/^pa_operation_state_t pa_operation_get_state(pa_operation *o);$/;"	p	signature:(pa_operation *o)
pa_operation_ref	/usr/include/pulse/operation.h	/^pa_operation *pa_operation_ref(pa_operation *o);$/;"	p	signature:(pa_operation *o)
pa_operation_state	/usr/include/pulse/def.h	/^typedef enum pa_operation_state {$/;"	g
pa_operation_state_t	/usr/include/pulse/def.h	/^} pa_operation_state_t;$/;"	t	typeref:enum:pa_operation_state
pa_operation_unref	/usr/include/pulse/operation.h	/^void pa_operation_unref(pa_operation *o);$/;"	p	signature:(pa_operation *o)
pa_path_get_filename	/usr/include/pulse/util.h	/^char *pa_path_get_filename(const char *p);$/;"	p	signature:(const char *p)
pa_poll_func	/usr/include/pulse/mainloop.h	/^typedef int (*pa_poll_func)(struct pollfd *ufds, unsigned long nfds, int timeout, void*userdata);$/;"	t
pa_port_available	/usr/include/pulse/def.h	/^typedef enum pa_port_available {$/;"	g
pa_port_available_t	/usr/include/pulse/def.h	/^} pa_port_available_t;$/;"	t	typeref:enum:pa_port_available
pa_proplist	/usr/include/pulse/proplist.h	/^typedef struct pa_proplist pa_proplist;$/;"	t	typeref:struct:pa_proplist
pa_proplist_clear	/usr/include/pulse/proplist.h	/^void pa_proplist_clear(pa_proplist *p);$/;"	p	signature:(pa_proplist *p)
pa_proplist_contains	/usr/include/pulse/proplist.h	/^int pa_proplist_contains(pa_proplist *p, const char *key);$/;"	p	signature:(pa_proplist *p, const char *key)
pa_proplist_copy	/usr/include/pulse/proplist.h	/^pa_proplist* pa_proplist_copy(pa_proplist *t);$/;"	p	signature:(pa_proplist *t)
pa_proplist_equal	/usr/include/pulse/proplist.h	/^int pa_proplist_equal(pa_proplist *a, pa_proplist *b);$/;"	p	signature:(pa_proplist *a, pa_proplist *b)
pa_proplist_free	/usr/include/pulse/proplist.h	/^void pa_proplist_free(pa_proplist* p);$/;"	p	signature:(pa_proplist* p)
pa_proplist_from_string	/usr/include/pulse/proplist.h	/^pa_proplist *pa_proplist_from_string(const char *str);$/;"	p	signature:(const char *str)
pa_proplist_get	/usr/include/pulse/proplist.h	/^int pa_proplist_get(pa_proplist *p, const char *key, const void **data, size_t *nbytes);$/;"	p	signature:(pa_proplist *p, const char *key, const void **data, size_t *nbytes)
pa_proplist_gets	/usr/include/pulse/proplist.h	/^const char *pa_proplist_gets(pa_proplist *p, const char *key);$/;"	p	signature:(pa_proplist *p, const char *key)
pa_proplist_isempty	/usr/include/pulse/proplist.h	/^int pa_proplist_isempty(pa_proplist *t);$/;"	p	signature:(pa_proplist *t)
pa_proplist_iterate	/usr/include/pulse/proplist.h	/^const char *pa_proplist_iterate(pa_proplist *p, void **state);$/;"	p	signature:(pa_proplist *p, void **state)
pa_proplist_new	/usr/include/pulse/proplist.h	/^pa_proplist* pa_proplist_new(void);$/;"	p	signature:(void)
pa_proplist_set	/usr/include/pulse/proplist.h	/^int pa_proplist_set(pa_proplist *p, const char *key, const void *data, size_t nbytes);$/;"	p	signature:(pa_proplist *p, const char *key, const void *data, size_t nbytes)
pa_proplist_setp	/usr/include/pulse/proplist.h	/^int pa_proplist_setp(pa_proplist *p, const char *pair);$/;"	p	signature:(pa_proplist *p, const char *pair)
pa_proplist_sets	/usr/include/pulse/proplist.h	/^int pa_proplist_sets(pa_proplist *p, const char *key, const char *value);$/;"	p	signature:(pa_proplist *p, const char *key, const char *value)
pa_proplist_size	/usr/include/pulse/proplist.h	/^unsigned pa_proplist_size(pa_proplist *t);$/;"	p	signature:(pa_proplist *t)
pa_proplist_to_string	/usr/include/pulse/proplist.h	/^char *pa_proplist_to_string(pa_proplist *p);$/;"	p	signature:(pa_proplist *p)
pa_proplist_to_string_sep	/usr/include/pulse/proplist.h	/^char *pa_proplist_to_string_sep(pa_proplist *p, const char *sep);$/;"	p	signature:(pa_proplist *p, const char *sep)
pa_proplist_unset	/usr/include/pulse/proplist.h	/^int pa_proplist_unset(pa_proplist *p, const char *key);$/;"	p	signature:(pa_proplist *p, const char *key)
pa_proplist_unset_many	/usr/include/pulse/proplist.h	/^int pa_proplist_unset_many(pa_proplist *p, const char * const keys[]);$/;"	p	signature:(pa_proplist *p, const char * const keys[])
pa_proplist_update	/usr/include/pulse/proplist.h	/^void pa_proplist_update(pa_proplist *p, pa_update_mode_t mode, pa_proplist *other);$/;"	p	signature:(pa_proplist *p, pa_update_mode_t mode, pa_proplist *other)
pa_rtclock_now	/usr/include/pulse/rtclock.h	/^pa_usec_t pa_rtclock_now(void);$/;"	p	signature:(void)
pa_sample_format	/usr/include/pulse/sample.h	/^typedef enum pa_sample_format {$/;"	g
pa_sample_format_is_ne	/usr/include/pulse/sample.h	326;"	d
pa_sample_format_is_ne	/usr/include/pulse/sample.h	331;"	d
pa_sample_format_is_re	/usr/include/pulse/sample.h	327;"	d
pa_sample_format_is_re	/usr/include/pulse/sample.h	334;"	d
pa_sample_format_t	/usr/include/pulse/sample.h	/^} pa_sample_format_t;$/;"	t	typeref:enum:pa_sample_format
pa_sample_info	/usr/include/pulse/introspect.h	/^typedef struct pa_sample_info {$/;"	s
pa_sample_info	/usr/include/pulse/introspect.h	/^} pa_sample_info;$/;"	t	typeref:struct:pa_sample_info
pa_sample_info::bytes	/usr/include/pulse/introspect.h	/^    uint32_t bytes;                       \/**< Length of this sample in bytes. *\/$/;"	m	struct:pa_sample_info	access:public
pa_sample_info::channel_map	/usr/include/pulse/introspect.h	/^    pa_channel_map channel_map;           \/**< The channel map *\/$/;"	m	struct:pa_sample_info	access:public
pa_sample_info::duration	/usr/include/pulse/introspect.h	/^    pa_usec_t duration;                   \/**< Duration of this entry *\/$/;"	m	struct:pa_sample_info	access:public
pa_sample_info::filename	/usr/include/pulse/introspect.h	/^    const char *filename;                 \/**< In case this is a lazy cache entry, the filename for the sound file to be loaded on demand. *\/$/;"	m	struct:pa_sample_info	access:public
pa_sample_info::index	/usr/include/pulse/introspect.h	/^    uint32_t index;                       \/**< Index of this entry *\/$/;"	m	struct:pa_sample_info	access:public
pa_sample_info::lazy	/usr/include/pulse/introspect.h	/^    int lazy;                             \/**< Non-zero when this is a lazy cache entry. *\/$/;"	m	struct:pa_sample_info	access:public
pa_sample_info::name	/usr/include/pulse/introspect.h	/^    const char *name;                     \/**< Name of this entry *\/$/;"	m	struct:pa_sample_info	access:public
pa_sample_info::proplist	/usr/include/pulse/introspect.h	/^    pa_proplist *proplist;                \/**< Property list for this sample. \\since 0.9.11 *\/$/;"	m	struct:pa_sample_info	access:public
pa_sample_info::sample_spec	/usr/include/pulse/introspect.h	/^    pa_sample_spec sample_spec;           \/**< Sample specification of the sample *\/$/;"	m	struct:pa_sample_info	access:public
pa_sample_info::volume	/usr/include/pulse/introspect.h	/^    pa_cvolume volume;                    \/**< Default volume of this entry *\/$/;"	m	struct:pa_sample_info	access:public
pa_sample_info_cb_t	/usr/include/pulse/introspect.h	/^typedef void (*pa_sample_info_cb_t)(pa_context *c, const pa_sample_info *i, int eol, void *userdata);$/;"	t
pa_sample_spec	/usr/include/pulse/sample.h	/^typedef struct pa_sample_spec {$/;"	s
pa_sample_spec	/usr/include/pulse/sample.h	/^} pa_sample_spec;$/;"	t	typeref:struct:pa_sample_spec
pa_sample_spec::channels	/usr/include/pulse/sample.h	/^    uint8_t channels;$/;"	m	struct:pa_sample_spec	access:public
pa_sample_spec::format	/usr/include/pulse/sample.h	/^    pa_sample_format_t format;$/;"	m	struct:pa_sample_spec	access:public
pa_sample_spec::rate	/usr/include/pulse/sample.h	/^    uint32_t rate;$/;"	m	struct:pa_sample_spec	access:public
pa_sample_spec_init	/usr/include/pulse/sample.h	/^pa_sample_spec* pa_sample_spec_init(pa_sample_spec *spec);$/;"	p	signature:(pa_sample_spec *spec)
pa_sample_spec_snprint	/usr/include/pulse/sample.h	/^char* pa_sample_spec_snprint(char *s, size_t l, const pa_sample_spec *spec);$/;"	p	signature:(char *s, size_t l, const pa_sample_spec *spec)
pa_seek_mode	/usr/include/pulse/def.h	/^typedef enum pa_seek_mode {$/;"	g
pa_seek_mode_t	/usr/include/pulse/def.h	/^} pa_seek_mode_t;$/;"	t	typeref:enum:pa_seek_mode
pa_server_info	/usr/include/pulse/introspect.h	/^typedef struct pa_server_info {$/;"	s
pa_server_info	/usr/include/pulse/introspect.h	/^} pa_server_info;$/;"	t	typeref:struct:pa_server_info
pa_server_info::channel_map	/usr/include/pulse/introspect.h	/^    pa_channel_map channel_map;         \/**< Default channel map. \\since 0.9.15 *\/$/;"	m	struct:pa_server_info	access:public
pa_server_info::cookie	/usr/include/pulse/introspect.h	/^    uint32_t cookie;                    \/**< A random cookie for identifying this instance of PulseAudio. *\/$/;"	m	struct:pa_server_info	access:public
pa_server_info::default_sink_name	/usr/include/pulse/introspect.h	/^    const char *default_sink_name;      \/**< Name of default sink. *\/$/;"	m	struct:pa_server_info	access:public
pa_server_info::default_source_name	/usr/include/pulse/introspect.h	/^    const char *default_source_name;    \/**< Name of default source. *\/$/;"	m	struct:pa_server_info	access:public
pa_server_info::host_name	/usr/include/pulse/introspect.h	/^    const char *host_name;              \/**< Host name the daemon is running on *\/$/;"	m	struct:pa_server_info	access:public
pa_server_info::sample_spec	/usr/include/pulse/introspect.h	/^    pa_sample_spec sample_spec;         \/**< Default sample specification *\/$/;"	m	struct:pa_server_info	access:public
pa_server_info::server_name	/usr/include/pulse/introspect.h	/^    const char *server_name;            \/**< Server package name (usually "pulseaudio") *\/$/;"	m	struct:pa_server_info	access:public
pa_server_info::server_version	/usr/include/pulse/introspect.h	/^    const char *server_version;         \/**< Version string of the daemon *\/$/;"	m	struct:pa_server_info	access:public
pa_server_info::user_name	/usr/include/pulse/introspect.h	/^    const char *user_name;              \/**< User name of the daemon process *\/$/;"	m	struct:pa_server_info	access:public
pa_server_info_cb_t	/usr/include/pulse/introspect.h	/^typedef void (*pa_server_info_cb_t) (pa_context *c, const pa_server_info*i, void *userdata);$/;"	t
pa_signal_cb_t	/usr/include/pulse/mainloop-signal.h	/^typedef void (*pa_signal_cb_t) (pa_mainloop_api *api, pa_signal_event*e, int sig, void *userdata);$/;"	t
pa_signal_destroy_cb_t	/usr/include/pulse/mainloop-signal.h	/^typedef void (*pa_signal_destroy_cb_t) (pa_mainloop_api *api, pa_signal_event*e, void *userdata);$/;"	t
pa_signal_done	/usr/include/pulse/mainloop-signal.h	/^void pa_signal_done(void);$/;"	p	signature:(void)
pa_signal_event	/usr/include/pulse/mainloop-signal.h	/^typedef struct pa_signal_event pa_signal_event;$/;"	t	typeref:struct:pa_signal_event
pa_signal_free	/usr/include/pulse/mainloop-signal.h	/^void pa_signal_free(pa_signal_event *e);$/;"	p	signature:(pa_signal_event *e)
pa_signal_init	/usr/include/pulse/mainloop-signal.h	/^int pa_signal_init(pa_mainloop_api *api);$/;"	p	signature:(pa_mainloop_api *api)
pa_signal_new	/usr/include/pulse/mainloop-signal.h	/^pa_signal_event* pa_signal_new(int sig, pa_signal_cb_t callback, void *userdata);$/;"	p	signature:(int sig, pa_signal_cb_t callback, void *userdata)
pa_signal_set_destroy	/usr/include/pulse/mainloop-signal.h	/^void pa_signal_set_destroy(pa_signal_event *e, pa_signal_destroy_cb_t callback);$/;"	p	signature:(pa_signal_event *e, pa_signal_destroy_cb_t callback)
pa_simple	/usr/include/pulse/simple.h	/^typedef struct pa_simple pa_simple;$/;"	t	typeref:struct:pa_simple
pa_simple_drain	/usr/include/pulse/simple.h	/^int pa_simple_drain(pa_simple *s, int *error);$/;"	p	signature:(pa_simple *s, int *error)
pa_simple_flush	/usr/include/pulse/simple.h	/^int pa_simple_flush(pa_simple *s, int *error);$/;"	p	signature:(pa_simple *s, int *error)
pa_simple_free	/usr/include/pulse/simple.h	/^void pa_simple_free(pa_simple *s);$/;"	p	signature:(pa_simple *s)
pa_simple_get_latency	/usr/include/pulse/simple.h	/^pa_usec_t pa_simple_get_latency(pa_simple *s, int *error);$/;"	p	signature:(pa_simple *s, int *error)
pa_simple_new	/usr/include/pulse/simple.h	/^pa_simple* pa_simple_new($/;"	p	signature:( const char *server, const char *name, pa_stream_direction_t dir, const char *dev, const char *stream_name, const pa_sample_spec *ss, const pa_channel_map *map, const pa_buffer_attr *attr, int *error )
pa_simple_read	/usr/include/pulse/simple.h	/^int pa_simple_read(pa_simple *s, void*data, size_t bytes, int *error);$/;"	p	signature:(pa_simple *s, void*data, size_t bytes, int *error)
pa_simple_write	/usr/include/pulse/simple.h	/^int pa_simple_write(pa_simple *s, const void*data, size_t bytes, int *error);$/;"	p	signature:(pa_simple *s, const void*data, size_t bytes, int *error)
pa_sink_flags	/usr/include/pulse/def.h	/^typedef enum pa_sink_flags {$/;"	g
pa_sink_flags_t	/usr/include/pulse/def.h	/^} pa_sink_flags_t;$/;"	t	typeref:enum:pa_sink_flags
pa_sink_info	/usr/include/pulse/introspect.h	/^typedef struct pa_sink_info {$/;"	s
pa_sink_info	/usr/include/pulse/introspect.h	/^} pa_sink_info;$/;"	t	typeref:struct:pa_sink_info
pa_sink_info::active_port	/usr/include/pulse/introspect.h	/^    pa_sink_port_info* active_port;    \/**< Pointer to active port in the array, or NULL \\since 0.9.16 *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::base_volume	/usr/include/pulse/introspect.h	/^    pa_volume_t base_volume;           \/**< Some kind of "base" volume that refers to unamplified\/unattenuated volume in the context of the output device. \\since 0.9.15 *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::card	/usr/include/pulse/introspect.h	/^    uint32_t card;                     \/**< Card index, or PA_INVALID_INDEX. \\since 0.9.15 *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::channel_map	/usr/include/pulse/introspect.h	/^    pa_channel_map channel_map;        \/**< Channel map *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::configured_latency	/usr/include/pulse/introspect.h	/^    pa_usec_t configured_latency;      \/**< The latency this device has been configured to. \\since 0.9.11 *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::description	/usr/include/pulse/introspect.h	/^    const char *description;           \/**< Description of this sink *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::driver	/usr/include/pulse/introspect.h	/^    const char *driver;                \/**< Driver name. *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::flags	/usr/include/pulse/introspect.h	/^    pa_sink_flags_t flags;             \/**< Flags *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::formats	/usr/include/pulse/introspect.h	/^    pa_format_info **formats;          \/**< Array of formats supported by the sink. \\since 1.0 *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::index	/usr/include/pulse/introspect.h	/^    uint32_t index;                    \/**< Index of the sink *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::latency	/usr/include/pulse/introspect.h	/^    pa_usec_t latency;                 \/**< Length of queued audio in the output buffer. *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::monitor_source	/usr/include/pulse/introspect.h	/^    uint32_t monitor_source;           \/**< Index of the monitor source connected to this sink *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::monitor_source_name	/usr/include/pulse/introspect.h	/^    const char *monitor_source_name;   \/**< The name of the monitor source *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::mute	/usr/include/pulse/introspect.h	/^    int mute;                          \/**< Mute switch of the sink *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::n_formats	/usr/include/pulse/introspect.h	/^    uint8_t n_formats;                 \/**< Number of formats supported by the sink. \\since 1.0 *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::n_ports	/usr/include/pulse/introspect.h	/^    uint32_t n_ports;                  \/**< Number of entries in port array \\since 0.9.16 *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::n_volume_steps	/usr/include/pulse/introspect.h	/^    uint32_t n_volume_steps;           \/**< Number of volume steps for sinks which do not support arbitrary volumes. \\since 0.9.15 *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::name	/usr/include/pulse/introspect.h	/^    const char *name;                  \/**< Name of the sink *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::owner_module	/usr/include/pulse/introspect.h	/^    uint32_t owner_module;             \/**< Index of the owning module of this sink, or PA_INVALID_INDEX *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::ports	/usr/include/pulse/introspect.h	/^    pa_sink_port_info** ports;         \/**< Array of available ports, or NULL. Array is terminated by an entry set to NULL. The number of entries is stored in n_ports \\since 0.9.16 *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::proplist	/usr/include/pulse/introspect.h	/^    pa_proplist *proplist;             \/**< Property list \\since 0.9.11 *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::sample_spec	/usr/include/pulse/introspect.h	/^    pa_sample_spec sample_spec;        \/**< Sample spec of this sink *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::state	/usr/include/pulse/introspect.h	/^    pa_sink_state_t state;             \/**< State \\since 0.9.15 *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info::volume	/usr/include/pulse/introspect.h	/^    pa_cvolume volume;                 \/**< Volume of the sink *\/$/;"	m	struct:pa_sink_info	access:public
pa_sink_info_cb_t	/usr/include/pulse/introspect.h	/^typedef void (*pa_sink_info_cb_t)(pa_context *c, const pa_sink_info *i, int eol, void *userdata);$/;"	t
pa_sink_input_info	/usr/include/pulse/introspect.h	/^typedef struct pa_sink_input_info {$/;"	s
pa_sink_input_info	/usr/include/pulse/introspect.h	/^} pa_sink_input_info;$/;"	t	typeref:struct:pa_sink_input_info
pa_sink_input_info::buffer_usec	/usr/include/pulse/introspect.h	/^    pa_usec_t buffer_usec;               \/**< Latency due to buffering in sink input, see pa_latency_info for details *\/$/;"	m	struct:pa_sink_input_info	access:public
pa_sink_input_info::channel_map	/usr/include/pulse/introspect.h	/^    pa_channel_map channel_map;          \/**< Channel map *\/$/;"	m	struct:pa_sink_input_info	access:public
pa_sink_input_info::client	/usr/include/pulse/introspect.h	/^    uint32_t client;                     \/**< Index of the client this sink input belongs to, or PA_INVALID_INDEX when it does not belong to any client *\/$/;"	m	struct:pa_sink_input_info	access:public
pa_sink_input_info::corked	/usr/include/pulse/introspect.h	/^    int corked;                          \/**< Stream corked \\since 1.0 *\/$/;"	m	struct:pa_sink_input_info	access:public
pa_sink_input_info::driver	/usr/include/pulse/introspect.h	/^    const char *driver;                  \/**< Driver name *\/$/;"	m	struct:pa_sink_input_info	access:public
pa_sink_input_info::format	/usr/include/pulse/introspect.h	/^    pa_format_info *format;              \/**< Stream format information. \\since 1.0 *\/$/;"	m	struct:pa_sink_input_info	access:public
pa_sink_input_info::has_volume	/usr/include/pulse/introspect.h	/^    int has_volume;                      \/**< Stream has volume. If not set, then the meaning of this struct's volume member is unspecified. \\since 1.0 *\/$/;"	m	struct:pa_sink_input_info	access:public
pa_sink_input_info::index	/usr/include/pulse/introspect.h	/^    uint32_t index;                      \/**< Index of the sink input *\/$/;"	m	struct:pa_sink_input_info	access:public
pa_sink_input_info::mute	/usr/include/pulse/introspect.h	/^    int mute;                            \/**< Stream muted \\since 0.9.7 *\/$/;"	m	struct:pa_sink_input_info	access:public
pa_sink_input_info::name	/usr/include/pulse/introspect.h	/^    const char *name;                    \/**< Name of the sink input *\/$/;"	m	struct:pa_sink_input_info	access:public
pa_sink_input_info::owner_module	/usr/include/pulse/introspect.h	/^    uint32_t owner_module;               \/**< Index of the module this sink input belongs to, or PA_INVALID_INDEX when it does not belong to any module *\/$/;"	m	struct:pa_sink_input_info	access:public
pa_sink_input_info::proplist	/usr/include/pulse/introspect.h	/^    pa_proplist *proplist;               \/**< Property list \\since 0.9.11 *\/$/;"	m	struct:pa_sink_input_info	access:public
pa_sink_input_info::resample_method	/usr/include/pulse/introspect.h	/^    const char *resample_method;         \/**< The resampling method used by this sink input. *\/$/;"	m	struct:pa_sink_input_info	access:public
pa_sink_input_info::sample_spec	/usr/include/pulse/introspect.h	/^    pa_sample_spec sample_spec;          \/**< The sample specification of the sink input *\/$/;"	m	struct:pa_sink_input_info	access:public
pa_sink_input_info::sink	/usr/include/pulse/introspect.h	/^    uint32_t sink;                       \/**< Index of the connected sink *\/$/;"	m	struct:pa_sink_input_info	access:public
pa_sink_input_info::sink_usec	/usr/include/pulse/introspect.h	/^    pa_usec_t sink_usec;                 \/**< Latency of the sink device, see pa_latency_info for details *\/$/;"	m	struct:pa_sink_input_info	access:public
pa_sink_input_info::volume	/usr/include/pulse/introspect.h	/^    pa_cvolume volume;                   \/**< The volume of this sink input *\/$/;"	m	struct:pa_sink_input_info	access:public
pa_sink_input_info::volume_writable	/usr/include/pulse/introspect.h	/^    int volume_writable;                 \/**< The volume can be set. If not set, the volume can still change even though clients can't control the volume. \\since 1.0 *\/$/;"	m	struct:pa_sink_input_info	access:public
pa_sink_input_info_cb_t	/usr/include/pulse/introspect.h	/^typedef void (*pa_sink_input_info_cb_t) (pa_context *c, const pa_sink_input_info *i, int eol, void *userdata);$/;"	t
pa_sink_port_info	/usr/include/pulse/introspect.h	/^typedef struct pa_sink_port_info {$/;"	s
pa_sink_port_info	/usr/include/pulse/introspect.h	/^} pa_sink_port_info;$/;"	t	typeref:struct:pa_sink_port_info
pa_sink_port_info::available	/usr/include/pulse/introspect.h	/^    int available;                      \/**< A \\link pa_port_available_t, indicating availability status of this port. \\since 2.0 *\/$/;"	m	struct:pa_sink_port_info	access:public
pa_sink_port_info::description	/usr/include/pulse/introspect.h	/^    const char *description;            \/**< Description of this port *\/$/;"	m	struct:pa_sink_port_info	access:public
pa_sink_port_info::name	/usr/include/pulse/introspect.h	/^    const char *name;                   \/**< Name of this port *\/$/;"	m	struct:pa_sink_port_info	access:public
pa_sink_port_info::priority	/usr/include/pulse/introspect.h	/^    uint32_t priority;                  \/**< The higher this value is the more useful this port is as a default *\/$/;"	m	struct:pa_sink_port_info	access:public
pa_sink_state	/usr/include/pulse/def.h	/^typedef enum pa_sink_state { \/* enum serialized in u8 *\/$/;"	g
pa_sink_state_t	/usr/include/pulse/def.h	/^} pa_sink_state_t;$/;"	t	typeref:enum:pa_sink_state
pa_source_flags	/usr/include/pulse/def.h	/^typedef enum pa_source_flags {$/;"	g
pa_source_flags_t	/usr/include/pulse/def.h	/^} pa_source_flags_t;$/;"	t	typeref:enum:pa_source_flags
pa_source_info	/usr/include/pulse/introspect.h	/^typedef struct pa_source_info {$/;"	s
pa_source_info	/usr/include/pulse/introspect.h	/^} pa_source_info;$/;"	t	typeref:struct:pa_source_info
pa_source_info::active_port	/usr/include/pulse/introspect.h	/^    pa_source_port_info* active_port;   \/**< Pointer to active port in the array, or NULL \\since 0.9.16  *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::base_volume	/usr/include/pulse/introspect.h	/^    pa_volume_t base_volume;            \/**< Some kind of "base" volume that refers to unamplified\/unattenuated volume in the context of the input device. \\since 0.9.15 *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::card	/usr/include/pulse/introspect.h	/^    uint32_t card;                      \/**< Card index, or PA_INVALID_INDEX. \\since 0.9.15 *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::channel_map	/usr/include/pulse/introspect.h	/^    pa_channel_map channel_map;         \/**< Channel map *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::configured_latency	/usr/include/pulse/introspect.h	/^    pa_usec_t configured_latency;       \/**< The latency this device has been configured to. \\since 0.9.11 *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::description	/usr/include/pulse/introspect.h	/^    const char *description;            \/**< Description of this source *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::driver	/usr/include/pulse/introspect.h	/^    const char *driver;                 \/**< Driver name *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::flags	/usr/include/pulse/introspect.h	/^    pa_source_flags_t flags;            \/**< Flags *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::formats	/usr/include/pulse/introspect.h	/^    pa_format_info **formats;           \/**< Array of formats supported by the source. \\since 1.0 *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::index	/usr/include/pulse/introspect.h	/^    uint32_t index;                     \/**< Index of the source *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::latency	/usr/include/pulse/introspect.h	/^    pa_usec_t latency;                  \/**< Length of filled record buffer of this source. *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::monitor_of_sink	/usr/include/pulse/introspect.h	/^    uint32_t monitor_of_sink;           \/**< If this is a monitor source the index of the owning sink, otherwise PA_INVALID_INDEX *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::monitor_of_sink_name	/usr/include/pulse/introspect.h	/^    const char *monitor_of_sink_name;   \/**< Name of the owning sink, or PA_INVALID_INDEX *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::mute	/usr/include/pulse/introspect.h	/^    int mute;                           \/**< Mute switch of the sink *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::n_formats	/usr/include/pulse/introspect.h	/^    uint8_t n_formats;                  \/**< Number of formats supported by the source. \\since 1.0 *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::n_ports	/usr/include/pulse/introspect.h	/^    uint32_t n_ports;                   \/**< Number of entries in port array \\since 0.9.16 *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::n_volume_steps	/usr/include/pulse/introspect.h	/^    uint32_t n_volume_steps;            \/**< Number of volume steps for sources which do not support arbitrary volumes. \\since 0.9.15 *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::name	/usr/include/pulse/introspect.h	/^    const char *name;                   \/**< Name of the source *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::owner_module	/usr/include/pulse/introspect.h	/^    uint32_t owner_module;              \/**< Owning module index, or PA_INVALID_INDEX *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::ports	/usr/include/pulse/introspect.h	/^    pa_source_port_info** ports;        \/**< Array of available ports, or NULL. Array is terminated by an entry set to NULL. The number of entries is stored in n_ports \\since 0.9.16  *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::proplist	/usr/include/pulse/introspect.h	/^    pa_proplist *proplist;              \/**< Property list \\since 0.9.11 *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::sample_spec	/usr/include/pulse/introspect.h	/^    pa_sample_spec sample_spec;         \/**< Sample spec of this source *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::state	/usr/include/pulse/introspect.h	/^    pa_source_state_t state;            \/**< State \\since 0.9.15 *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info::volume	/usr/include/pulse/introspect.h	/^    pa_cvolume volume;                  \/**< Volume of the source *\/$/;"	m	struct:pa_source_info	access:public
pa_source_info_cb_t	/usr/include/pulse/introspect.h	/^typedef void (*pa_source_info_cb_t)(pa_context *c, const pa_source_info *i, int eol, void *userdata);$/;"	t
pa_source_output_info	/usr/include/pulse/introspect.h	/^typedef struct pa_source_output_info {$/;"	s
pa_source_output_info	/usr/include/pulse/introspect.h	/^} pa_source_output_info;$/;"	t	typeref:struct:pa_source_output_info
pa_source_output_info::buffer_usec	/usr/include/pulse/introspect.h	/^    pa_usec_t buffer_usec;               \/**< Latency due to buffering in the source output, see pa_latency_info for details. *\/$/;"	m	struct:pa_source_output_info	access:public
pa_source_output_info::channel_map	/usr/include/pulse/introspect.h	/^    pa_channel_map channel_map;          \/**< Channel map *\/$/;"	m	struct:pa_source_output_info	access:public
pa_source_output_info::client	/usr/include/pulse/introspect.h	/^    uint32_t client;                     \/**< Index of the client this source output belongs to, or PA_INVALID_INDEX when it does not belong to any client *\/$/;"	m	struct:pa_source_output_info	access:public
pa_source_output_info::corked	/usr/include/pulse/introspect.h	/^    int corked;                          \/**< Stream corked \\since 1.0 *\/$/;"	m	struct:pa_source_output_info	access:public
pa_source_output_info::driver	/usr/include/pulse/introspect.h	/^    const char *driver;                  \/**< Driver name *\/$/;"	m	struct:pa_source_output_info	access:public
pa_source_output_info::format	/usr/include/pulse/introspect.h	/^    pa_format_info *format;              \/**< Stream format information. \\since 1.0 *\/$/;"	m	struct:pa_source_output_info	access:public
pa_source_output_info::has_volume	/usr/include/pulse/introspect.h	/^    int has_volume;                      \/**< Stream has volume. If not set, then the meaning of this struct's volume member is unspecified. \\since 1.0 *\/$/;"	m	struct:pa_source_output_info	access:public
pa_source_output_info::index	/usr/include/pulse/introspect.h	/^    uint32_t index;                      \/**< Index of the source output *\/$/;"	m	struct:pa_source_output_info	access:public
pa_source_output_info::mute	/usr/include/pulse/introspect.h	/^    int mute;                            \/**< Stream muted \\since 1.0 *\/$/;"	m	struct:pa_source_output_info	access:public
pa_source_output_info::name	/usr/include/pulse/introspect.h	/^    const char *name;                    \/**< Name of the source output *\/$/;"	m	struct:pa_source_output_info	access:public
pa_source_output_info::owner_module	/usr/include/pulse/introspect.h	/^    uint32_t owner_module;               \/**< Index of the module this source output belongs to, or PA_INVALID_INDEX when it does not belong to any module *\/$/;"	m	struct:pa_source_output_info	access:public
pa_source_output_info::proplist	/usr/include/pulse/introspect.h	/^    pa_proplist *proplist;               \/**< Property list \\since 0.9.11 *\/$/;"	m	struct:pa_source_output_info	access:public
pa_source_output_info::resample_method	/usr/include/pulse/introspect.h	/^    const char *resample_method;         \/**< The resampling method used by this source output. *\/$/;"	m	struct:pa_source_output_info	access:public
pa_source_output_info::sample_spec	/usr/include/pulse/introspect.h	/^    pa_sample_spec sample_spec;          \/**< The sample specification of the source output *\/$/;"	m	struct:pa_source_output_info	access:public
pa_source_output_info::source	/usr/include/pulse/introspect.h	/^    uint32_t source;                     \/**< Index of the connected source *\/$/;"	m	struct:pa_source_output_info	access:public
pa_source_output_info::source_usec	/usr/include/pulse/introspect.h	/^    pa_usec_t source_usec;               \/**< Latency of the source device, see pa_latency_info for details. *\/$/;"	m	struct:pa_source_output_info	access:public
pa_source_output_info::volume	/usr/include/pulse/introspect.h	/^    pa_cvolume volume;                   \/**< The volume of this source output \\since 1.0 *\/$/;"	m	struct:pa_source_output_info	access:public
pa_source_output_info::volume_writable	/usr/include/pulse/introspect.h	/^    int volume_writable;                 \/**< The volume can be set. If not set, the volume can still change even though clients can't control the volume. \\since 1.0 *\/$/;"	m	struct:pa_source_output_info	access:public
pa_source_output_info_cb_t	/usr/include/pulse/introspect.h	/^typedef void (*pa_source_output_info_cb_t) (pa_context *c, const pa_source_output_info *i, int eol, void *userdata);$/;"	t
pa_source_port_info	/usr/include/pulse/introspect.h	/^typedef struct pa_source_port_info {$/;"	s
pa_source_port_info	/usr/include/pulse/introspect.h	/^} pa_source_port_info;$/;"	t	typeref:struct:pa_source_port_info
pa_source_port_info::available	/usr/include/pulse/introspect.h	/^    int available;                      \/**< A \\link pa_port_available_t, indicating availability status of this port. \\since 2.0 *\/$/;"	m	struct:pa_source_port_info	access:public
pa_source_port_info::description	/usr/include/pulse/introspect.h	/^    const char *description;            \/**< Description of this port *\/$/;"	m	struct:pa_source_port_info	access:public
pa_source_port_info::name	/usr/include/pulse/introspect.h	/^    const char *name;                   \/**< Name of this port *\/$/;"	m	struct:pa_source_port_info	access:public
pa_source_port_info::priority	/usr/include/pulse/introspect.h	/^    uint32_t priority;                  \/**< The higher this value is the more useful this port is as a default *\/$/;"	m	struct:pa_source_port_info	access:public
pa_source_state	/usr/include/pulse/def.h	/^typedef enum pa_source_state {$/;"	g
pa_source_state_t	/usr/include/pulse/def.h	/^} pa_source_state_t;$/;"	t	typeref:enum:pa_source_state
pa_spawn_api	/usr/include/pulse/def.h	/^typedef struct pa_spawn_api {$/;"	s
pa_spawn_api	/usr/include/pulse/def.h	/^} pa_spawn_api;$/;"	t	typeref:struct:pa_spawn_api
pa_spawn_api::atfork	/usr/include/pulse/def.h	/^    void (*atfork)(void);$/;"	m	struct:pa_spawn_api	access:public
pa_spawn_api::postfork	/usr/include/pulse/def.h	/^    void (*postfork)(void);$/;"	m	struct:pa_spawn_api	access:public
pa_spawn_api::prefork	/usr/include/pulse/def.h	/^    void (*prefork)(void);$/;"	m	struct:pa_spawn_api	access:public
pa_stat_info	/usr/include/pulse/introspect.h	/^typedef struct pa_stat_info {$/;"	s
pa_stat_info	/usr/include/pulse/introspect.h	/^} pa_stat_info;$/;"	t	typeref:struct:pa_stat_info
pa_stat_info::memblock_allocated	/usr/include/pulse/introspect.h	/^    uint32_t memblock_allocated;       \/**< Allocated memory blocks during the whole lifetime of the daemon *\/$/;"	m	struct:pa_stat_info	access:public
pa_stat_info::memblock_allocated_size	/usr/include/pulse/introspect.h	/^    uint32_t memblock_allocated_size;  \/**< Total size of all memory blocks allocated during the whole lifetime of the daemon *\/$/;"	m	struct:pa_stat_info	access:public
pa_stat_info::memblock_total	/usr/include/pulse/introspect.h	/^    uint32_t memblock_total;           \/**< Currently allocated memory blocks *\/$/;"	m	struct:pa_stat_info	access:public
pa_stat_info::memblock_total_size	/usr/include/pulse/introspect.h	/^    uint32_t memblock_total_size;      \/**< Current total size of allocated memory blocks *\/$/;"	m	struct:pa_stat_info	access:public
pa_stat_info::scache_size	/usr/include/pulse/introspect.h	/^    uint32_t scache_size;              \/**< Total size of all sample cache entries. *\/$/;"	m	struct:pa_stat_info	access:public
pa_stat_info_cb_t	/usr/include/pulse/introspect.h	/^typedef void (*pa_stat_info_cb_t) (pa_context *c, const pa_stat_info *i, void *userdata);$/;"	t
pa_stream	/usr/include/pulse/stream.h	/^typedef struct pa_stream pa_stream;$/;"	t	typeref:struct:pa_stream
pa_stream_begin_write	/usr/include/pulse/stream.h	/^int pa_stream_begin_write($/;"	p	signature:( pa_stream *p, void **data, size_t *nbytes)
pa_stream_cancel_write	/usr/include/pulse/stream.h	/^int pa_stream_cancel_write($/;"	p	signature:( pa_stream *p)
pa_stream_connect_playback	/usr/include/pulse/stream.h	/^int pa_stream_connect_playback($/;"	p	signature:( pa_stream *s , const char *dev , const pa_buffer_attr *attr , pa_stream_flags_t flags , const pa_cvolume *volume , pa_stream *sync_stream )
pa_stream_connect_record	/usr/include/pulse/stream.h	/^int pa_stream_connect_record($/;"	p	signature:( pa_stream *s , const char *dev , const pa_buffer_attr *attr , pa_stream_flags_t flags )
pa_stream_connect_upload	/usr/include/pulse/scache.h	/^int pa_stream_connect_upload(pa_stream *s, size_t length);$/;"	p	signature:(pa_stream *s, size_t length)
pa_stream_cork	/usr/include/pulse/stream.h	/^pa_operation* pa_stream_cork(pa_stream *s, int b, pa_stream_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *s, int b, pa_stream_success_cb_t cb, void *userdata)
pa_stream_direction	/usr/include/pulse/def.h	/^typedef enum pa_stream_direction {$/;"	g
pa_stream_direction_t	/usr/include/pulse/def.h	/^} pa_stream_direction_t;$/;"	t	typeref:enum:pa_stream_direction
pa_stream_disconnect	/usr/include/pulse/stream.h	/^int pa_stream_disconnect(pa_stream *s);$/;"	p	signature:(pa_stream *s)
pa_stream_drain	/usr/include/pulse/stream.h	/^pa_operation* pa_stream_drain(pa_stream *s, pa_stream_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *s, pa_stream_success_cb_t cb, void *userdata)
pa_stream_drop	/usr/include/pulse/stream.h	/^int pa_stream_drop(pa_stream *p);$/;"	p	signature:(pa_stream *p)
pa_stream_event_cb_t	/usr/include/pulse/stream.h	/^typedef void (*pa_stream_event_cb_t)(pa_stream *p, const char *name, pa_proplist *pl, void *userdata);$/;"	t
pa_stream_finish_upload	/usr/include/pulse/scache.h	/^int pa_stream_finish_upload(pa_stream *s);$/;"	p	signature:(pa_stream *s)
pa_stream_flags	/usr/include/pulse/def.h	/^typedef enum pa_stream_flags {$/;"	g
pa_stream_flags_t	/usr/include/pulse/def.h	/^} pa_stream_flags_t;$/;"	t	typeref:enum:pa_stream_flags
pa_stream_flush	/usr/include/pulse/stream.h	/^pa_operation* pa_stream_flush(pa_stream *s, pa_stream_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *s, pa_stream_success_cb_t cb, void *userdata)
pa_stream_get_buffer_attr	/usr/include/pulse/stream.h	/^const pa_buffer_attr* pa_stream_get_buffer_attr(pa_stream *s);$/;"	p	signature:(pa_stream *s)
pa_stream_get_channel_map	/usr/include/pulse/stream.h	/^const pa_channel_map* pa_stream_get_channel_map(pa_stream *s);$/;"	p	signature:(pa_stream *s)
pa_stream_get_context	/usr/include/pulse/stream.h	/^pa_context* pa_stream_get_context(pa_stream *p);$/;"	p	signature:(pa_stream *p)
pa_stream_get_device_index	/usr/include/pulse/stream.h	/^uint32_t pa_stream_get_device_index(pa_stream *s);$/;"	p	signature:(pa_stream *s)
pa_stream_get_device_name	/usr/include/pulse/stream.h	/^const char *pa_stream_get_device_name(pa_stream *s);$/;"	p	signature:(pa_stream *s)
pa_stream_get_format_info	/usr/include/pulse/stream.h	/^const pa_format_info* pa_stream_get_format_info(pa_stream *s);$/;"	p	signature:(pa_stream *s)
pa_stream_get_index	/usr/include/pulse/stream.h	/^uint32_t pa_stream_get_index(pa_stream *s);$/;"	p	signature:(pa_stream *s)
pa_stream_get_latency	/usr/include/pulse/stream.h	/^int pa_stream_get_latency(pa_stream *s, pa_usec_t *r_usec, int *negative);$/;"	p	signature:(pa_stream *s, pa_usec_t *r_usec, int *negative)
pa_stream_get_monitor_stream	/usr/include/pulse/stream.h	/^uint32_t pa_stream_get_monitor_stream(pa_stream *s);$/;"	p	signature:(pa_stream *s)
pa_stream_get_sample_spec	/usr/include/pulse/stream.h	/^const pa_sample_spec* pa_stream_get_sample_spec(pa_stream *s);$/;"	p	signature:(pa_stream *s)
pa_stream_get_state	/usr/include/pulse/stream.h	/^pa_stream_state_t pa_stream_get_state(pa_stream *p);$/;"	p	signature:(pa_stream *p)
pa_stream_get_time	/usr/include/pulse/stream.h	/^int pa_stream_get_time(pa_stream *s, pa_usec_t *r_usec);$/;"	p	signature:(pa_stream *s, pa_usec_t *r_usec)
pa_stream_get_timing_info	/usr/include/pulse/stream.h	/^const pa_timing_info* pa_stream_get_timing_info(pa_stream *s);$/;"	p	signature:(pa_stream *s)
pa_stream_get_underflow_index	/usr/include/pulse/stream.h	/^int64_t pa_stream_get_underflow_index(pa_stream *p);$/;"	p	signature:(pa_stream *p)
pa_stream_is_corked	/usr/include/pulse/stream.h	/^int pa_stream_is_corked(pa_stream *s);$/;"	p	signature:(pa_stream *s)
pa_stream_is_suspended	/usr/include/pulse/stream.h	/^int pa_stream_is_suspended(pa_stream *s);$/;"	p	signature:(pa_stream *s)
pa_stream_new	/usr/include/pulse/stream.h	/^pa_stream* pa_stream_new($/;"	p	signature:( pa_context *c , const char *name , const pa_sample_spec *ss , const pa_channel_map *map )
pa_stream_new_extended	/usr/include/pulse/stream.h	/^pa_stream *pa_stream_new_extended($/;"	p	signature:( pa_context *c , const char *name , pa_format_info * const * formats , unsigned int n_formats , pa_proplist *p )
pa_stream_new_with_proplist	/usr/include/pulse/stream.h	/^pa_stream* pa_stream_new_with_proplist($/;"	p	signature:( pa_context *c , const char *name , const pa_sample_spec *ss , const pa_channel_map *map , pa_proplist *p )
pa_stream_notify_cb_t	/usr/include/pulse/stream.h	/^typedef void (*pa_stream_notify_cb_t)(pa_stream *p, void *userdata);$/;"	t
pa_stream_peek	/usr/include/pulse/stream.h	/^int pa_stream_peek($/;"	p	signature:( pa_stream *p , const void **data , size_t *nbytes )
pa_stream_prebuf	/usr/include/pulse/stream.h	/^pa_operation* pa_stream_prebuf(pa_stream *s, pa_stream_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *s, pa_stream_success_cb_t cb, void *userdata)
pa_stream_proplist_remove	/usr/include/pulse/stream.h	/^pa_operation *pa_stream_proplist_remove(pa_stream *s, const char *const keys[], pa_stream_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *s, const char *const keys[], pa_stream_success_cb_t cb, void *userdata)
pa_stream_proplist_update	/usr/include/pulse/stream.h	/^pa_operation *pa_stream_proplist_update(pa_stream *s, pa_update_mode_t mode, pa_proplist *p, pa_stream_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *s, pa_update_mode_t mode, pa_proplist *p, pa_stream_success_cb_t cb, void *userdata)
pa_stream_readable_size	/usr/include/pulse/stream.h	/^size_t pa_stream_readable_size(pa_stream *p);$/;"	p	signature:(pa_stream *p)
pa_stream_ref	/usr/include/pulse/stream.h	/^pa_stream *pa_stream_ref(pa_stream *s);$/;"	p	signature:(pa_stream *s)
pa_stream_request_cb_t	/usr/include/pulse/stream.h	/^typedef void (*pa_stream_request_cb_t)(pa_stream *p, size_t nbytes, void *userdata);$/;"	t
pa_stream_set_buffer_attr	/usr/include/pulse/stream.h	/^pa_operation *pa_stream_set_buffer_attr(pa_stream *s, const pa_buffer_attr *attr, pa_stream_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *s, const pa_buffer_attr *attr, pa_stream_success_cb_t cb, void *userdata)
pa_stream_set_buffer_attr_callback	/usr/include/pulse/stream.h	/^void pa_stream_set_buffer_attr_callback(pa_stream *p, pa_stream_notify_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *p, pa_stream_notify_cb_t cb, void *userdata)
pa_stream_set_event_callback	/usr/include/pulse/stream.h	/^void pa_stream_set_event_callback(pa_stream *p, pa_stream_event_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *p, pa_stream_event_cb_t cb, void *userdata)
pa_stream_set_latency_update_callback	/usr/include/pulse/stream.h	/^void pa_stream_set_latency_update_callback(pa_stream *p, pa_stream_notify_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *p, pa_stream_notify_cb_t cb, void *userdata)
pa_stream_set_monitor_stream	/usr/include/pulse/stream.h	/^int pa_stream_set_monitor_stream(pa_stream *s, uint32_t sink_input_idx);$/;"	p	signature:(pa_stream *s, uint32_t sink_input_idx)
pa_stream_set_moved_callback	/usr/include/pulse/stream.h	/^void pa_stream_set_moved_callback(pa_stream *p, pa_stream_notify_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *p, pa_stream_notify_cb_t cb, void *userdata)
pa_stream_set_name	/usr/include/pulse/stream.h	/^pa_operation* pa_stream_set_name(pa_stream *s, const char *name, pa_stream_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *s, const char *name, pa_stream_success_cb_t cb, void *userdata)
pa_stream_set_overflow_callback	/usr/include/pulse/stream.h	/^void pa_stream_set_overflow_callback(pa_stream *p, pa_stream_notify_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *p, pa_stream_notify_cb_t cb, void *userdata)
pa_stream_set_read_callback	/usr/include/pulse/stream.h	/^void pa_stream_set_read_callback(pa_stream *p, pa_stream_request_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *p, pa_stream_request_cb_t cb, void *userdata)
pa_stream_set_started_callback	/usr/include/pulse/stream.h	/^void pa_stream_set_started_callback(pa_stream *p, pa_stream_notify_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *p, pa_stream_notify_cb_t cb, void *userdata)
pa_stream_set_state_callback	/usr/include/pulse/stream.h	/^void pa_stream_set_state_callback(pa_stream *s, pa_stream_notify_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *s, pa_stream_notify_cb_t cb, void *userdata)
pa_stream_set_suspended_callback	/usr/include/pulse/stream.h	/^void pa_stream_set_suspended_callback(pa_stream *p, pa_stream_notify_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *p, pa_stream_notify_cb_t cb, void *userdata)
pa_stream_set_underflow_callback	/usr/include/pulse/stream.h	/^void pa_stream_set_underflow_callback(pa_stream *p, pa_stream_notify_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *p, pa_stream_notify_cb_t cb, void *userdata)
pa_stream_set_write_callback	/usr/include/pulse/stream.h	/^void pa_stream_set_write_callback(pa_stream *p, pa_stream_request_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *p, pa_stream_request_cb_t cb, void *userdata)
pa_stream_state	/usr/include/pulse/def.h	/^typedef enum pa_stream_state {$/;"	g
pa_stream_state_t	/usr/include/pulse/def.h	/^} pa_stream_state_t;$/;"	t	typeref:enum:pa_stream_state
pa_stream_success_cb_t	/usr/include/pulse/stream.h	/^typedef void (*pa_stream_success_cb_t) (pa_stream*s, int success, void *userdata);$/;"	t
pa_stream_trigger	/usr/include/pulse/stream.h	/^pa_operation* pa_stream_trigger(pa_stream *s, pa_stream_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *s, pa_stream_success_cb_t cb, void *userdata)
pa_stream_unref	/usr/include/pulse/stream.h	/^void pa_stream_unref(pa_stream *s);$/;"	p	signature:(pa_stream *s)
pa_stream_update_sample_rate	/usr/include/pulse/stream.h	/^pa_operation *pa_stream_update_sample_rate(pa_stream *s, uint32_t rate, pa_stream_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *s, uint32_t rate, pa_stream_success_cb_t cb, void *userdata)
pa_stream_update_timing_info	/usr/include/pulse/stream.h	/^pa_operation* pa_stream_update_timing_info(pa_stream *p, pa_stream_success_cb_t cb, void *userdata);$/;"	p	signature:(pa_stream *p, pa_stream_success_cb_t cb, void *userdata)
pa_stream_writable_size	/usr/include/pulse/stream.h	/^size_t pa_stream_writable_size(pa_stream *p);$/;"	p	signature:(pa_stream *p)
pa_stream_write	/usr/include/pulse/stream.h	/^int pa_stream_write($/;"	p	signature:( pa_stream *p , const void *data , size_t nbytes , pa_free_cb_t free_cb , int64_t offset, pa_seek_mode_t seek )
pa_strerror	/usr/include/pulse/error.h	/^const char* pa_strerror(int error);$/;"	p	signature:(int error)
pa_subscription_event_type	/usr/include/pulse/def.h	/^typedef enum pa_subscription_event_type {$/;"	g
pa_subscription_event_type_t	/usr/include/pulse/def.h	/^} pa_subscription_event_type_t;$/;"	t	typeref:enum:pa_subscription_event_type
pa_subscription_mask	/usr/include/pulse/def.h	/^typedef enum pa_subscription_mask {$/;"	g
pa_subscription_mask_t	/usr/include/pulse/def.h	/^} pa_subscription_mask_t;$/;"	t	typeref:enum:pa_subscription_mask
pa_subscription_match_flags	/usr/include/pulse/def.h	569;"	d
pa_sw_cvolume_divide	/usr/include/pulse/volume.h	/^pa_cvolume *pa_sw_cvolume_divide(pa_cvolume *dest, const pa_cvolume *a, const pa_cvolume *b);$/;"	p	signature:(pa_cvolume *dest, const pa_cvolume *a, const pa_cvolume *b)
pa_sw_cvolume_divide_scalar	/usr/include/pulse/volume.h	/^pa_cvolume *pa_sw_cvolume_divide_scalar(pa_cvolume *dest, const pa_cvolume *a, pa_volume_t b);$/;"	p	signature:(pa_cvolume *dest, const pa_cvolume *a, pa_volume_t b)
pa_sw_cvolume_multiply	/usr/include/pulse/volume.h	/^pa_cvolume *pa_sw_cvolume_multiply(pa_cvolume *dest, const pa_cvolume *a, const pa_cvolume *b);$/;"	p	signature:(pa_cvolume *dest, const pa_cvolume *a, const pa_cvolume *b)
pa_sw_cvolume_multiply_scalar	/usr/include/pulse/volume.h	/^pa_cvolume *pa_sw_cvolume_multiply_scalar(pa_cvolume *dest, const pa_cvolume *a, pa_volume_t b);$/;"	p	signature:(pa_cvolume *dest, const pa_cvolume *a, pa_volume_t b)
pa_sw_cvolume_snprint_dB	/usr/include/pulse/volume.h	/^char *pa_sw_cvolume_snprint_dB(char *s, size_t l, const pa_cvolume *c);$/;"	p	signature:(char *s, size_t l, const pa_cvolume *c)
pa_sw_volume_snprint_dB	/usr/include/pulse/volume.h	/^char *pa_sw_volume_snprint_dB(char *s, size_t l, pa_volume_t v);$/;"	p	signature:(char *s, size_t l, pa_volume_t v)
pa_threaded_mainloop	/usr/include/pulse/thread-mainloop.h	/^typedef struct pa_threaded_mainloop pa_threaded_mainloop;$/;"	t	typeref:struct:pa_threaded_mainloop
pa_threaded_mainloop_accept	/usr/include/pulse/thread-mainloop.h	/^void pa_threaded_mainloop_accept(pa_threaded_mainloop *m);$/;"	p	signature:(pa_threaded_mainloop *m)
pa_threaded_mainloop_free	/usr/include/pulse/thread-mainloop.h	/^void pa_threaded_mainloop_free(pa_threaded_mainloop* m);$/;"	p	signature:(pa_threaded_mainloop* m)
pa_threaded_mainloop_get_api	/usr/include/pulse/thread-mainloop.h	/^pa_mainloop_api* pa_threaded_mainloop_get_api(pa_threaded_mainloop*m);$/;"	p	signature:(pa_threaded_mainloop*m)
pa_threaded_mainloop_get_retval	/usr/include/pulse/thread-mainloop.h	/^int pa_threaded_mainloop_get_retval(pa_threaded_mainloop *m);$/;"	p	signature:(pa_threaded_mainloop *m)
pa_threaded_mainloop_in_thread	/usr/include/pulse/thread-mainloop.h	/^int pa_threaded_mainloop_in_thread(pa_threaded_mainloop *m);$/;"	p	signature:(pa_threaded_mainloop *m)
pa_threaded_mainloop_lock	/usr/include/pulse/thread-mainloop.h	/^void pa_threaded_mainloop_lock(pa_threaded_mainloop *m);$/;"	p	signature:(pa_threaded_mainloop *m)
pa_threaded_mainloop_new	/usr/include/pulse/thread-mainloop.h	/^pa_threaded_mainloop *pa_threaded_mainloop_new(void);$/;"	p	signature:(void)
pa_threaded_mainloop_signal	/usr/include/pulse/thread-mainloop.h	/^void pa_threaded_mainloop_signal(pa_threaded_mainloop *m, int wait_for_accept);$/;"	p	signature:(pa_threaded_mainloop *m, int wait_for_accept)
pa_threaded_mainloop_start	/usr/include/pulse/thread-mainloop.h	/^int pa_threaded_mainloop_start(pa_threaded_mainloop *m);$/;"	p	signature:(pa_threaded_mainloop *m)
pa_threaded_mainloop_stop	/usr/include/pulse/thread-mainloop.h	/^void pa_threaded_mainloop_stop(pa_threaded_mainloop *m);$/;"	p	signature:(pa_threaded_mainloop *m)
pa_threaded_mainloop_unlock	/usr/include/pulse/thread-mainloop.h	/^void pa_threaded_mainloop_unlock(pa_threaded_mainloop *m);$/;"	p	signature:(pa_threaded_mainloop *m)
pa_threaded_mainloop_wait	/usr/include/pulse/thread-mainloop.h	/^void pa_threaded_mainloop_wait(pa_threaded_mainloop *m);$/;"	p	signature:(pa_threaded_mainloop *m)
pa_time_event	/usr/include/pulse/mainloop-api.h	/^typedef struct pa_time_event pa_time_event;$/;"	t	typeref:struct:pa_time_event
pa_time_event_cb_t	/usr/include/pulse/mainloop-api.h	/^typedef void (*pa_time_event_cb_t)(pa_mainloop_api*a, pa_time_event* e, const struct timeval *tv, void *userdata);$/;"	t
pa_time_event_destroy_cb_t	/usr/include/pulse/mainloop-api.h	/^typedef void (*pa_time_event_destroy_cb_t)(pa_mainloop_api*a, pa_time_event *e, void *userdata);$/;"	t
pa_timeval_add	/usr/include/pulse/timeval.h	/^struct timeval* pa_timeval_add(struct timeval *tv, pa_usec_t v);$/;"	p	signature:(struct timeval *tv, pa_usec_t v)
pa_timeval_age	/usr/include/pulse/timeval.h	/^pa_usec_t pa_timeval_age(const struct timeval *tv);$/;"	p	signature:(const struct timeval *tv)
pa_timeval_load	/usr/include/pulse/timeval.h	/^pa_usec_t pa_timeval_load(const struct timeval *tv);$/;"	p	signature:(const struct timeval *tv)
pa_timeval_store	/usr/include/pulse/timeval.h	/^struct timeval* pa_timeval_store(struct timeval *tv, pa_usec_t v);$/;"	p	signature:(struct timeval *tv, pa_usec_t v)
pa_timeval_sub	/usr/include/pulse/timeval.h	/^struct timeval* pa_timeval_sub(struct timeval *tv, pa_usec_t v);$/;"	p	signature:(struct timeval *tv, pa_usec_t v)
pa_timing_info	/usr/include/pulse/def.h	/^typedef struct pa_timing_info {$/;"	s
pa_timing_info	/usr/include/pulse/def.h	/^} pa_timing_info;$/;"	t	typeref:struct:pa_timing_info
pa_timing_info::configured_sink_usec	/usr/include/pulse/def.h	/^    pa_usec_t configured_sink_usec;$/;"	m	struct:pa_timing_info	access:public
pa_timing_info::configured_source_usec	/usr/include/pulse/def.h	/^    pa_usec_t configured_source_usec;$/;"	m	struct:pa_timing_info	access:public
pa_timing_info::playing	/usr/include/pulse/def.h	/^    int playing;$/;"	m	struct:pa_timing_info	access:public
pa_timing_info::read_index	/usr/include/pulse/def.h	/^    int64_t read_index;$/;"	m	struct:pa_timing_info	access:public
pa_timing_info::read_index_corrupt	/usr/include/pulse/def.h	/^    int read_index_corrupt;$/;"	m	struct:pa_timing_info	access:public
pa_timing_info::since_underrun	/usr/include/pulse/def.h	/^    int64_t since_underrun;$/;"	m	struct:pa_timing_info	access:public
pa_timing_info::sink_usec	/usr/include/pulse/def.h	/^    pa_usec_t sink_usec;$/;"	m	struct:pa_timing_info	access:public
pa_timing_info::source_usec	/usr/include/pulse/def.h	/^    pa_usec_t source_usec;$/;"	m	struct:pa_timing_info	access:public
pa_timing_info::synchronized_clocks	/usr/include/pulse/def.h	/^    int synchronized_clocks;$/;"	m	struct:pa_timing_info	access:public
pa_timing_info::timestamp	/usr/include/pulse/def.h	/^    struct timeval timestamp;$/;"	m	struct:pa_timing_info	typeref:struct:pa_timing_info::timeval	access:public
pa_timing_info::transport_usec	/usr/include/pulse/def.h	/^    pa_usec_t transport_usec;$/;"	m	struct:pa_timing_info	access:public
pa_timing_info::write_index	/usr/include/pulse/def.h	/^    int64_t write_index;$/;"	m	struct:pa_timing_info	access:public
pa_timing_info::write_index_corrupt	/usr/include/pulse/def.h	/^    int write_index_corrupt;$/;"	m	struct:pa_timing_info	access:public
pa_update_mode	/usr/include/pulse/proplist.h	/^typedef enum pa_update_mode {$/;"	g
pa_update_mode_t	/usr/include/pulse/proplist.h	/^} pa_update_mode_t;$/;"	t	typeref:enum:pa_update_mode
pa_usec_t	/usr/include/pulse/sample.h	/^typedef uint64_t pa_usec_t;$/;"	t
pa_utf8_filter	/usr/include/pulse/utf8.h	/^char *pa_utf8_filter(const char *str);$/;"	p	signature:(const char *str)
pa_utf8_to_locale	/usr/include/pulse/utf8.h	/^char* pa_utf8_to_locale (const char *str);$/;"	p	signature:(const char *str)
pa_volume_snprint	/usr/include/pulse/volume.h	/^char *pa_volume_snprint(char *s, size_t l, pa_volume_t v);$/;"	p	signature:(char *s, size_t l, pa_volume_t v)
pa_volume_t	/usr/include/pulse/volume.h	/^typedef uint32_t pa_volume_t;$/;"	t
pa_xfree	/usr/include/pulse/xmalloc.h	/^void pa_xfree(void *p);$/;"	p	signature:(void *p)
pa_xnew	/usr/include/pulse/xmalloc.h	70;"	d
pa_xnew0	/usr/include/pulse/xmalloc.h	81;"	d
pa_xnewdup	/usr/include/pulse/xmalloc.h	92;"	d
pa_xrenew	/usr/include/pulse/xmalloc.h	103;"	d
playing	/usr/include/pulse/def.h	/^    int playing;$/;"	m	struct:pa_timing_info	access:public
plist	/usr/include/pulse/format.h	/^    pa_proplist *plist;$/;"	m	struct:pa_format_info	access:public
ports	/usr/include/pulse/introspect.h	/^    pa_card_port_info **ports;           \/**< Array of pointers to ports, or NULL. Array is terminated by an entry set to NULL. *\/$/;"	m	struct:pa_card_info	access:public
ports	/usr/include/pulse/introspect.h	/^    pa_sink_port_info** ports;         \/**< Array of available ports, or NULL. Array is terminated by an entry set to NULL. The number of entries is stored in n_ports \\since 0.9.16 *\/$/;"	m	struct:pa_sink_info	access:public
ports	/usr/include/pulse/introspect.h	/^    pa_source_port_info** ports;        \/**< Array of available ports, or NULL. Array is terminated by an entry set to NULL. The number of entries is stored in n_ports \\since 0.9.16  *\/$/;"	m	struct:pa_source_info	access:public
postfork	/usr/include/pulse/def.h	/^    void (*postfork)(void);$/;"	m	struct:pa_spawn_api	access:public
prebuf	/usr/include/pulse/def.h	/^    uint32_t prebuf;$/;"	m	struct:pa_buffer_attr	access:public
prefork	/usr/include/pulse/def.h	/^    void (*prefork)(void);$/;"	m	struct:pa_spawn_api	access:public
priority	/usr/include/pulse/ext-device-manager.h	/^    uint32_t priority;$/;"	m	struct:pa_ext_device_manager_role_priority_info	access:public
priority	/usr/include/pulse/introspect.h	/^    uint32_t priority;                  \/**< The higher this value is the more useful this port is as a default *\/$/;"	m	struct:pa_card_port_info	access:public
priority	/usr/include/pulse/introspect.h	/^    uint32_t priority;                  \/**< The higher this value is the more useful this port is as a default *\/$/;"	m	struct:pa_sink_port_info	access:public
priority	/usr/include/pulse/introspect.h	/^    uint32_t priority;                  \/**< The higher this value is the more useful this port is as a default *\/$/;"	m	struct:pa_source_port_info	access:public
priority	/usr/include/pulse/introspect.h	/^    uint32_t priority;                  \/**< The higher this value is the more useful this profile is as a default *\/$/;"	m	struct:pa_card_profile_info	access:public
profiles	/usr/include/pulse/introspect.h	/^    pa_card_profile_info* profiles;      \/**< Array of available profile, or NULL. Array is terminated by an entry with name set to NULL. Number of entries is stored in n_profiles *\/$/;"	m	struct:pa_card_info	access:public
profiles	/usr/include/pulse/introspect.h	/^    pa_card_profile_info** profiles;    \/**< Array of pointers available profile, or NULL. Array is terminated by an entry set to NULL. *\/$/;"	m	struct:pa_card_port_info	access:public
proplist	/usr/include/pulse/introspect.h	/^    pa_proplist *proplist;                \/**< Property list for this sample. \\since 0.9.11 *\/$/;"	m	struct:pa_sample_info	access:public
proplist	/usr/include/pulse/introspect.h	/^    pa_proplist *proplist;               \/**< Property list *\/$/;"	m	struct:pa_card_info	access:public
proplist	/usr/include/pulse/introspect.h	/^    pa_proplist *proplist;               \/**< Property list \\since 0.9.11 *\/$/;"	m	struct:pa_client_info	access:public
proplist	/usr/include/pulse/introspect.h	/^    pa_proplist *proplist;               \/**< Property list \\since 0.9.11 *\/$/;"	m	struct:pa_sink_input_info	access:public
proplist	/usr/include/pulse/introspect.h	/^    pa_proplist *proplist;               \/**< Property list \\since 0.9.11 *\/$/;"	m	struct:pa_source_output_info	access:public
proplist	/usr/include/pulse/introspect.h	/^    pa_proplist *proplist;              \/**< Property list *\/$/;"	m	struct:pa_card_port_info	access:public
proplist	/usr/include/pulse/introspect.h	/^    pa_proplist *proplist;              \/**< Property list \\since 0.9.11 *\/$/;"	m	struct:pa_source_info	access:public
proplist	/usr/include/pulse/introspect.h	/^    pa_proplist *proplist;              \/**< Property list \\since 0.9.15 *\/$/;"	m	struct:pa_module_info	access:public
proplist	/usr/include/pulse/introspect.h	/^    pa_proplist *proplist;             \/**< Property list \\since 0.9.11 *\/$/;"	m	struct:pa_sink_info	access:public
quit	/usr/include/pulse/mainloop-api.h	/^    void (*quit)(pa_mainloop_api*a, int retval);$/;"	m	struct:pa_mainloop_api	access:public
rate	/usr/include/pulse/sample.h	/^    uint32_t rate;$/;"	m	struct:pa_sample_spec	access:public
read_index	/usr/include/pulse/def.h	/^    int64_t read_index;$/;"	m	struct:pa_timing_info	access:public
read_index_corrupt	/usr/include/pulse/def.h	/^    int read_index_corrupt;$/;"	m	struct:pa_timing_info	access:public
resample_method	/usr/include/pulse/introspect.h	/^    const char *resample_method;         \/**< The resampling method used by this sink input. *\/$/;"	m	struct:pa_sink_input_info	access:public
resample_method	/usr/include/pulse/introspect.h	/^    const char *resample_method;         \/**< The resampling method used by this source output. *\/$/;"	m	struct:pa_source_output_info	access:public
role	/usr/include/pulse/ext-device-manager.h	/^    const char *role;$/;"	m	struct:pa_ext_device_manager_role_priority_info	access:public
role_priorities	/usr/include/pulse/ext-device-manager.h	/^    pa_ext_device_manager_role_priority_info *role_priorities; \/**< An array of role priority structures or NULL *\/$/;"	m	struct:pa_ext_device_manager_info	access:public
sample_spec	/usr/include/pulse/introspect.h	/^    pa_sample_spec sample_spec;           \/**< Sample specification of the sample *\/$/;"	m	struct:pa_sample_info	access:public
sample_spec	/usr/include/pulse/introspect.h	/^    pa_sample_spec sample_spec;          \/**< The sample specification of the sink input *\/$/;"	m	struct:pa_sink_input_info	access:public
sample_spec	/usr/include/pulse/introspect.h	/^    pa_sample_spec sample_spec;          \/**< The sample specification of the source output *\/$/;"	m	struct:pa_source_output_info	access:public
sample_spec	/usr/include/pulse/introspect.h	/^    pa_sample_spec sample_spec;         \/**< Default sample specification *\/$/;"	m	struct:pa_server_info	access:public
sample_spec	/usr/include/pulse/introspect.h	/^    pa_sample_spec sample_spec;         \/**< Sample spec of this source *\/$/;"	m	struct:pa_source_info	access:public
sample_spec	/usr/include/pulse/introspect.h	/^    pa_sample_spec sample_spec;        \/**< Sample spec of this sink *\/$/;"	m	struct:pa_sink_info	access:public
scache_size	/usr/include/pulse/introspect.h	/^    uint32_t scache_size;              \/**< Total size of all sample cache entries. *\/$/;"	m	struct:pa_stat_info	access:public
server_name	/usr/include/pulse/introspect.h	/^    const char *server_name;            \/**< Server package name (usually "pulseaudio") *\/$/;"	m	struct:pa_server_info	access:public
server_version	/usr/include/pulse/introspect.h	/^    const char *server_version;         \/**< Version string of the daemon *\/$/;"	m	struct:pa_server_info	access:public
since_underrun	/usr/include/pulse/def.h	/^    int64_t since_underrun;$/;"	m	struct:pa_timing_info	access:public
sink	/usr/include/pulse/introspect.h	/^    uint32_t sink;                       \/**< Index of the connected sink *\/$/;"	m	struct:pa_sink_input_info	access:public
sink_usec	/usr/include/pulse/def.h	/^    pa_usec_t sink_usec;$/;"	m	struct:pa_timing_info	access:public
sink_usec	/usr/include/pulse/introspect.h	/^    pa_usec_t sink_usec;                 \/**< Latency of the sink device, see pa_latency_info for details *\/$/;"	m	struct:pa_sink_input_info	access:public
source	/usr/include/pulse/introspect.h	/^    uint32_t source;                     \/**< Index of the connected source *\/$/;"	m	struct:pa_source_output_info	access:public
source_usec	/usr/include/pulse/def.h	/^    pa_usec_t source_usec;$/;"	m	struct:pa_timing_info	access:public
source_usec	/usr/include/pulse/introspect.h	/^    pa_usec_t source_usec;               \/**< Latency of the source device, see pa_latency_info for details. *\/$/;"	m	struct:pa_source_output_info	access:public
state	/usr/include/pulse/introspect.h	/^    pa_sink_state_t state;             \/**< State \\since 0.9.15 *\/$/;"	m	struct:pa_sink_info	access:public
state	/usr/include/pulse/introspect.h	/^    pa_source_state_t state;            \/**< State \\since 0.9.15 *\/$/;"	m	struct:pa_source_info	access:public
synchronized_clocks	/usr/include/pulse/def.h	/^    int synchronized_clocks;$/;"	m	struct:pa_timing_info	access:public
time_free	/usr/include/pulse/mainloop-api.h	/^    void (*time_free)(pa_time_event* e);$/;"	m	struct:pa_mainloop_api	access:public
time_new	/usr/include/pulse/mainloop-api.h	/^    pa_time_event* (*time_new)(pa_mainloop_api*a, const struct timeval *tv, pa_time_event_cb_t cb, void *userdata);$/;"	m	struct:pa_mainloop_api	access:public
time_restart	/usr/include/pulse/mainloop-api.h	/^    void (*time_restart)(pa_time_event* e, const struct timeval *tv);$/;"	m	struct:pa_mainloop_api	access:public
time_set_destroy	/usr/include/pulse/mainloop-api.h	/^    void (*time_set_destroy)(pa_time_event *e, pa_time_event_destroy_cb_t cb);$/;"	m	struct:pa_mainloop_api	access:public
timestamp	/usr/include/pulse/def.h	/^    struct timeval timestamp;$/;"	m	struct:pa_timing_info	typeref:struct:pa_timing_info::timeval	access:public
tlength	/usr/include/pulse/def.h	/^    uint32_t tlength;$/;"	m	struct:pa_buffer_attr	access:public
transport_usec	/usr/include/pulse/def.h	/^    pa_usec_t transport_usec;$/;"	m	struct:pa_timing_info	access:public
type	/usr/include/pulse/ext-device-restore.h	/^    pa_device_type_t type;       \/**< Device type sink or source? *\/$/;"	m	struct:pa_ext_device_restore_info	access:public
type	/usr/include/pulse/introspect.h	/^    pa_autoload_type_t type;      \/**< Type of the autoload entry *\/$/;"	m	struct:pa_autoload_info	access:public
user_name	/usr/include/pulse/introspect.h	/^    const char *user_name;              \/**< User name of the daemon process *\/$/;"	m	struct:pa_server_info	access:public
userdata	/usr/include/pulse/mainloop-api.h	/^    void *userdata;$/;"	m	struct:pa_mainloop_api	access:public
values	/usr/include/pulse/volume.h	/^    pa_volume_t values[PA_CHANNELS_MAX];  \/**< Per-channel volume *\/$/;"	m	struct:pa_cvolume	access:public
volume	/usr/include/pulse/ext-stream-restore.h	/^    pa_cvolume volume;           \/**< The volume of the stream when it was seen last, if applicable and saved *\/$/;"	m	struct:pa_ext_stream_restore_info	access:public
volume	/usr/include/pulse/introspect.h	/^    pa_cvolume volume;                    \/**< Default volume of this entry *\/$/;"	m	struct:pa_sample_info	access:public
volume	/usr/include/pulse/introspect.h	/^    pa_cvolume volume;                   \/**< The volume of this sink input *\/$/;"	m	struct:pa_sink_input_info	access:public
volume	/usr/include/pulse/introspect.h	/^    pa_cvolume volume;                   \/**< The volume of this source output \\since 1.0 *\/$/;"	m	struct:pa_source_output_info	access:public
volume	/usr/include/pulse/introspect.h	/^    pa_cvolume volume;                  \/**< Volume of the source *\/$/;"	m	struct:pa_source_info	access:public
volume	/usr/include/pulse/introspect.h	/^    pa_cvolume volume;                 \/**< Volume of the sink *\/$/;"	m	struct:pa_sink_info	access:public
volume_writable	/usr/include/pulse/introspect.h	/^    int volume_writable;                 \/**< The volume can be set. If not set, the volume can still change even though clients can't control the volume. \\since 1.0 *\/$/;"	m	struct:pa_sink_input_info	access:public
volume_writable	/usr/include/pulse/introspect.h	/^    int volume_writable;                 \/**< The volume can be set. If not set, the volume can still change even though clients can't control the volume. \\since 1.0 *\/$/;"	m	struct:pa_source_output_info	access:public
write_index	/usr/include/pulse/def.h	/^    int64_t write_index;$/;"	m	struct:pa_timing_info	access:public
write_index_corrupt	/usr/include/pulse/def.h	/^    int write_index_corrupt;$/;"	m	struct:pa_timing_info	access:public
